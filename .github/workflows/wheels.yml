name: Build Python wheels
on:
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload wheels to PyPI? (0: no, 1: yes)'
        required: true
        default: '0'

jobs:
  build_wheels:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-13, macos-14]
        python: [cp38, cp39, cp310, cp311, cp312, cp312_stable, cp313]
        exclude:
          # The first Python version to target Apple arm64 architectures is 3.9
          - os: macos-14
            python: cp38
      fail-fast: false

    name: >
      ${{ matrix.python }} wheel for ${{ matrix.os }}
      ${{ (endsWith(matrix.python, '_stable') && '(stable ABI)') || '' }}
    runs-on: ${{ matrix.os }}

    steps:
      ###########################################################
      # Setup local environment (source code, build requirements)
      ###########################################################
      - uses: Wandalen/wretry.action@v3.7.2
        with:
          action: actions/checkout@v3
          with: |
            submodules: recursive
          attempt_limit: 3
          attempt_delay: 2000

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.10'

      - name: Prepare compiler environment for Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.20.0


      ################################################################
      # Set up envvars to build the correct wheel (stable ABI or not)
      ################################################################



      - name: Prepare cibuildwheel environment (UNIX)
        if: ${{ ! endsWith(matrix.python, '_stable') && runner.os != 'Windows' }}
        run: |
          echo "CIBW_BUILD=${{ matrix.python }}-*" >> $GITHUB_ENV &&
          echo "CIBW_CONFIG_SETTINGS=\"cmake.args=-DMI_DEFAULT_VARIANTS=\"scalar_rgb,scalar_spectral,scalar_spectral_polarized,llvm_ad_rgb,llvm_ad_mono,llvm_ad_mono_polarized,llvm_ad_spectral,llvm_ad_spectral_polarized,cuda_ad_rgb,cuda_ad_mono,cuda_ad_mono_polarized,cuda_ad_spectral,cuda_ad_spectral_polarized\"\"" >> $GITHUB_ENV

      - name: Prepare cibuildwheel environment (Windows)
        if: ${{ ! endsWith(matrix.python, '_stable') && runner.os == 'Windows' }}
        run: |
          echo "CIBW_BUILD=${{ matrix.python }}-*" >> $env:GITHUB_ENV
          echo "CIBW_CONFIG_SETTINGS=cmake.args='-DMI_DEFAULT_VARIANTS='scalar_rgb,scalar_spectral,scalar_spectral_polarized,llvm_ad_rgb,llvm_ad_mono,llvm_ad_mono_polarized,llvm_ad_spectral,llvm_ad_spectral_polarized,cuda_ad_rgb,cuda_ad_mono,cuda_ad_mono_polarized,cuda_ad_spectral,cuda_ad_spectral_polarized''" >> $env:GITHUB_ENV

      - name: Prepare cibuildwheel environment for stable ABI wheel (UNIX)
        if: ${{ endsWith(matrix.python, '_stable') && runner.os != 'Windows' }}
        run: |
          stable_cp=$(echo ${{ matrix.python }} | cut -d_ -f1) &&
          echo "CIBW_BUILD=${stable_cp}-*" >> $GITHUB_ENV &&
          echo "CIBW_CONFIG_SETTINGS=\"wheel.py-api=cp312\" \"cmake.args=-DDRJIT_STABLE_ABI=ON -DMI_STABLE_ABI=ON -DMI_DEFAULT_VARIANTS=\"scalar_rgb,scalar_spectral,scalar_spectral_polarized,llvm_ad_rgb,llvm_ad_mono,llvm_ad_mono_polarized,llvm_ad_spectral,llvm_ad_spectral_polarized,cuda_ad_rgb,cuda_ad_mono,cuda_ad_mono_polarized,cuda_ad_spectral,cuda_ad_spectral_polarized\"\"" >> $GITHUB_ENV

      - name: Prepare cibuildwheel environment for stable ABI wheel (Windows)
        if: ${{ endsWith(matrix.python, '_stable') && runner.os == 'Windows' }}
        run: |
          $stable_cp = '${{ matrix.python }}' -split '_'
          echo "CIBW_BUILD=$($stable_cp[0])-*" >> $env:GITHUB_ENV
          echo "CIBW_CONFIG_SETTINGS=wheel.py-api=cp312 cmake.args='-DDRJIT_STABLE_ABI=ON -DMI_STABLE_ABI=ON -DMI_DEFAULT_VARIANTS='scalar_rgb,scalar_spectral,scalar_spectral_polarized,llvm_ad_rgb,llvm_ad_mono,llvm_ad_mono_polarized,llvm_ad_spectral,llvm_ad_spectral_polarized,cuda_ad_rgb,cuda_ad_mono,cuda_ad_mono_polarized,cuda_ad_spectral,cuda_ad_spectral_polarized''" >> $env:GITHUB_ENV


      #########################
      # Build and store wheels
      #########################
      - name: Build wheel
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  upload_pypi:
    name: Upload wheels to PyPI
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.upload == '1'}}
    needs: [build_wheels]

    steps:
      #########################
      # Fetch and upload wheels
      #########################
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.10.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
