//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35404655
// Cuda compilation tools, release 12.8, V12.8.61
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_50
.address_size 64

	// .globl	__intersection__cylinder

.visible .entry __intersection__cylinder()
{
	.reg .pred 	%p<58>;
	.reg .b16 	%rs<8>;
	.reg .f32 	%f<1031>;
	.reg .b32 	%r<322>;
	.reg .b64 	%rd<258>;


	// begin inline asm
	call (%rd17), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u64 	%rd1, [%rd17+8];
	// begin inline asm
	call (%f967), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f968), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f969), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%r9), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p2, %r9, 0;
	@%p2 bra 	$L__BB0_20;

	// begin inline asm
	call (%r10), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f358), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p3, %r10, 0;
	@%p3 bra 	$L__BB0_19;

	mov.u32 	%r320, 0;

$L__BB0_3:
	.pragma "nounroll";
	// begin inline asm
	call (%rd18), _optix_get_transform_list_handle, (%r320);
	// end inline asm
	// begin inline asm
	call (%r13), _optix_get_transform_type_from_handle, (%rd18);
	// end inline asm
	or.b32  	%r14, %r13, 1;
	setp.eq.s32 	%p4, %r14, 3;
	@%p4 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_4;

$L__BB0_9:
	setp.eq.s32 	%p7, %r13, 2;
	@%p7 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_10;

$L__BB0_13:
	// begin inline asm
	call (%rd90), _optix_get_matrix_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd92, %rd90;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r102,%r103,%r104,%r105}, [%rd92];
	// end inline asm
	add.s64 	%rd96, %rd90, 16;
	// begin inline asm
	cvta.to.global.u64 %rd95, %rd96;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r106,%r107,%r108,%r109}, [%rd95];
	// end inline asm
	add.s64 	%rd99, %rd90, 32;
	// begin inline asm
	cvta.to.global.u64 %rd98, %rd99;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r110,%r111,%r112,%r113}, [%rd98];
	// end inline asm
	add.s64 	%rd102, %rd90, 48;
	// begin inline asm
	cvta.to.global.u64 %rd101, %rd102;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r114,%r115,%r116,%r117}, [%rd101];
	// end inline asm
	add.s64 	%rd105, %rd90, 64;
	// begin inline asm
	cvta.to.global.u64 %rd104, %rd105;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd104];
	// end inline asm
	add.s64 	%rd108, %rd90, 80;
	// begin inline asm
	cvta.to.global.u64 %rd107, %rd108;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd107];
	// end inline asm
	add.s64 	%rd111, %rd90, 96;
	// begin inline asm
	cvta.to.global.u64 %rd110, %rd111;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd110];
	// end inline asm
	add.s64 	%rd114, %rd90, 112;
	// begin inline asm
	cvta.to.global.u64 %rd113, %rd114;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd113];
	// end inline asm
	mov.b32 	%f489, %r105;
	mov.b32 	%f490, %r106;
	and.b32  	%r146, %r104, 65535;
	add.s32 	%r147, %r146, -1;
	cvt.rn.f32.s32 	%f491, %r147;
	sub.f32 	%f492, %f358, %f489;
	sub.f32 	%f493, %f490, %f489;
	div.approx.f32 	%f494, %f492, %f493;
	mul.f32 	%f495, %f494, %f491;
	min.f32 	%f496, %f491, %f495;
	mov.f32 	%f497, 0f00000000;
	max.f32 	%f498, %f497, %f496;
	setp.num.f32 	%p10, %f498, %f498;
	selp.f32 	%f499, %f498, 0f00000000, %p10;
	cvt.rmi.f32.f32 	%f500, %f499;
	add.f32 	%f501, %f491, 0fBF800000;
	min.f32 	%f502, %f500, %f501;
	sub.f32 	%f90, %f499, %f502;
	cvt.rzi.s32.f32 	%r148, %f502;
	cvt.s64.s32 	%rd8, %r148;
	mul.wide.s32 	%rd125, %r148, 48;
	add.s64 	%rd117, %rd99, %rd125;
	// begin inline asm
	cvta.to.global.u64 %rd116, %rd117;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd116];
	// end inline asm
	mov.b32 	%f922, %r134;
	mov.b32 	%f921, %r135;
	mov.b32 	%f920, %r136;
	mov.b32 	%f919, %r137;
	add.s64 	%rd120, %rd117, 16;
	// begin inline asm
	cvta.to.global.u64 %rd119, %rd120;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd119];
	// end inline asm
	mov.b32 	%f926, %r138;
	mov.b32 	%f925, %r139;
	mov.b32 	%f924, %r140;
	mov.b32 	%f923, %r141;
	add.s64 	%rd123, %rd117, 32;
	// begin inline asm
	cvta.to.global.u64 %rd122, %rd123;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd122];
	// end inline asm
	mov.b32 	%f930, %r142;
	mov.b32 	%f929, %r143;
	mov.b32 	%f928, %r144;
	mov.b32 	%f927, %r145;
	setp.leu.f32 	%p11, %f90, 0f00000000;
	@%p11 bra 	$L__BB0_15;

	mov.f32 	%f503, 0f3F800000;
	sub.f32 	%f504, %f503, %f90;
	mul.lo.s64 	%rd135, %rd8, 48;
	add.s64 	%rd136, %rd90, %rd135;
	add.s64 	%rd127, %rd136, 80;
	// begin inline asm
	cvta.to.global.u64 %rd126, %rd127;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r149,%r150,%r151,%r152}, [%rd126];
	// end inline asm
	mov.b32 	%f505, %r149;
	mov.b32 	%f506, %r150;
	mov.b32 	%f507, %r151;
	mov.b32 	%f508, %r152;
	mul.f32 	%f509, %f90, %f505;
	mul.f32 	%f510, %f90, %f506;
	mul.f32 	%f511, %f90, %f507;
	mul.f32 	%f512, %f90, %f508;
	fma.rn.f32 	%f922, %f504, %f922, %f509;
	fma.rn.f32 	%f921, %f504, %f921, %f510;
	fma.rn.f32 	%f920, %f504, %f920, %f511;
	fma.rn.f32 	%f919, %f504, %f919, %f512;
	add.s64 	%rd130, %rd136, 96;
	// begin inline asm
	cvta.to.global.u64 %rd129, %rd130;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r153,%r154,%r155,%r156}, [%rd129];
	// end inline asm
	mov.b32 	%f513, %r153;
	mov.b32 	%f514, %r154;
	mov.b32 	%f515, %r155;
	mov.b32 	%f516, %r156;
	mul.f32 	%f517, %f90, %f513;
	mul.f32 	%f518, %f90, %f514;
	mul.f32 	%f519, %f90, %f515;
	mul.f32 	%f520, %f90, %f516;
	fma.rn.f32 	%f926, %f504, %f926, %f517;
	fma.rn.f32 	%f925, %f504, %f925, %f518;
	fma.rn.f32 	%f924, %f504, %f924, %f519;
	fma.rn.f32 	%f923, %f504, %f923, %f520;
	add.s64 	%rd133, %rd136, 112;
	// begin inline asm
	cvta.to.global.u64 %rd132, %rd133;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r157,%r158,%r159,%r160}, [%rd132];
	// end inline asm
	mov.b32 	%f521, %r157;
	mov.b32 	%f522, %r158;
	mov.b32 	%f523, %r159;
	mov.b32 	%f524, %r160;
	mul.f32 	%f525, %f90, %f521;
	mul.f32 	%f526, %f90, %f522;
	mul.f32 	%f527, %f90, %f523;
	mul.f32 	%f528, %f90, %f524;
	fma.rn.f32 	%f930, %f504, %f930, %f525;
	fma.rn.f32 	%f929, %f504, %f929, %f526;
	fma.rn.f32 	%f928, %f504, %f928, %f527;
	fma.rn.f32 	%f927, %f504, %f927, %f528;
	bra.uni 	$L__BB0_15;

$L__BB0_4:
	mov.f32 	%f931, 0f00000000;
	mov.f32 	%f934, 0f3F800000;
	setp.eq.s32 	%p5, %r13, 4;
	@%p5 bra 	$L__BB0_7;

	setp.ne.s32 	%p6, %r13, 1;
	mov.f32 	%f932, %f931;
	mov.f32 	%f933, %f931;
	mov.f32 	%f935, %f931;
	mov.f32 	%f936, %f931;
	mov.f32 	%f937, %f934;
	mov.f32 	%f938, %f931;
	mov.f32 	%f939, %f931;
	mov.f32 	%f940, %f934;
	mov.f32 	%f941, %f931;
	mov.f32 	%f942, %f931;
	@%p6 bra 	$L__BB0_16;

	// begin inline asm
	call (%rd20), _optix_get_static_transform_from_handle, (%rd18);
	// end inline asm
	add.s64 	%rd256, %rd20, 64;
	bra.uni 	$L__BB0_8;

$L__BB0_10:
	// begin inline asm
	call (%rd33), _optix_get_srt_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd35, %rd33;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r27,%r28,%r29,%r30}, [%rd35];
	// end inline asm
	add.s64 	%rd39, %rd33, 16;
	// begin inline asm
	cvta.to.global.u64 %rd38, %rd39;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r31,%r32,%r33,%r34}, [%rd38];
	// end inline asm
	add.s64 	%rd42, %rd33, 32;
	// begin inline asm
	cvta.to.global.u64 %rd41, %rd42;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r35,%r36,%r37,%r38}, [%rd41];
	// end inline asm
	add.s64 	%rd45, %rd33, 48;
	// begin inline asm
	cvta.to.global.u64 %rd44, %rd45;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r39,%r40,%r41,%r42}, [%rd44];
	// end inline asm
	add.s64 	%rd48, %rd33, 64;
	// begin inline asm
	cvta.to.global.u64 %rd47, %rd48;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r43,%r44,%r45,%r46}, [%rd47];
	// end inline asm
	add.s64 	%rd51, %rd33, 80;
	// begin inline asm
	cvta.to.global.u64 %rd50, %rd51;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd50];
	// end inline asm
	add.s64 	%rd54, %rd33, 96;
	// begin inline asm
	cvta.to.global.u64 %rd53, %rd54;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd53];
	// end inline asm
	add.s64 	%rd57, %rd33, 112;
	// begin inline asm
	cvta.to.global.u64 %rd56, %rd57;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd56];
	// end inline asm
	add.s64 	%rd60, %rd33, 128;
	// begin inline asm
	cvta.to.global.u64 %rd59, %rd60;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd59];
	// end inline asm
	add.s64 	%rd63, %rd33, 144;
	// begin inline asm
	cvta.to.global.u64 %rd62, %rd63;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd62];
	// end inline asm
	mov.b32 	%f373, %r30;
	mov.b32 	%f374, %r31;
	and.b32  	%r83, %r29, 65535;
	add.s32 	%r84, %r83, -1;
	cvt.rn.f32.s32 	%f375, %r84;
	sub.f32 	%f376, %f358, %f373;
	sub.f32 	%f377, %f374, %f373;
	div.approx.f32 	%f378, %f376, %f377;
	mul.f32 	%f379, %f378, %f375;
	min.f32 	%f380, %f375, %f379;
	mov.f32 	%f381, 0f00000000;
	max.f32 	%f382, %f381, %f380;
	setp.num.f32 	%p8, %f382, %f382;
	selp.f32 	%f383, %f382, 0f00000000, %p8;
	cvt.rmi.f32.f32 	%f384, %f383;
	add.f32 	%f385, %f375, 0fBF800000;
	min.f32 	%f386, %f384, %f385;
	sub.f32 	%f29, %f383, %f386;
	cvt.rzi.s32.f32 	%r85, %f386;
	mul.wide.s32 	%rd77, %r85, 64;
	add.s64 	%rd66, %rd42, %rd77;
	// begin inline asm
	cvta.to.global.u64 %rd65, %rd66;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd65];
	// end inline asm
	mov.b32 	%f903, %r67;
	mov.b32 	%f904, %r68;
	mov.b32 	%f905, %r69;
	mov.b32 	%f906, %r70;
	add.s64 	%rd69, %rd66, 16;
	// begin inline asm
	cvta.to.global.u64 %rd68, %rd69;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd68];
	// end inline asm
	mov.b32 	%f907, %r71;
	mov.b32 	%f908, %r72;
	mov.b32 	%f909, %r73;
	mov.b32 	%f910, %r74;
	add.s64 	%rd72, %rd66, 32;
	// begin inline asm
	cvta.to.global.u64 %rd71, %rd72;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd71];
	// end inline asm
	mov.b32 	%f911, %r75;
	mov.b32 	%f912, %r76;
	mov.b32 	%f913, %r77;
	mov.b32 	%f914, %r78;
	add.s64 	%rd75, %rd66, 48;
	// begin inline asm
	cvta.to.global.u64 %rd74, %rd75;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd74];
	// end inline asm
	mov.b32 	%f915, %r79;
	mov.b32 	%f916, %r80;
	mov.b32 	%f917, %r81;
	mov.b32 	%f918, %r82;
	setp.leu.f32 	%p9, %f29, 0f00000000;
	@%p9 bra 	$L__BB0_12;

	mov.f32 	%f387, 0f3F800000;
	sub.f32 	%f388, %f387, %f29;
	add.s64 	%rd79, %rd66, 64;
	// begin inline asm
	cvta.to.global.u64 %rd78, %rd79;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r86,%r87,%r88,%r89}, [%rd78];
	// end inline asm
	mov.b32 	%f389, %r86;
	mov.b32 	%f390, %r87;
	mov.b32 	%f391, %r88;
	mov.b32 	%f392, %r89;
	mul.f32 	%f393, %f29, %f389;
	mul.f32 	%f394, %f29, %f390;
	mul.f32 	%f395, %f29, %f391;
	mul.f32 	%f396, %f29, %f392;
	fma.rn.f32 	%f903, %f388, %f903, %f393;
	fma.rn.f32 	%f904, %f388, %f904, %f394;
	fma.rn.f32 	%f905, %f388, %f905, %f395;
	fma.rn.f32 	%f906, %f388, %f906, %f396;
	add.s64 	%rd82, %rd66, 80;
	// begin inline asm
	cvta.to.global.u64 %rd81, %rd82;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r90,%r91,%r92,%r93}, [%rd81];
	// end inline asm
	mov.b32 	%f397, %r90;
	mov.b32 	%f398, %r91;
	mov.b32 	%f399, %r92;
	mov.b32 	%f400, %r93;
	mul.f32 	%f401, %f29, %f397;
	mul.f32 	%f402, %f29, %f398;
	mul.f32 	%f403, %f29, %f399;
	mul.f32 	%f404, %f29, %f400;
	fma.rn.f32 	%f907, %f388, %f907, %f401;
	fma.rn.f32 	%f908, %f388, %f908, %f402;
	fma.rn.f32 	%f909, %f388, %f909, %f403;
	fma.rn.f32 	%f910, %f388, %f910, %f404;
	add.s64 	%rd85, %rd66, 96;
	// begin inline asm
	cvta.to.global.u64 %rd84, %rd85;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r94,%r95,%r96,%r97}, [%rd84];
	// end inline asm
	mov.b32 	%f405, %r94;
	mov.b32 	%f406, %r95;
	mov.b32 	%f407, %r96;
	mov.b32 	%f408, %r97;
	mul.f32 	%f409, %f29, %f405;
	mul.f32 	%f410, %f29, %f406;
	mul.f32 	%f411, %f29, %f407;
	mul.f32 	%f412, %f29, %f408;
	fma.rn.f32 	%f911, %f388, %f911, %f409;
	fma.rn.f32 	%f413, %f388, %f912, %f410;
	fma.rn.f32 	%f414, %f388, %f913, %f411;
	fma.rn.f32 	%f415, %f388, %f914, %f412;
	add.s64 	%rd88, %rd66, 112;
	// begin inline asm
	cvta.to.global.u64 %rd87, %rd88;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r98,%r99,%r100,%r101}, [%rd87];
	// end inline asm
	mov.b32 	%f416, %r98;
	mov.b32 	%f417, %r99;
	mov.b32 	%f418, %r100;
	mov.b32 	%f419, %r101;
	mul.f32 	%f420, %f29, %f416;
	mul.f32 	%f421, %f29, %f417;
	mul.f32 	%f422, %f29, %f418;
	mul.f32 	%f423, %f29, %f419;
	fma.rn.f32 	%f424, %f388, %f915, %f420;
	fma.rn.f32 	%f916, %f388, %f916, %f421;
	fma.rn.f32 	%f917, %f388, %f917, %f422;
	fma.rn.f32 	%f918, %f388, %f918, %f423;
	mul.f32 	%f425, %f414, %f414;
	fma.rn.f32 	%f426, %f413, %f413, %f425;
	fma.rn.f32 	%f427, %f415, %f415, %f426;
	fma.rn.f32 	%f428, %f424, %f424, %f427;
	sqrt.rn.f32 	%f429, %f428;
	rcp.rn.f32 	%f430, %f429;
	mul.f32 	%f912, %f413, %f430;
	mul.f32 	%f913, %f414, %f430;
	mul.f32 	%f914, %f415, %f430;
	mul.f32 	%f915, %f430, %f424;

$L__BB0_12:
	mul.f32 	%f431, %f913, %f913;
	fma.rn.f32 	%f432, %f912, %f912, %f431;
	fma.rn.f32 	%f433, %f914, %f914, %f432;
	fma.rn.f32 	%f434, %f915, %f915, %f433;
	rcp.rn.f32 	%f435, %f434;
	mul.f32 	%f436, %f912, %f435;
	mul.f32 	%f437, %f913, %f435;
	mul.f32 	%f438, %f914, %f435;
	mul.f32 	%f439, %f915, %f435;
	mul.f32 	%f440, %f912, %f436;
	mul.f32 	%f441, %f913, %f437;
	mul.f32 	%f442, %f914, %f438;
	mul.f32 	%f443, %f912, %f437;
	mul.f32 	%f444, %f914, %f439;
	mul.f32 	%f445, %f912, %f438;
	mul.f32 	%f446, %f913, %f439;
	mul.f32 	%f447, %f913, %f438;
	mul.f32 	%f448, %f912, %f439;
	sub.f32 	%f449, %f440, %f441;
	sub.f32 	%f450, %f449, %f442;
	fma.rn.f32 	%f451, %f915, %f439, %f450;
	sub.f32 	%f452, %f443, %f444;
	add.f32 	%f453, %f452, %f452;
	add.f32 	%f454, %f445, %f446;
	add.f32 	%f455, %f454, %f454;
	add.f32 	%f456, %f443, %f444;
	add.f32 	%f457, %f456, %f456;
	sub.f32 	%f458, %f441, %f440;
	sub.f32 	%f459, %f458, %f442;
	fma.rn.f32 	%f460, %f915, %f439, %f459;
	sub.f32 	%f461, %f447, %f448;
	add.f32 	%f462, %f461, %f461;
	sub.f32 	%f463, %f445, %f446;
	add.f32 	%f464, %f463, %f463;
	add.f32 	%f465, %f447, %f448;
	add.f32 	%f466, %f465, %f465;
	neg.f32 	%f467, %f440;
	sub.f32 	%f468, %f467, %f441;
	add.f32 	%f469, %f442, %f468;
	fma.rn.f32 	%f470, %f915, %f439, %f469;
	mul.f32 	%f471, %f906, %f451;
	fma.rn.f32 	%f472, %f909, %f453, %f471;
	fma.rn.f32 	%f473, %f911, %f455, %f472;
	add.f32 	%f919, %f916, %f473;
	mul.f32 	%f474, %f909, %f460;
	fma.rn.f32 	%f475, %f906, %f457, %f474;
	fma.rn.f32 	%f476, %f911, %f462, %f475;
	add.f32 	%f923, %f917, %f476;
	mul.f32 	%f477, %f909, %f466;
	fma.rn.f32 	%f478, %f906, %f464, %f477;
	fma.rn.f32 	%f479, %f911, %f470, %f478;
	add.f32 	%f927, %f918, %f479;
	mul.f32 	%f480, %f905, %f451;
	fma.rn.f32 	%f481, %f908, %f453, %f480;
	fma.rn.f32 	%f920, %f910, %f455, %f481;
	mul.f32 	%f482, %f908, %f460;
	fma.rn.f32 	%f483, %f905, %f457, %f482;
	fma.rn.f32 	%f924, %f910, %f462, %f483;
	mul.f32 	%f484, %f908, %f466;
	fma.rn.f32 	%f485, %f905, %f464, %f484;
	fma.rn.f32 	%f928, %f910, %f470, %f485;
	mul.f32 	%f486, %f904, %f451;
	fma.rn.f32 	%f921, %f907, %f453, %f486;
	mul.f32 	%f487, %f907, %f460;
	fma.rn.f32 	%f925, %f904, %f457, %f487;
	mul.f32 	%f488, %f907, %f466;
	fma.rn.f32 	%f929, %f904, %f464, %f488;
	mul.f32 	%f922, %f903, %f451;
	mul.f32 	%f926, %f903, %f457;
	mul.f32 	%f930, %f903, %f464;

$L__BB0_15:
	mul.f32 	%f529, %f924, %f929;
	mul.f32 	%f530, %f925, %f928;
	sub.f32 	%f531, %f530, %f529;
	mul.f32 	%f532, %f922, %f531;
	mul.f32 	%f533, %f924, %f930;
	mul.f32 	%f534, %f926, %f928;
	sub.f32 	%f535, %f534, %f533;
	mul.f32 	%f536, %f921, %f535;
	sub.f32 	%f537, %f532, %f536;
	mul.f32 	%f538, %f925, %f930;
	mul.f32 	%f539, %f926, %f929;
	sub.f32 	%f540, %f539, %f538;
	fma.rn.f32 	%f541, %f920, %f540, %f537;
	rcp.rn.f32 	%f542, %f541;
	mul.f32 	%f934, %f531, %f542;
	mul.f32 	%f543, %f921, %f928;
	mul.f32 	%f544, %f920, %f929;
	sub.f32 	%f545, %f544, %f543;
	mul.f32 	%f933, %f545, %f542;
	mul.f32 	%f546, %f920, %f925;
	mul.f32 	%f547, %f921, %f924;
	sub.f32 	%f548, %f547, %f546;
	mul.f32 	%f932, %f548, %f542;
	sub.f32 	%f549, %f533, %f534;
	mul.f32 	%f938, %f549, %f542;
	mul.f32 	%f550, %f920, %f930;
	mul.f32 	%f551, %f922, %f928;
	sub.f32 	%f552, %f551, %f550;
	mul.f32 	%f937, %f552, %f542;
	mul.f32 	%f553, %f922, %f924;
	mul.f32 	%f554, %f920, %f926;
	sub.f32 	%f555, %f554, %f553;
	mul.f32 	%f936, %f555, %f542;
	mul.f32 	%f942, %f540, %f542;
	mul.f32 	%f556, %f922, %f929;
	mul.f32 	%f557, %f921, %f930;
	sub.f32 	%f558, %f557, %f556;
	mul.f32 	%f941, %f558, %f542;
	mul.f32 	%f559, %f921, %f926;
	mul.f32 	%f560, %f922, %f925;
	sub.f32 	%f561, %f560, %f559;
	mul.f32 	%f940, %f561, %f542;
	mul.f32 	%f562, %f919, %f934;
	neg.f32 	%f563, %f562;
	mul.f32 	%f564, %f923, %f933;
	sub.f32 	%f565, %f563, %f564;
	mul.f32 	%f566, %f927, %f932;
	sub.f32 	%f931, %f565, %f566;
	mul.f32 	%f567, %f919, %f938;
	neg.f32 	%f568, %f567;
	mul.f32 	%f569, %f923, %f937;
	sub.f32 	%f570, %f568, %f569;
	mul.f32 	%f571, %f927, %f936;
	sub.f32 	%f935, %f570, %f571;
	mul.f32 	%f572, %f919, %f942;
	neg.f32 	%f573, %f572;
	mul.f32 	%f574, %f923, %f941;
	sub.f32 	%f575, %f573, %f574;
	mul.f32 	%f576, %f927, %f940;
	sub.f32 	%f939, %f575, %f576;
	bra.uni 	$L__BB0_16;

$L__BB0_7:
	// begin inline asm
	call (%rd256), _optix_get_instance_inverse_transform_from_handle, (%rd18);
	// end inline asm

$L__BB0_8:
	// begin inline asm
	cvta.to.global.u64 %rd24, %rd256;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r15,%r16,%r17,%r18}, [%rd24];
	// end inline asm
	mov.b32 	%f934, %r15;
	mov.b32 	%f933, %r16;
	mov.b32 	%f932, %r17;
	mov.b32 	%f931, %r18;
	add.s64 	%rd28, %rd256, 16;
	// begin inline asm
	cvta.to.global.u64 %rd27, %rd28;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r19,%r20,%r21,%r22}, [%rd27];
	// end inline asm
	mov.b32 	%f938, %r19;
	mov.b32 	%f937, %r20;
	mov.b32 	%f936, %r21;
	mov.b32 	%f935, %r22;
	add.s64 	%rd31, %rd256, 32;
	// begin inline asm
	cvta.to.global.u64 %rd30, %rd31;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r23,%r24,%r25,%r26}, [%rd30];
	// end inline asm
	mov.b32 	%f942, %r23;
	mov.b32 	%f941, %r24;
	mov.b32 	%f940, %r25;
	mov.b32 	%f939, %r26;

$L__BB0_16:
	setp.eq.s32 	%p12, %r320, 0;
	@%p12 bra 	$L__BB0_18;

	mul.f32 	%f577, %f899, %f934;
	fma.rn.f32 	%f578, %f895, %f933, %f577;
	fma.rn.f32 	%f151, %f891, %f932, %f578;
	mul.f32 	%f579, %f900, %f934;
	fma.rn.f32 	%f580, %f896, %f933, %f579;
	fma.rn.f32 	%f152, %f892, %f932, %f580;
	mul.f32 	%f581, %f901, %f934;
	fma.rn.f32 	%f582, %f897, %f933, %f581;
	fma.rn.f32 	%f153, %f893, %f932, %f582;
	mul.f32 	%f583, %f902, %f934;
	fma.rn.f32 	%f584, %f898, %f933, %f583;
	fma.rn.f32 	%f585, %f894, %f932, %f584;
	add.f32 	%f931, %f931, %f585;
	mul.f32 	%f586, %f899, %f938;
	fma.rn.f32 	%f587, %f895, %f937, %f586;
	fma.rn.f32 	%f155, %f891, %f936, %f587;
	mul.f32 	%f588, %f900, %f938;
	fma.rn.f32 	%f589, %f896, %f937, %f588;
	fma.rn.f32 	%f156, %f892, %f936, %f589;
	mul.f32 	%f590, %f901, %f938;
	fma.rn.f32 	%f591, %f897, %f937, %f590;
	fma.rn.f32 	%f157, %f893, %f936, %f591;
	mul.f32 	%f592, %f902, %f938;
	fma.rn.f32 	%f593, %f898, %f937, %f592;
	fma.rn.f32 	%f594, %f894, %f936, %f593;
	add.f32 	%f935, %f935, %f594;
	mul.f32 	%f595, %f899, %f942;
	fma.rn.f32 	%f596, %f895, %f941, %f595;
	fma.rn.f32 	%f159, %f891, %f940, %f596;
	mul.f32 	%f597, %f900, %f942;
	fma.rn.f32 	%f598, %f896, %f941, %f597;
	fma.rn.f32 	%f160, %f892, %f940, %f598;
	mul.f32 	%f599, %f901, %f942;
	fma.rn.f32 	%f600, %f897, %f941, %f599;
	fma.rn.f32 	%f161, %f893, %f940, %f600;
	mul.f32 	%f601, %f902, %f942;
	fma.rn.f32 	%f602, %f898, %f941, %f601;
	fma.rn.f32 	%f603, %f894, %f940, %f602;
	add.f32 	%f939, %f939, %f603;
	mov.f32 	%f932, %f153;
	mov.f32 	%f933, %f152;
	mov.f32 	%f934, %f151;
	mov.f32 	%f936, %f157;
	mov.f32 	%f937, %f156;
	mov.f32 	%f938, %f155;
	mov.f32 	%f940, %f161;
	mov.f32 	%f941, %f160;
	mov.f32 	%f942, %f159;

$L__BB0_18:
	add.s32 	%r320, %r320, 1;
	setp.lt.u32 	%p13, %r320, %r10;
	mov.f32 	%f891, %f942;
	mov.f32 	%f892, %f941;
	mov.f32 	%f893, %f940;
	mov.f32 	%f894, %f939;
	mov.f32 	%f895, %f938;
	mov.f32 	%f896, %f937;
	mov.f32 	%f897, %f936;
	mov.f32 	%f898, %f935;
	mov.f32 	%f899, %f934;
	mov.f32 	%f900, %f933;
	mov.f32 	%f901, %f932;
	mov.f32 	%f902, %f931;
	@%p13 bra 	$L__BB0_3;

$L__BB0_19:
	mul.f32 	%f604, %f967, %f934;
	fma.rn.f32 	%f605, %f968, %f933, %f604;
	fma.rn.f32 	%f606, %f969, %f932, %f605;
	mul.f32 	%f607, %f967, %f938;
	fma.rn.f32 	%f608, %f968, %f937, %f607;
	fma.rn.f32 	%f609, %f969, %f936, %f608;
	mul.f32 	%f610, %f967, %f942;
	fma.rn.f32 	%f611, %f968, %f941, %f610;
	fma.rn.f32 	%f612, %f969, %f940, %f611;
	add.f32 	%f969, %f939, %f612;
	add.f32 	%f968, %f935, %f609;
	add.f32 	%f967, %f931, %f606;

$L__BB0_20:
	// begin inline asm
	call (%f1025), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f1026), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f615), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%r161), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p14, %r161, 0;
	@%p14 bra 	$L__BB0_40;

	// begin inline asm
	call (%r162), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f616), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p15, %r162, 0;
	@%p15 bra 	$L__BB0_39;

	mov.u32 	%r321, 0;

$L__BB0_23:
	.pragma "nounroll";
	// begin inline asm
	call (%rd137), _optix_get_transform_list_handle, (%r321);
	// end inline asm
	// begin inline asm
	call (%r165), _optix_get_transform_type_from_handle, (%rd137);
	// end inline asm
	or.b32  	%r166, %r165, 1;
	setp.eq.s32 	%p16, %r166, 3;
	@%p16 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_24;

$L__BB0_29:
	setp.eq.s32 	%p19, %r165, 2;
	@%p19 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_30;

$L__BB0_33:
	// begin inline asm
	call (%rd209), _optix_get_matrix_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd211, %rd209;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r254,%r255,%r256,%r257}, [%rd211];
	// end inline asm
	add.s64 	%rd215, %rd209, 16;
	// begin inline asm
	cvta.to.global.u64 %rd214, %rd215;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r258,%r259,%r260,%r261}, [%rd214];
	// end inline asm
	add.s64 	%rd218, %rd209, 32;
	// begin inline asm
	cvta.to.global.u64 %rd217, %rd218;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r262,%r263,%r264,%r265}, [%rd217];
	// end inline asm
	add.s64 	%rd221, %rd209, 48;
	// begin inline asm
	cvta.to.global.u64 %rd220, %rd221;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r266,%r267,%r268,%r269}, [%rd220];
	// end inline asm
	add.s64 	%rd224, %rd209, 64;
	// begin inline asm
	cvta.to.global.u64 %rd223, %rd224;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r270,%r271,%r272,%r273}, [%rd223];
	// end inline asm
	add.s64 	%rd227, %rd209, 80;
	// begin inline asm
	cvta.to.global.u64 %rd226, %rd227;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r274,%r275,%r276,%r277}, [%rd226];
	// end inline asm
	add.s64 	%rd230, %rd209, 96;
	// begin inline asm
	cvta.to.global.u64 %rd229, %rd230;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r278,%r279,%r280,%r281}, [%rd229];
	// end inline asm
	add.s64 	%rd233, %rd209, 112;
	// begin inline asm
	cvta.to.global.u64 %rd232, %rd233;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r282,%r283,%r284,%r285}, [%rd232];
	// end inline asm
	mov.b32 	%f723, %r257;
	mov.b32 	%f724, %r258;
	and.b32  	%r298, %r256, 65535;
	add.s32 	%r299, %r298, -1;
	cvt.rn.f32.s32 	%f725, %r299;
	sub.f32 	%f726, %f616, %f723;
	sub.f32 	%f727, %f724, %f723;
	div.approx.f32 	%f728, %f726, %f727;
	mul.f32 	%f729, %f728, %f725;
	min.f32 	%f730, %f725, %f729;
	mov.f32 	%f731, 0f00000000;
	max.f32 	%f732, %f731, %f730;
	setp.num.f32 	%p22, %f732, %f732;
	selp.f32 	%f733, %f732, 0f00000000, %p22;
	cvt.rmi.f32.f32 	%f734, %f733;
	add.f32 	%f735, %f725, 0fBF800000;
	min.f32 	%f736, %f734, %f735;
	sub.f32 	%f258, %f733, %f736;
	cvt.rzi.s32.f32 	%r300, %f736;
	cvt.s64.s32 	%rd15, %r300;
	mul.wide.s32 	%rd244, %r300, 48;
	add.s64 	%rd236, %rd218, %rd244;
	// begin inline asm
	cvta.to.global.u64 %rd235, %rd236;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r286,%r287,%r288,%r289}, [%rd235];
	// end inline asm
	mov.b32 	%f995, %r286;
	mov.b32 	%f996, %r287;
	mov.b32 	%f997, %r288;
	add.s64 	%rd239, %rd236, 16;
	// begin inline asm
	cvta.to.global.u64 %rd238, %rd239;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r290,%r291,%r292,%r293}, [%rd238];
	// end inline asm
	mov.b32 	%f992, %r290;
	mov.b32 	%f993, %r291;
	mov.b32 	%f994, %r292;
	add.s64 	%rd242, %rd236, 32;
	// begin inline asm
	cvta.to.global.u64 %rd241, %rd242;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r294,%r295,%r296,%r297}, [%rd241];
	// end inline asm
	mov.b32 	%f989, %r294;
	mov.b32 	%f990, %r295;
	mov.b32 	%f991, %r296;
	setp.leu.f32 	%p23, %f258, 0f00000000;
	@%p23 bra 	$L__BB0_35;

	mov.f32 	%f737, 0f3F800000;
	sub.f32 	%f738, %f737, %f258;
	mul.lo.s64 	%rd254, %rd15, 48;
	add.s64 	%rd255, %rd209, %rd254;
	add.s64 	%rd246, %rd255, 80;
	// begin inline asm
	cvta.to.global.u64 %rd245, %rd246;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r301,%r302,%r303,%r304}, [%rd245];
	// end inline asm
	mov.b32 	%f739, %r301;
	mov.b32 	%f740, %r302;
	mov.b32 	%f741, %r303;
	mul.f32 	%f742, %f258, %f739;
	mul.f32 	%f743, %f258, %f740;
	mul.f32 	%f744, %f258, %f741;
	fma.rn.f32 	%f995, %f738, %f995, %f742;
	fma.rn.f32 	%f996, %f738, %f996, %f743;
	fma.rn.f32 	%f997, %f738, %f997, %f744;
	add.s64 	%rd249, %rd255, 96;
	// begin inline asm
	cvta.to.global.u64 %rd248, %rd249;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r305,%r306,%r307,%r308}, [%rd248];
	// end inline asm
	mov.b32 	%f745, %r305;
	mov.b32 	%f746, %r306;
	mov.b32 	%f747, %r307;
	mul.f32 	%f748, %f258, %f745;
	mul.f32 	%f749, %f258, %f746;
	mul.f32 	%f750, %f258, %f747;
	fma.rn.f32 	%f992, %f738, %f992, %f748;
	fma.rn.f32 	%f993, %f738, %f993, %f749;
	fma.rn.f32 	%f994, %f738, %f994, %f750;
	add.s64 	%rd252, %rd255, 112;
	// begin inline asm
	cvta.to.global.u64 %rd251, %rd252;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r309,%r310,%r311,%r312}, [%rd251];
	// end inline asm
	mov.b32 	%f751, %r309;
	mov.b32 	%f752, %r310;
	mov.b32 	%f753, %r311;
	mul.f32 	%f754, %f258, %f751;
	mul.f32 	%f755, %f258, %f752;
	mul.f32 	%f756, %f258, %f753;
	fma.rn.f32 	%f989, %f738, %f989, %f754;
	fma.rn.f32 	%f990, %f738, %f990, %f755;
	fma.rn.f32 	%f991, %f738, %f991, %f756;
	bra.uni 	$L__BB0_35;

$L__BB0_24:
	mov.f32 	%f998, 0f00000000;
	mov.f32 	%f1000, 0f3F800000;
	setp.eq.s32 	%p17, %r165, 4;
	@%p17 bra 	$L__BB0_27;

	setp.ne.s32 	%p18, %r165, 1;
	mov.f32 	%f999, %f998;
	mov.f32 	%f1001, %f998;
	mov.f32 	%f1002, %f1000;
	mov.f32 	%f1003, %f998;
	mov.f32 	%f1004, %f1000;
	mov.f32 	%f1005, %f998;
	mov.f32 	%f1006, %f998;
	@%p18 bra 	$L__BB0_36;

	// begin inline asm
	call (%rd139), _optix_get_static_transform_from_handle, (%rd137);
	// end inline asm
	add.s64 	%rd257, %rd139, 64;
	bra.uni 	$L__BB0_28;

$L__BB0_30:
	// begin inline asm
	call (%rd152), _optix_get_srt_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd154, %rd152;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r179,%r180,%r181,%r182}, [%rd154];
	// end inline asm
	add.s64 	%rd158, %rd152, 16;
	// begin inline asm
	cvta.to.global.u64 %rd157, %rd158;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r183,%r184,%r185,%r186}, [%rd157];
	// end inline asm
	add.s64 	%rd161, %rd152, 32;
	// begin inline asm
	cvta.to.global.u64 %rd160, %rd161;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r187,%r188,%r189,%r190}, [%rd160];
	// end inline asm
	add.s64 	%rd164, %rd152, 48;
	// begin inline asm
	cvta.to.global.u64 %rd163, %rd164;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r191,%r192,%r193,%r194}, [%rd163];
	// end inline asm
	add.s64 	%rd167, %rd152, 64;
	// begin inline asm
	cvta.to.global.u64 %rd166, %rd167;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r195,%r196,%r197,%r198}, [%rd166];
	// end inline asm
	add.s64 	%rd170, %rd152, 80;
	// begin inline asm
	cvta.to.global.u64 %rd169, %rd170;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r199,%r200,%r201,%r202}, [%rd169];
	// end inline asm
	add.s64 	%rd173, %rd152, 96;
	// begin inline asm
	cvta.to.global.u64 %rd172, %rd173;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r203,%r204,%r205,%r206}, [%rd172];
	// end inline asm
	add.s64 	%rd176, %rd152, 112;
	// begin inline asm
	cvta.to.global.u64 %rd175, %rd176;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r207,%r208,%r209,%r210}, [%rd175];
	// end inline asm
	add.s64 	%rd179, %rd152, 128;
	// begin inline asm
	cvta.to.global.u64 %rd178, %rd179;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r211,%r212,%r213,%r214}, [%rd178];
	// end inline asm
	add.s64 	%rd182, %rd152, 144;
	// begin inline asm
	cvta.to.global.u64 %rd181, %rd182;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r215,%r216,%r217,%r218}, [%rd181];
	// end inline asm
	mov.b32 	%f628, %r182;
	mov.b32 	%f629, %r183;
	and.b32  	%r235, %r181, 65535;
	add.s32 	%r236, %r235, -1;
	cvt.rn.f32.s32 	%f630, %r236;
	sub.f32 	%f631, %f616, %f628;
	sub.f32 	%f632, %f629, %f628;
	div.approx.f32 	%f633, %f631, %f632;
	mul.f32 	%f634, %f633, %f630;
	min.f32 	%f635, %f630, %f634;
	mov.f32 	%f636, 0f00000000;
	max.f32 	%f637, %f636, %f635;
	setp.num.f32 	%p20, %f637, %f637;
	selp.f32 	%f638, %f637, 0f00000000, %p20;
	cvt.rmi.f32.f32 	%f639, %f638;
	add.f32 	%f640, %f630, 0fBF800000;
	min.f32 	%f641, %f639, %f640;
	sub.f32 	%f218, %f638, %f641;
	cvt.rzi.s32.f32 	%r237, %f641;
	mul.wide.s32 	%rd196, %r237, 64;
	add.s64 	%rd185, %rd161, %rd196;
	// begin inline asm
	cvta.to.global.u64 %rd184, %rd185;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r219,%r220,%r221,%r222}, [%rd184];
	// end inline asm
	mov.b32 	%f979, %r219;
	mov.b32 	%f980, %r220;
	mov.b32 	%f981, %r221;
	add.s64 	%rd188, %rd185, 16;
	// begin inline asm
	cvta.to.global.u64 %rd187, %rd188;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r223,%r224,%r225,%r226}, [%rd187];
	// end inline asm
	mov.b32 	%f982, %r223;
	mov.b32 	%f983, %r224;
	mov.b32 	%f984, %r226;
	add.s64 	%rd191, %rd185, 32;
	// begin inline asm
	cvta.to.global.u64 %rd190, %rd191;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r227,%r228,%r229,%r230}, [%rd190];
	// end inline asm
	mov.b32 	%f985, %r228;
	mov.b32 	%f986, %r229;
	mov.b32 	%f987, %r230;
	add.s64 	%rd194, %rd185, 48;
	// begin inline asm
	cvta.to.global.u64 %rd193, %rd194;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r231,%r232,%r233,%r234}, [%rd193];
	// end inline asm
	mov.b32 	%f988, %r231;
	setp.leu.f32 	%p21, %f218, 0f00000000;
	@%p21 bra 	$L__BB0_32;

	mov.f32 	%f642, 0f3F800000;
	sub.f32 	%f643, %f642, %f218;
	add.s64 	%rd198, %rd185, 64;
	// begin inline asm
	cvta.to.global.u64 %rd197, %rd198;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r238,%r239,%r240,%r241}, [%rd197];
	// end inline asm
	mov.b32 	%f644, %r238;
	mov.b32 	%f645, %r239;
	mov.b32 	%f646, %r240;
	mul.f32 	%f647, %f218, %f644;
	mul.f32 	%f648, %f218, %f645;
	mul.f32 	%f649, %f218, %f646;
	fma.rn.f32 	%f979, %f643, %f979, %f647;
	fma.rn.f32 	%f980, %f643, %f980, %f648;
	fma.rn.f32 	%f981, %f643, %f981, %f649;
	add.s64 	%rd201, %rd185, 80;
	// begin inline asm
	cvta.to.global.u64 %rd200, %rd201;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r242,%r243,%r244,%r245}, [%rd200];
	// end inline asm
	mov.b32 	%f650, %r242;
	mov.b32 	%f651, %r243;
	mov.b32 	%f652, %r245;
	mul.f32 	%f653, %f218, %f650;
	mul.f32 	%f654, %f218, %f651;
	mul.f32 	%f655, %f218, %f652;
	fma.rn.f32 	%f982, %f643, %f982, %f653;
	fma.rn.f32 	%f983, %f643, %f983, %f654;
	fma.rn.f32 	%f984, %f643, %f984, %f655;
	add.s64 	%rd204, %rd185, 96;
	// begin inline asm
	cvta.to.global.u64 %rd203, %rd204;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r246,%r247,%r248,%r249}, [%rd203];
	// end inline asm
	mov.b32 	%f656, %r247;
	mov.b32 	%f657, %r248;
	mov.b32 	%f658, %r249;
	mul.f32 	%f659, %f218, %f656;
	mul.f32 	%f660, %f218, %f657;
	mul.f32 	%f661, %f218, %f658;
	fma.rn.f32 	%f662, %f643, %f985, %f659;
	fma.rn.f32 	%f663, %f643, %f986, %f660;
	fma.rn.f32 	%f664, %f643, %f987, %f661;
	add.s64 	%rd207, %rd185, 112;
	// begin inline asm
	cvta.to.global.u64 %rd206, %rd207;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r250,%r251,%r252,%r253}, [%rd206];
	// end inline asm
	mov.b32 	%f665, %r250;
	mul.f32 	%f666, %f218, %f665;
	fma.rn.f32 	%f667, %f643, %f988, %f666;
	mul.f32 	%f668, %f663, %f663;
	fma.rn.f32 	%f669, %f662, %f662, %f668;
	fma.rn.f32 	%f670, %f664, %f664, %f669;
	fma.rn.f32 	%f671, %f667, %f667, %f670;
	sqrt.rn.f32 	%f672, %f671;
	rcp.rn.f32 	%f673, %f672;
	mul.f32 	%f985, %f662, %f673;
	mul.f32 	%f986, %f663, %f673;
	mul.f32 	%f987, %f664, %f673;
	mul.f32 	%f988, %f673, %f667;

$L__BB0_32:
	mul.f32 	%f674, %f986, %f986;
	fma.rn.f32 	%f675, %f985, %f985, %f674;
	fma.rn.f32 	%f676, %f987, %f987, %f675;
	fma.rn.f32 	%f677, %f988, %f988, %f676;
	rcp.rn.f32 	%f678, %f677;
	mul.f32 	%f679, %f985, %f678;
	mul.f32 	%f680, %f986, %f678;
	mul.f32 	%f681, %f987, %f678;
	mul.f32 	%f682, %f988, %f678;
	mul.f32 	%f683, %f985, %f679;
	mul.f32 	%f684, %f986, %f680;
	mul.f32 	%f685, %f987, %f681;
	mul.f32 	%f686, %f985, %f680;
	mul.f32 	%f687, %f987, %f682;
	mul.f32 	%f688, %f985, %f681;
	mul.f32 	%f689, %f986, %f682;
	mul.f32 	%f690, %f986, %f681;
	mul.f32 	%f691, %f985, %f682;
	sub.f32 	%f692, %f683, %f684;
	sub.f32 	%f693, %f692, %f685;
	fma.rn.f32 	%f694, %f988, %f682, %f693;
	sub.f32 	%f695, %f686, %f687;
	add.f32 	%f696, %f695, %f695;
	add.f32 	%f697, %f688, %f689;
	add.f32 	%f698, %f697, %f697;
	add.f32 	%f699, %f686, %f687;
	add.f32 	%f700, %f699, %f699;
	sub.f32 	%f701, %f684, %f683;
	sub.f32 	%f702, %f701, %f685;
	fma.rn.f32 	%f703, %f988, %f682, %f702;
	sub.f32 	%f704, %f690, %f691;
	add.f32 	%f705, %f704, %f704;
	sub.f32 	%f706, %f688, %f689;
	add.f32 	%f707, %f706, %f706;
	add.f32 	%f708, %f690, %f691;
	add.f32 	%f709, %f708, %f708;
	neg.f32 	%f710, %f683;
	sub.f32 	%f711, %f710, %f684;
	add.f32 	%f712, %f685, %f711;
	fma.rn.f32 	%f713, %f988, %f682, %f712;
	mul.f32 	%f714, %f981, %f694;
	fma.rn.f32 	%f715, %f983, %f696, %f714;
	fma.rn.f32 	%f997, %f984, %f698, %f715;
	mul.f32 	%f716, %f983, %f703;
	fma.rn.f32 	%f717, %f981, %f700, %f716;
	fma.rn.f32 	%f994, %f984, %f705, %f717;
	mul.f32 	%f718, %f983, %f709;
	fma.rn.f32 	%f719, %f981, %f707, %f718;
	fma.rn.f32 	%f991, %f984, %f713, %f719;
	mul.f32 	%f720, %f980, %f694;
	fma.rn.f32 	%f996, %f982, %f696, %f720;
	mul.f32 	%f721, %f982, %f703;
	fma.rn.f32 	%f993, %f980, %f700, %f721;
	mul.f32 	%f722, %f982, %f709;
	fma.rn.f32 	%f990, %f980, %f707, %f722;
	mul.f32 	%f995, %f979, %f694;
	mul.f32 	%f992, %f979, %f700;
	mul.f32 	%f989, %f979, %f707;

$L__BB0_35:
	mul.f32 	%f757, %f990, %f994;
	mul.f32 	%f758, %f991, %f993;
	sub.f32 	%f759, %f758, %f757;
	mul.f32 	%f760, %f995, %f759;
	mul.f32 	%f761, %f989, %f994;
	mul.f32 	%f762, %f991, %f992;
	sub.f32 	%f763, %f762, %f761;
	mul.f32 	%f764, %f763, %f996;
	sub.f32 	%f765, %f760, %f764;
	mul.f32 	%f766, %f989, %f993;
	mul.f32 	%f767, %f990, %f992;
	sub.f32 	%f768, %f767, %f766;
	fma.rn.f32 	%f769, %f768, %f997, %f765;
	rcp.rn.f32 	%f770, %f769;
	mul.f32 	%f1004, %f759, %f770;
	mul.f32 	%f771, %f991, %f996;
	mul.f32 	%f772, %f990, %f997;
	sub.f32 	%f773, %f772, %f771;
	mul.f32 	%f1005, %f773, %f770;
	mul.f32 	%f774, %f993, %f997;
	mul.f32 	%f775, %f994, %f996;
	sub.f32 	%f776, %f775, %f774;
	mul.f32 	%f1006, %f776, %f770;
	sub.f32 	%f777, %f761, %f762;
	mul.f32 	%f1001, %f777, %f770;
	mul.f32 	%f778, %f989, %f997;
	mul.f32 	%f779, %f991, %f995;
	sub.f32 	%f780, %f779, %f778;
	mul.f32 	%f1002, %f780, %f770;
	mul.f32 	%f781, %f994, %f995;
	mul.f32 	%f782, %f992, %f997;
	sub.f32 	%f783, %f782, %f781;
	mul.f32 	%f1003, %f783, %f770;
	mul.f32 	%f998, %f768, %f770;
	mul.f32 	%f784, %f990, %f995;
	mul.f32 	%f785, %f989, %f996;
	sub.f32 	%f786, %f785, %f784;
	mul.f32 	%f999, %f786, %f770;
	mul.f32 	%f787, %f992, %f996;
	mul.f32 	%f788, %f993, %f995;
	sub.f32 	%f789, %f788, %f787;
	mul.f32 	%f1000, %f789, %f770;
	bra.uni 	$L__BB0_36;

$L__BB0_27:
	// begin inline asm
	call (%rd257), _optix_get_instance_inverse_transform_from_handle, (%rd137);
	// end inline asm

$L__BB0_28:
	// begin inline asm
	cvta.to.global.u64 %rd143, %rd257;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r167,%r168,%r169,%r170}, [%rd143];
	// end inline asm
	mov.b32 	%f1004, %r167;
	mov.b32 	%f1005, %r168;
	mov.b32 	%f1006, %r169;
	add.s64 	%rd147, %rd257, 16;
	// begin inline asm
	cvta.to.global.u64 %rd146, %rd147;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r171,%r172,%r173,%r174}, [%rd146];
	// end inline asm
	mov.b32 	%f1001, %r171;
	mov.b32 	%f1002, %r172;
	mov.b32 	%f1003, %r173;
	add.s64 	%rd150, %rd257, 32;
	// begin inline asm
	cvta.to.global.u64 %rd149, %rd150;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r175,%r176,%r177,%r178}, [%rd149];
	// end inline asm
	mov.b32 	%f998, %r175;
	mov.b32 	%f999, %r176;
	mov.b32 	%f1000, %r177;

$L__BB0_36:
	setp.eq.s32 	%p24, %r321, 0;
	@%p24 bra 	$L__BB0_38;

	mul.f32 	%f790, %f975, %f1005;
	fma.rn.f32 	%f791, %f972, %f1004, %f790;
	fma.rn.f32 	%f304, %f978, %f1006, %f791;
	mul.f32 	%f792, %f974, %f1005;
	fma.rn.f32 	%f793, %f971, %f1004, %f792;
	fma.rn.f32 	%f305, %f977, %f1006, %f793;
	mul.f32 	%f794, %f973, %f1005;
	fma.rn.f32 	%f795, %f970, %f1004, %f794;
	fma.rn.f32 	%f1006, %f976, %f1006, %f795;
	mul.f32 	%f796, %f975, %f1002;
	fma.rn.f32 	%f797, %f972, %f1001, %f796;
	fma.rn.f32 	%f307, %f978, %f1003, %f797;
	mul.f32 	%f798, %f974, %f1002;
	fma.rn.f32 	%f799, %f971, %f1001, %f798;
	fma.rn.f32 	%f308, %f977, %f1003, %f799;
	mul.f32 	%f800, %f973, %f1002;
	fma.rn.f32 	%f801, %f970, %f1001, %f800;
	fma.rn.f32 	%f1003, %f976, %f1003, %f801;
	mul.f32 	%f802, %f975, %f999;
	fma.rn.f32 	%f803, %f972, %f998, %f802;
	fma.rn.f32 	%f310, %f978, %f1000, %f803;
	mul.f32 	%f804, %f974, %f999;
	fma.rn.f32 	%f805, %f971, %f998, %f804;
	fma.rn.f32 	%f311, %f977, %f1000, %f805;
	mul.f32 	%f806, %f973, %f999;
	fma.rn.f32 	%f807, %f970, %f998, %f806;
	fma.rn.f32 	%f1000, %f976, %f1000, %f807;
	mov.f32 	%f998, %f310;
	mov.f32 	%f999, %f311;
	mov.f32 	%f1001, %f307;
	mov.f32 	%f1002, %f308;
	mov.f32 	%f1004, %f304;
	mov.f32 	%f1005, %f305;

$L__BB0_38:
	add.s32 	%r321, %r321, 1;
	setp.lt.u32 	%p25, %r321, %r162;
	mov.f32 	%f970, %f1006;
	mov.f32 	%f971, %f1005;
	mov.f32 	%f972, %f1004;
	mov.f32 	%f973, %f1003;
	mov.f32 	%f974, %f1002;
	mov.f32 	%f975, %f1001;
	mov.f32 	%f976, %f1000;
	mov.f32 	%f977, %f999;
	mov.f32 	%f978, %f998;
	@%p25 bra 	$L__BB0_23;

$L__BB0_39:
	mul.f32 	%f808, %f1026, %f1005;
	fma.rn.f32 	%f809, %f1025, %f1004, %f808;
	mul.f32 	%f810, %f1026, %f1002;
	fma.rn.f32 	%f811, %f1025, %f1001, %f810;
	mul.f32 	%f812, %f1026, %f999;
	fma.rn.f32 	%f813, %f1025, %f998, %f812;
	fma.rn.f32 	%f1027, %f615, %f1000, %f813;
	fma.rn.f32 	%f1026, %f615, %f1003, %f811;
	fma.rn.f32 	%f1025, %f615, %f1006, %f809;
	bra.uni 	$L__BB0_41;

$L__BB0_40:
	mov.f32 	%f1027, %f615;

$L__BB0_41:
	// begin inline asm
	call (%f814), _optix_get_ray_tmin, ();
	// end inline asm
	// begin inline asm
	call (%f815), _optix_get_ray_tmax, ();
	// end inline asm
	sub.f32 	%f340, %f815, %f814;
	fma.rn.f32 	%f818, %f1025, %f814, %f967;
	fma.rn.f32 	%f819, %f1026, %f814, %f968;
	fma.rn.f32 	%f820, %f1027, %f814, %f969;
	add.s64 	%rd16, %rd1, 32;
	ld.v4.f32 	{%f821, %f822, %f823, %f824}, [%rd1+32];
	mul.f32 	%f829, %f821, %f818;
	fma.rn.f32 	%f830, %f822, %f819, %f829;
	fma.rn.f32 	%f831, %f823, %f820, %f830;
	mov.f32 	%f832, 0f3F800000;
	fma.rn.f32 	%f833, %f824, %f832, %f831;
	ld.v4.f32 	{%f834, %f835, %f836, %f837}, [%rd1+48];
	mul.f32 	%f842, %f834, %f818;
	fma.rn.f32 	%f843, %f835, %f819, %f842;
	fma.rn.f32 	%f844, %f836, %f820, %f843;
	fma.rn.f32 	%f845, %f837, %f832, %f844;
	ld.v4.f32 	{%f846, %f847, %f848, %f849}, [%rd1+64];
	mul.f32 	%f854, %f846, %f818;
	fma.rn.f32 	%f855, %f847, %f819, %f854;
	fma.rn.f32 	%f856, %f848, %f820, %f855;
	fma.rn.f32 	%f341, %f849, %f832, %f856;
	mul.f32 	%f857, %f821, %f1025;
	fma.rn.f32 	%f858, %f822, %f1026, %f857;
	fma.rn.f32 	%f859, %f823, %f1027, %f858;
	mov.f32 	%f860, 0f00000000;
	fma.rn.f32 	%f861, %f824, %f860, %f859;
	mul.f32 	%f862, %f834, %f1025;
	fma.rn.f32 	%f863, %f835, %f1026, %f862;
	fma.rn.f32 	%f864, %f836, %f1027, %f863;
	fma.rn.f32 	%f865, %f837, %f860, %f864;
	mul.f32 	%f866, %f846, %f1025;
	fma.rn.f32 	%f867, %f847, %f1026, %f866;
	fma.rn.f32 	%f868, %f848, %f1027, %f867;
	fma.rn.f32 	%f342, %f849, %f860, %f868;
	mul.f32 	%f869, %f865, %f865;
	fma.rn.f32 	%f343, %f861, %f861, %f869;
	mul.f32 	%f870, %f845, %f865;
	fma.rn.f32 	%f871, %f833, %f861, %f870;
	add.f32 	%f344, %f871, %f871;
	mul.f32 	%f872, %f845, %f845;
	fma.rn.f32 	%f873, %f833, %f833, %f872;
	ld.f32 	%f874, [%rd1+164];
	mul.f32 	%f875, %f874, %f874;
	sub.f32 	%f345, %f873, %f875;
	setp.eq.f32 	%p27, %f343, 0f00000000;
	setp.eq.f32 	%p28, %f344, 0f00000000;
	and.pred  	%p29, %p27, %p28;
	mov.pred 	%p57, 0;
	@%p29 bra 	$L__BB0_44;

	neg.f32 	%f876, %f345;
	div.rn.f32 	%f1028, %f876, %f344;
	mul.f32 	%f877, %f343, 0fC0800000;
	mul.f32 	%f878, %f877, %f345;
	fma.rn.f32 	%f347, %f344, %f344, %f878;
	setp.neu.f32 	%p31, %f343, 0f00000000;
	setp.lt.f32 	%p32, %f347, 0f00000000;
	and.pred  	%p33, %p32, %p31;
	mov.f32 	%f1029, %f1028;
	@%p33 bra 	$L__BB0_44;

	mov.b32 	%r313, %f344;
	and.b32  	%r314, %r313, -2147483648;
	sqrt.rn.f32 	%f879, %f347;
	mov.b32 	%r315, %f879;
	and.b32  	%r316, %r315, 2147483647;
	or.b32  	%r317, %r316, %r314;
	mov.b32 	%f880, %r317;
	add.f32 	%f881, %f344, %f880;
	mul.f32 	%f882, %f881, 0fBF000000;
	div.rn.f32 	%f883, %f882, %f343;
	div.rn.f32 	%f884, %f345, %f882;
	min.f32 	%f885, %f883, %f884;
	max.f32 	%f886, %f883, %f884;
	selp.f32 	%f348, %f1028, %f885, %p27;
	selp.f32 	%f1029, %f1028, %f886, %p27;
	mov.pred 	%p57, -1;
	mov.f32 	%f1028, %f348;

$L__BB0_44:
	fma.rn.f32 	%f352, %f342, %f1028, %f341;
	fma.rn.f32 	%f353, %f342, %f1029, %f341;
	setp.ge.f32 	%p36, %f1029, 0f00000000;
	setp.le.f32 	%p37, %f1028, %f340;
	and.pred  	%p38, %p37, %p36;
	and.pred  	%p39, %p57, %p38;
	setp.leu.f32 	%p40, %f1029, %f340;
	setp.geu.f32 	%p41, %f1028, 0f00000000;
	or.pred  	%p42, %p41, %p40;
	and.pred  	%p43, %p42, %p39;
	mov.u16 	%rs3, 0;
	not.pred 	%p44, %p43;
	mov.u16 	%rs7, %rs3;
	@%p44 bra 	$L__BB0_50;

	setp.ltu.f32 	%p45, %f352, 0f00000000;
	@%p45 bra 	$L__BB0_47;

	ld.f32 	%f887, [%rd16+128];
	setp.le.f32 	%p46, %f352, %f887;
	setp.ge.f32 	%p47, %f1028, 0f00000000;
	and.pred  	%p48, %p47, %p46;
	mov.u16 	%rs7, 1;
	@%p48 bra 	$L__BB0_50;

$L__BB0_47:
	setp.ltu.f32 	%p49, %f353, 0f00000000;
	mov.u16 	%rs7, %rs3;
	@%p49 bra 	$L__BB0_50;

	ld.f32 	%f888, [%rd16+128];
	setp.gtu.f32 	%p50, %f353, %f888;
	mov.u16 	%rs7, %rs3;
	@%p50 bra 	$L__BB0_50;

	setp.le.f32 	%p51, %f1029, %f340;
	selp.u16 	%rs7, 1, 0, %p51;

$L__BB0_50:
	setp.ltu.f32 	%p52, %f352, 0f00000000;
	@%p52 bra 	$L__BB0_52;

	ld.f32 	%f889, [%rd16+128];
	setp.le.f32 	%p53, %f352, %f889;
	setp.ge.f32 	%p54, %f1028, 0f00000000;
	and.pred  	%p55, %p54, %p53;
	@%p55 bra 	$L__BB0_53;

$L__BB0_52:
	mov.f32 	%f1028, %f1029;

$L__BB0_53:
	setp.eq.s16 	%p56, %rs7, 0;
	@%p56 bra 	$L__BB0_55;

	mov.u32 	%r319, 254;
	// begin inline asm
	call (%r318), _optix_report_intersection_0, (%f1028, %r319);
	// end inline asm

$L__BB0_55:
	ret;

}
	// .globl	__closesthit__cylinder
.visible .entry __closesthit__cylinder()
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<2>;


	// begin inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	// begin inline asm
	call (%f1), _optix_get_ray_tmax, ();
	// end inline asm
	ld.u32 	%r10, [%rd1];
	mov.b32 	%r2, %f1;
	mov.u32 	%r8, 0;
	// begin inline asm
	call _optix_set_payload, (%r8, %r2);
	// end inline asm
	mov.u32 	%r3, 1;
	// begin inline asm
	call _optix_set_payload, (%r3, %r13);
	// end inline asm
	mov.u32 	%r5, 2;
	// begin inline asm
	call _optix_set_payload, (%r5, %r14);
	// end inline asm
	mov.u32 	%r7, 3;
	// begin inline asm
	call _optix_set_payload, (%r7, %r8);
	// end inline asm
	mov.u32 	%r9, 4;
	// begin inline asm
	call _optix_set_payload, (%r9, %r10);
	// end inline asm
	mov.u32 	%r12, 5;
	// begin inline asm
	call (%r11), _optix_get_payload, (%r12);
	// end inline asm
	setp.eq.s32 	%p1, %r11, 0;
	@%p1 bra 	$L__BB1_2;

	// begin inline asm
	call (%r15), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r12, %r15);
	// end inline asm

$L__BB1_2:
	ret;

}
	// .globl	__intersection__disk
.visible .entry __intersection__disk()
{
	.reg .pred 	%p<26>;
	.reg .f32 	%f<999>;
	.reg .b32 	%r<317>;
	.reg .b64 	%rd<257>;


	// begin inline asm
	call (%rd16), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u64 	%rd1, [%rd16+8];
	// begin inline asm
	call (%f938), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f939), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f940), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%r9), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p1, %r9, 0;
	@%p1 bra 	$L__BB2_20;

	// begin inline asm
	call (%r10), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f344), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p2, %r10, 0;
	@%p2 bra 	$L__BB2_19;

	mov.u32 	%r315, 0;

$L__BB2_3:
	.pragma "nounroll";
	// begin inline asm
	call (%rd17), _optix_get_transform_list_handle, (%r315);
	// end inline asm
	// begin inline asm
	call (%r13), _optix_get_transform_type_from_handle, (%rd17);
	// end inline asm
	or.b32  	%r14, %r13, 1;
	setp.eq.s32 	%p3, %r14, 3;
	@%p3 bra 	$L__BB2_9;
	bra.uni 	$L__BB2_4;

$L__BB2_9:
	setp.eq.s32 	%p6, %r13, 2;
	@%p6 bra 	$L__BB2_13;
	bra.uni 	$L__BB2_10;

$L__BB2_13:
	// begin inline asm
	call (%rd89), _optix_get_matrix_motion_transform_from_handle, (%rd17);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd91, %rd89;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r102,%r103,%r104,%r105}, [%rd91];
	// end inline asm
	add.s64 	%rd95, %rd89, 16;
	// begin inline asm
	cvta.to.global.u64 %rd94, %rd95;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r106,%r107,%r108,%r109}, [%rd94];
	// end inline asm
	add.s64 	%rd98, %rd89, 32;
	// begin inline asm
	cvta.to.global.u64 %rd97, %rd98;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r110,%r111,%r112,%r113}, [%rd97];
	// end inline asm
	add.s64 	%rd101, %rd89, 48;
	// begin inline asm
	cvta.to.global.u64 %rd100, %rd101;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r114,%r115,%r116,%r117}, [%rd100];
	// end inline asm
	add.s64 	%rd104, %rd89, 64;
	// begin inline asm
	cvta.to.global.u64 %rd103, %rd104;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd103];
	// end inline asm
	add.s64 	%rd107, %rd89, 80;
	// begin inline asm
	cvta.to.global.u64 %rd106, %rd107;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd106];
	// end inline asm
	add.s64 	%rd110, %rd89, 96;
	// begin inline asm
	cvta.to.global.u64 %rd109, %rd110;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd109];
	// end inline asm
	add.s64 	%rd113, %rd89, 112;
	// begin inline asm
	cvta.to.global.u64 %rd112, %rd113;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd112];
	// end inline asm
	mov.b32 	%f475, %r105;
	mov.b32 	%f476, %r106;
	and.b32  	%r146, %r104, 65535;
	add.s32 	%r147, %r146, -1;
	cvt.rn.f32.s32 	%f477, %r147;
	sub.f32 	%f478, %f344, %f475;
	sub.f32 	%f479, %f476, %f475;
	div.approx.f32 	%f480, %f478, %f479;
	mul.f32 	%f481, %f480, %f477;
	min.f32 	%f482, %f477, %f481;
	mov.f32 	%f483, 0f00000000;
	max.f32 	%f484, %f483, %f482;
	setp.num.f32 	%p9, %f484, %f484;
	selp.f32 	%f485, %f484, 0f00000000, %p9;
	cvt.rmi.f32.f32 	%f486, %f485;
	add.f32 	%f487, %f477, 0fBF800000;
	min.f32 	%f488, %f486, %f487;
	sub.f32 	%f90, %f485, %f488;
	cvt.rzi.s32.f32 	%r148, %f488;
	cvt.s64.s32 	%rd8, %r148;
	mul.wide.s32 	%rd124, %r148, 48;
	add.s64 	%rd116, %rd98, %rd124;
	// begin inline asm
	cvta.to.global.u64 %rd115, %rd116;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd115];
	// end inline asm
	mov.b32 	%f893, %r134;
	mov.b32 	%f892, %r135;
	mov.b32 	%f891, %r136;
	mov.b32 	%f890, %r137;
	add.s64 	%rd119, %rd116, 16;
	// begin inline asm
	cvta.to.global.u64 %rd118, %rd119;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd118];
	// end inline asm
	mov.b32 	%f897, %r138;
	mov.b32 	%f896, %r139;
	mov.b32 	%f895, %r140;
	mov.b32 	%f894, %r141;
	add.s64 	%rd122, %rd116, 32;
	// begin inline asm
	cvta.to.global.u64 %rd121, %rd122;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd121];
	// end inline asm
	mov.b32 	%f901, %r142;
	mov.b32 	%f900, %r143;
	mov.b32 	%f899, %r144;
	mov.b32 	%f898, %r145;
	setp.leu.f32 	%p10, %f90, 0f00000000;
	@%p10 bra 	$L__BB2_15;

	mov.f32 	%f489, 0f3F800000;
	sub.f32 	%f490, %f489, %f90;
	mul.lo.s64 	%rd134, %rd8, 48;
	add.s64 	%rd135, %rd89, %rd134;
	add.s64 	%rd126, %rd135, 80;
	// begin inline asm
	cvta.to.global.u64 %rd125, %rd126;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r149,%r150,%r151,%r152}, [%rd125];
	// end inline asm
	mov.b32 	%f491, %r149;
	mov.b32 	%f492, %r150;
	mov.b32 	%f493, %r151;
	mov.b32 	%f494, %r152;
	mul.f32 	%f495, %f90, %f491;
	mul.f32 	%f496, %f90, %f492;
	mul.f32 	%f497, %f90, %f493;
	mul.f32 	%f498, %f90, %f494;
	fma.rn.f32 	%f893, %f490, %f893, %f495;
	fma.rn.f32 	%f892, %f490, %f892, %f496;
	fma.rn.f32 	%f891, %f490, %f891, %f497;
	fma.rn.f32 	%f890, %f490, %f890, %f498;
	add.s64 	%rd129, %rd135, 96;
	// begin inline asm
	cvta.to.global.u64 %rd128, %rd129;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r153,%r154,%r155,%r156}, [%rd128];
	// end inline asm
	mov.b32 	%f499, %r153;
	mov.b32 	%f500, %r154;
	mov.b32 	%f501, %r155;
	mov.b32 	%f502, %r156;
	mul.f32 	%f503, %f90, %f499;
	mul.f32 	%f504, %f90, %f500;
	mul.f32 	%f505, %f90, %f501;
	mul.f32 	%f506, %f90, %f502;
	fma.rn.f32 	%f897, %f490, %f897, %f503;
	fma.rn.f32 	%f896, %f490, %f896, %f504;
	fma.rn.f32 	%f895, %f490, %f895, %f505;
	fma.rn.f32 	%f894, %f490, %f894, %f506;
	add.s64 	%rd132, %rd135, 112;
	// begin inline asm
	cvta.to.global.u64 %rd131, %rd132;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r157,%r158,%r159,%r160}, [%rd131];
	// end inline asm
	mov.b32 	%f507, %r157;
	mov.b32 	%f508, %r158;
	mov.b32 	%f509, %r159;
	mov.b32 	%f510, %r160;
	mul.f32 	%f511, %f90, %f507;
	mul.f32 	%f512, %f90, %f508;
	mul.f32 	%f513, %f90, %f509;
	mul.f32 	%f514, %f90, %f510;
	fma.rn.f32 	%f901, %f490, %f901, %f511;
	fma.rn.f32 	%f900, %f490, %f900, %f512;
	fma.rn.f32 	%f899, %f490, %f899, %f513;
	fma.rn.f32 	%f898, %f490, %f898, %f514;
	bra.uni 	$L__BB2_15;

$L__BB2_4:
	mov.f32 	%f902, 0f00000000;
	mov.f32 	%f905, 0f3F800000;
	setp.eq.s32 	%p4, %r13, 4;
	@%p4 bra 	$L__BB2_7;

	setp.ne.s32 	%p5, %r13, 1;
	mov.f32 	%f903, %f902;
	mov.f32 	%f904, %f902;
	mov.f32 	%f906, %f902;
	mov.f32 	%f907, %f902;
	mov.f32 	%f908, %f905;
	mov.f32 	%f909, %f902;
	mov.f32 	%f910, %f902;
	mov.f32 	%f911, %f905;
	mov.f32 	%f912, %f902;
	mov.f32 	%f913, %f902;
	@%p5 bra 	$L__BB2_16;

	// begin inline asm
	call (%rd19), _optix_get_static_transform_from_handle, (%rd17);
	// end inline asm
	add.s64 	%rd255, %rd19, 64;
	bra.uni 	$L__BB2_8;

$L__BB2_10:
	// begin inline asm
	call (%rd32), _optix_get_srt_motion_transform_from_handle, (%rd17);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd34, %rd32;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r27,%r28,%r29,%r30}, [%rd34];
	// end inline asm
	add.s64 	%rd38, %rd32, 16;
	// begin inline asm
	cvta.to.global.u64 %rd37, %rd38;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r31,%r32,%r33,%r34}, [%rd37];
	// end inline asm
	add.s64 	%rd41, %rd32, 32;
	// begin inline asm
	cvta.to.global.u64 %rd40, %rd41;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r35,%r36,%r37,%r38}, [%rd40];
	// end inline asm
	add.s64 	%rd44, %rd32, 48;
	// begin inline asm
	cvta.to.global.u64 %rd43, %rd44;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r39,%r40,%r41,%r42}, [%rd43];
	// end inline asm
	add.s64 	%rd47, %rd32, 64;
	// begin inline asm
	cvta.to.global.u64 %rd46, %rd47;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r43,%r44,%r45,%r46}, [%rd46];
	// end inline asm
	add.s64 	%rd50, %rd32, 80;
	// begin inline asm
	cvta.to.global.u64 %rd49, %rd50;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd49];
	// end inline asm
	add.s64 	%rd53, %rd32, 96;
	// begin inline asm
	cvta.to.global.u64 %rd52, %rd53;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd52];
	// end inline asm
	add.s64 	%rd56, %rd32, 112;
	// begin inline asm
	cvta.to.global.u64 %rd55, %rd56;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd55];
	// end inline asm
	add.s64 	%rd59, %rd32, 128;
	// begin inline asm
	cvta.to.global.u64 %rd58, %rd59;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd58];
	// end inline asm
	add.s64 	%rd62, %rd32, 144;
	// begin inline asm
	cvta.to.global.u64 %rd61, %rd62;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd61];
	// end inline asm
	mov.b32 	%f359, %r30;
	mov.b32 	%f360, %r31;
	and.b32  	%r83, %r29, 65535;
	add.s32 	%r84, %r83, -1;
	cvt.rn.f32.s32 	%f361, %r84;
	sub.f32 	%f362, %f344, %f359;
	sub.f32 	%f363, %f360, %f359;
	div.approx.f32 	%f364, %f362, %f363;
	mul.f32 	%f365, %f364, %f361;
	min.f32 	%f366, %f361, %f365;
	mov.f32 	%f367, 0f00000000;
	max.f32 	%f368, %f367, %f366;
	setp.num.f32 	%p7, %f368, %f368;
	selp.f32 	%f369, %f368, 0f00000000, %p7;
	cvt.rmi.f32.f32 	%f370, %f369;
	add.f32 	%f371, %f361, 0fBF800000;
	min.f32 	%f372, %f370, %f371;
	sub.f32 	%f29, %f369, %f372;
	cvt.rzi.s32.f32 	%r85, %f372;
	mul.wide.s32 	%rd76, %r85, 64;
	add.s64 	%rd65, %rd41, %rd76;
	// begin inline asm
	cvta.to.global.u64 %rd64, %rd65;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd64];
	// end inline asm
	mov.b32 	%f874, %r67;
	mov.b32 	%f875, %r68;
	mov.b32 	%f876, %r69;
	mov.b32 	%f877, %r70;
	add.s64 	%rd68, %rd65, 16;
	// begin inline asm
	cvta.to.global.u64 %rd67, %rd68;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd67];
	// end inline asm
	mov.b32 	%f878, %r71;
	mov.b32 	%f879, %r72;
	mov.b32 	%f880, %r73;
	mov.b32 	%f881, %r74;
	add.s64 	%rd71, %rd65, 32;
	// begin inline asm
	cvta.to.global.u64 %rd70, %rd71;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd70];
	// end inline asm
	mov.b32 	%f882, %r75;
	mov.b32 	%f883, %r76;
	mov.b32 	%f884, %r77;
	mov.b32 	%f885, %r78;
	add.s64 	%rd74, %rd65, 48;
	// begin inline asm
	cvta.to.global.u64 %rd73, %rd74;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd73];
	// end inline asm
	mov.b32 	%f886, %r79;
	mov.b32 	%f887, %r80;
	mov.b32 	%f888, %r81;
	mov.b32 	%f889, %r82;
	setp.leu.f32 	%p8, %f29, 0f00000000;
	@%p8 bra 	$L__BB2_12;

	mov.f32 	%f373, 0f3F800000;
	sub.f32 	%f374, %f373, %f29;
	add.s64 	%rd78, %rd65, 64;
	// begin inline asm
	cvta.to.global.u64 %rd77, %rd78;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r86,%r87,%r88,%r89}, [%rd77];
	// end inline asm
	mov.b32 	%f375, %r86;
	mov.b32 	%f376, %r87;
	mov.b32 	%f377, %r88;
	mov.b32 	%f378, %r89;
	mul.f32 	%f379, %f29, %f375;
	mul.f32 	%f380, %f29, %f376;
	mul.f32 	%f381, %f29, %f377;
	mul.f32 	%f382, %f29, %f378;
	fma.rn.f32 	%f874, %f374, %f874, %f379;
	fma.rn.f32 	%f875, %f374, %f875, %f380;
	fma.rn.f32 	%f876, %f374, %f876, %f381;
	fma.rn.f32 	%f877, %f374, %f877, %f382;
	add.s64 	%rd81, %rd65, 80;
	// begin inline asm
	cvta.to.global.u64 %rd80, %rd81;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r90,%r91,%r92,%r93}, [%rd80];
	// end inline asm
	mov.b32 	%f383, %r90;
	mov.b32 	%f384, %r91;
	mov.b32 	%f385, %r92;
	mov.b32 	%f386, %r93;
	mul.f32 	%f387, %f29, %f383;
	mul.f32 	%f388, %f29, %f384;
	mul.f32 	%f389, %f29, %f385;
	mul.f32 	%f390, %f29, %f386;
	fma.rn.f32 	%f878, %f374, %f878, %f387;
	fma.rn.f32 	%f879, %f374, %f879, %f388;
	fma.rn.f32 	%f880, %f374, %f880, %f389;
	fma.rn.f32 	%f881, %f374, %f881, %f390;
	add.s64 	%rd84, %rd65, 96;
	// begin inline asm
	cvta.to.global.u64 %rd83, %rd84;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r94,%r95,%r96,%r97}, [%rd83];
	// end inline asm
	mov.b32 	%f391, %r94;
	mov.b32 	%f392, %r95;
	mov.b32 	%f393, %r96;
	mov.b32 	%f394, %r97;
	mul.f32 	%f395, %f29, %f391;
	mul.f32 	%f396, %f29, %f392;
	mul.f32 	%f397, %f29, %f393;
	mul.f32 	%f398, %f29, %f394;
	fma.rn.f32 	%f882, %f374, %f882, %f395;
	fma.rn.f32 	%f399, %f374, %f883, %f396;
	fma.rn.f32 	%f400, %f374, %f884, %f397;
	fma.rn.f32 	%f401, %f374, %f885, %f398;
	add.s64 	%rd87, %rd65, 112;
	// begin inline asm
	cvta.to.global.u64 %rd86, %rd87;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r98,%r99,%r100,%r101}, [%rd86];
	// end inline asm
	mov.b32 	%f402, %r98;
	mov.b32 	%f403, %r99;
	mov.b32 	%f404, %r100;
	mov.b32 	%f405, %r101;
	mul.f32 	%f406, %f29, %f402;
	mul.f32 	%f407, %f29, %f403;
	mul.f32 	%f408, %f29, %f404;
	mul.f32 	%f409, %f29, %f405;
	fma.rn.f32 	%f410, %f374, %f886, %f406;
	fma.rn.f32 	%f887, %f374, %f887, %f407;
	fma.rn.f32 	%f888, %f374, %f888, %f408;
	fma.rn.f32 	%f889, %f374, %f889, %f409;
	mul.f32 	%f411, %f400, %f400;
	fma.rn.f32 	%f412, %f399, %f399, %f411;
	fma.rn.f32 	%f413, %f401, %f401, %f412;
	fma.rn.f32 	%f414, %f410, %f410, %f413;
	sqrt.rn.f32 	%f415, %f414;
	rcp.rn.f32 	%f416, %f415;
	mul.f32 	%f883, %f399, %f416;
	mul.f32 	%f884, %f400, %f416;
	mul.f32 	%f885, %f401, %f416;
	mul.f32 	%f886, %f416, %f410;

$L__BB2_12:
	mul.f32 	%f417, %f884, %f884;
	fma.rn.f32 	%f418, %f883, %f883, %f417;
	fma.rn.f32 	%f419, %f885, %f885, %f418;
	fma.rn.f32 	%f420, %f886, %f886, %f419;
	rcp.rn.f32 	%f421, %f420;
	mul.f32 	%f422, %f883, %f421;
	mul.f32 	%f423, %f884, %f421;
	mul.f32 	%f424, %f885, %f421;
	mul.f32 	%f425, %f886, %f421;
	mul.f32 	%f426, %f883, %f422;
	mul.f32 	%f427, %f884, %f423;
	mul.f32 	%f428, %f885, %f424;
	mul.f32 	%f429, %f883, %f423;
	mul.f32 	%f430, %f885, %f425;
	mul.f32 	%f431, %f883, %f424;
	mul.f32 	%f432, %f884, %f425;
	mul.f32 	%f433, %f884, %f424;
	mul.f32 	%f434, %f883, %f425;
	sub.f32 	%f435, %f426, %f427;
	sub.f32 	%f436, %f435, %f428;
	fma.rn.f32 	%f437, %f886, %f425, %f436;
	sub.f32 	%f438, %f429, %f430;
	add.f32 	%f439, %f438, %f438;
	add.f32 	%f440, %f431, %f432;
	add.f32 	%f441, %f440, %f440;
	add.f32 	%f442, %f429, %f430;
	add.f32 	%f443, %f442, %f442;
	sub.f32 	%f444, %f427, %f426;
	sub.f32 	%f445, %f444, %f428;
	fma.rn.f32 	%f446, %f886, %f425, %f445;
	sub.f32 	%f447, %f433, %f434;
	add.f32 	%f448, %f447, %f447;
	sub.f32 	%f449, %f431, %f432;
	add.f32 	%f450, %f449, %f449;
	add.f32 	%f451, %f433, %f434;
	add.f32 	%f452, %f451, %f451;
	neg.f32 	%f453, %f426;
	sub.f32 	%f454, %f453, %f427;
	add.f32 	%f455, %f428, %f454;
	fma.rn.f32 	%f456, %f886, %f425, %f455;
	mul.f32 	%f457, %f877, %f437;
	fma.rn.f32 	%f458, %f880, %f439, %f457;
	fma.rn.f32 	%f459, %f882, %f441, %f458;
	add.f32 	%f890, %f887, %f459;
	mul.f32 	%f460, %f880, %f446;
	fma.rn.f32 	%f461, %f877, %f443, %f460;
	fma.rn.f32 	%f462, %f882, %f448, %f461;
	add.f32 	%f894, %f888, %f462;
	mul.f32 	%f463, %f880, %f452;
	fma.rn.f32 	%f464, %f877, %f450, %f463;
	fma.rn.f32 	%f465, %f882, %f456, %f464;
	add.f32 	%f898, %f889, %f465;
	mul.f32 	%f466, %f876, %f437;
	fma.rn.f32 	%f467, %f879, %f439, %f466;
	fma.rn.f32 	%f891, %f881, %f441, %f467;
	mul.f32 	%f468, %f879, %f446;
	fma.rn.f32 	%f469, %f876, %f443, %f468;
	fma.rn.f32 	%f895, %f881, %f448, %f469;
	mul.f32 	%f470, %f879, %f452;
	fma.rn.f32 	%f471, %f876, %f450, %f470;
	fma.rn.f32 	%f899, %f881, %f456, %f471;
	mul.f32 	%f472, %f875, %f437;
	fma.rn.f32 	%f892, %f878, %f439, %f472;
	mul.f32 	%f473, %f878, %f446;
	fma.rn.f32 	%f896, %f875, %f443, %f473;
	mul.f32 	%f474, %f878, %f452;
	fma.rn.f32 	%f900, %f875, %f450, %f474;
	mul.f32 	%f893, %f874, %f437;
	mul.f32 	%f897, %f874, %f443;
	mul.f32 	%f901, %f874, %f450;

$L__BB2_15:
	mul.f32 	%f515, %f895, %f900;
	mul.f32 	%f516, %f896, %f899;
	sub.f32 	%f517, %f516, %f515;
	mul.f32 	%f518, %f893, %f517;
	mul.f32 	%f519, %f895, %f901;
	mul.f32 	%f520, %f897, %f899;
	sub.f32 	%f521, %f520, %f519;
	mul.f32 	%f522, %f892, %f521;
	sub.f32 	%f523, %f518, %f522;
	mul.f32 	%f524, %f896, %f901;
	mul.f32 	%f525, %f897, %f900;
	sub.f32 	%f526, %f525, %f524;
	fma.rn.f32 	%f527, %f891, %f526, %f523;
	rcp.rn.f32 	%f528, %f527;
	mul.f32 	%f905, %f517, %f528;
	mul.f32 	%f529, %f892, %f899;
	mul.f32 	%f530, %f891, %f900;
	sub.f32 	%f531, %f530, %f529;
	mul.f32 	%f904, %f531, %f528;
	mul.f32 	%f532, %f891, %f896;
	mul.f32 	%f533, %f892, %f895;
	sub.f32 	%f534, %f533, %f532;
	mul.f32 	%f903, %f534, %f528;
	sub.f32 	%f535, %f519, %f520;
	mul.f32 	%f909, %f535, %f528;
	mul.f32 	%f536, %f891, %f901;
	mul.f32 	%f537, %f893, %f899;
	sub.f32 	%f538, %f537, %f536;
	mul.f32 	%f908, %f538, %f528;
	mul.f32 	%f539, %f893, %f895;
	mul.f32 	%f540, %f891, %f897;
	sub.f32 	%f541, %f540, %f539;
	mul.f32 	%f907, %f541, %f528;
	mul.f32 	%f913, %f526, %f528;
	mul.f32 	%f542, %f893, %f900;
	mul.f32 	%f543, %f892, %f901;
	sub.f32 	%f544, %f543, %f542;
	mul.f32 	%f912, %f544, %f528;
	mul.f32 	%f545, %f892, %f897;
	mul.f32 	%f546, %f893, %f896;
	sub.f32 	%f547, %f546, %f545;
	mul.f32 	%f911, %f547, %f528;
	mul.f32 	%f548, %f890, %f905;
	neg.f32 	%f549, %f548;
	mul.f32 	%f550, %f894, %f904;
	sub.f32 	%f551, %f549, %f550;
	mul.f32 	%f552, %f898, %f903;
	sub.f32 	%f902, %f551, %f552;
	mul.f32 	%f553, %f890, %f909;
	neg.f32 	%f554, %f553;
	mul.f32 	%f555, %f894, %f908;
	sub.f32 	%f556, %f554, %f555;
	mul.f32 	%f557, %f898, %f907;
	sub.f32 	%f906, %f556, %f557;
	mul.f32 	%f558, %f890, %f913;
	neg.f32 	%f559, %f558;
	mul.f32 	%f560, %f894, %f912;
	sub.f32 	%f561, %f559, %f560;
	mul.f32 	%f562, %f898, %f911;
	sub.f32 	%f910, %f561, %f562;
	bra.uni 	$L__BB2_16;

$L__BB2_7:
	// begin inline asm
	call (%rd255), _optix_get_instance_inverse_transform_from_handle, (%rd17);
	// end inline asm

$L__BB2_8:
	// begin inline asm
	cvta.to.global.u64 %rd23, %rd255;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r15,%r16,%r17,%r18}, [%rd23];
	// end inline asm
	mov.b32 	%f905, %r15;
	mov.b32 	%f904, %r16;
	mov.b32 	%f903, %r17;
	mov.b32 	%f902, %r18;
	add.s64 	%rd27, %rd255, 16;
	// begin inline asm
	cvta.to.global.u64 %rd26, %rd27;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r19,%r20,%r21,%r22}, [%rd26];
	// end inline asm
	mov.b32 	%f909, %r19;
	mov.b32 	%f908, %r20;
	mov.b32 	%f907, %r21;
	mov.b32 	%f906, %r22;
	add.s64 	%rd30, %rd255, 32;
	// begin inline asm
	cvta.to.global.u64 %rd29, %rd30;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r23,%r24,%r25,%r26}, [%rd29];
	// end inline asm
	mov.b32 	%f913, %r23;
	mov.b32 	%f912, %r24;
	mov.b32 	%f911, %r25;
	mov.b32 	%f910, %r26;

$L__BB2_16:
	setp.eq.s32 	%p11, %r315, 0;
	@%p11 bra 	$L__BB2_18;

	mul.f32 	%f563, %f870, %f905;
	fma.rn.f32 	%f564, %f866, %f904, %f563;
	fma.rn.f32 	%f151, %f862, %f903, %f564;
	mul.f32 	%f565, %f871, %f905;
	fma.rn.f32 	%f566, %f867, %f904, %f565;
	fma.rn.f32 	%f152, %f863, %f903, %f566;
	mul.f32 	%f567, %f872, %f905;
	fma.rn.f32 	%f568, %f868, %f904, %f567;
	fma.rn.f32 	%f153, %f864, %f903, %f568;
	mul.f32 	%f569, %f873, %f905;
	fma.rn.f32 	%f570, %f869, %f904, %f569;
	fma.rn.f32 	%f571, %f865, %f903, %f570;
	add.f32 	%f902, %f902, %f571;
	mul.f32 	%f572, %f870, %f909;
	fma.rn.f32 	%f573, %f866, %f908, %f572;
	fma.rn.f32 	%f155, %f862, %f907, %f573;
	mul.f32 	%f574, %f871, %f909;
	fma.rn.f32 	%f575, %f867, %f908, %f574;
	fma.rn.f32 	%f156, %f863, %f907, %f575;
	mul.f32 	%f576, %f872, %f909;
	fma.rn.f32 	%f577, %f868, %f908, %f576;
	fma.rn.f32 	%f157, %f864, %f907, %f577;
	mul.f32 	%f578, %f873, %f909;
	fma.rn.f32 	%f579, %f869, %f908, %f578;
	fma.rn.f32 	%f580, %f865, %f907, %f579;
	add.f32 	%f906, %f906, %f580;
	mul.f32 	%f581, %f870, %f913;
	fma.rn.f32 	%f582, %f866, %f912, %f581;
	fma.rn.f32 	%f159, %f862, %f911, %f582;
	mul.f32 	%f583, %f871, %f913;
	fma.rn.f32 	%f584, %f867, %f912, %f583;
	fma.rn.f32 	%f160, %f863, %f911, %f584;
	mul.f32 	%f585, %f872, %f913;
	fma.rn.f32 	%f586, %f868, %f912, %f585;
	fma.rn.f32 	%f161, %f864, %f911, %f586;
	mul.f32 	%f587, %f873, %f913;
	fma.rn.f32 	%f588, %f869, %f912, %f587;
	fma.rn.f32 	%f589, %f865, %f911, %f588;
	add.f32 	%f910, %f910, %f589;
	mov.f32 	%f903, %f153;
	mov.f32 	%f904, %f152;
	mov.f32 	%f905, %f151;
	mov.f32 	%f907, %f157;
	mov.f32 	%f908, %f156;
	mov.f32 	%f909, %f155;
	mov.f32 	%f911, %f161;
	mov.f32 	%f912, %f160;
	mov.f32 	%f913, %f159;

$L__BB2_18:
	add.s32 	%r315, %r315, 1;
	setp.lt.u32 	%p12, %r315, %r10;
	mov.f32 	%f862, %f913;
	mov.f32 	%f863, %f912;
	mov.f32 	%f864, %f911;
	mov.f32 	%f865, %f910;
	mov.f32 	%f866, %f909;
	mov.f32 	%f867, %f908;
	mov.f32 	%f868, %f907;
	mov.f32 	%f869, %f906;
	mov.f32 	%f870, %f905;
	mov.f32 	%f871, %f904;
	mov.f32 	%f872, %f903;
	mov.f32 	%f873, %f902;
	@%p12 bra 	$L__BB2_3;

$L__BB2_19:
	mul.f32 	%f590, %f938, %f905;
	fma.rn.f32 	%f591, %f939, %f904, %f590;
	fma.rn.f32 	%f592, %f940, %f903, %f591;
	mul.f32 	%f593, %f938, %f909;
	fma.rn.f32 	%f594, %f939, %f908, %f593;
	fma.rn.f32 	%f595, %f940, %f907, %f594;
	mul.f32 	%f596, %f938, %f913;
	fma.rn.f32 	%f597, %f939, %f912, %f596;
	fma.rn.f32 	%f598, %f940, %f911, %f597;
	add.f32 	%f940, %f910, %f598;
	add.f32 	%f939, %f906, %f595;
	add.f32 	%f938, %f902, %f592;

$L__BB2_20:
	// begin inline asm
	call (%f996), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f997), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f601), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%r161), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p13, %r161, 0;
	@%p13 bra 	$L__BB2_40;

	// begin inline asm
	call (%r162), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f602), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p14, %r162, 0;
	@%p14 bra 	$L__BB2_39;

	mov.u32 	%r316, 0;

$L__BB2_23:
	.pragma "nounroll";
	// begin inline asm
	call (%rd136), _optix_get_transform_list_handle, (%r316);
	// end inline asm
	// begin inline asm
	call (%r165), _optix_get_transform_type_from_handle, (%rd136);
	// end inline asm
	or.b32  	%r166, %r165, 1;
	setp.eq.s32 	%p15, %r166, 3;
	@%p15 bra 	$L__BB2_29;
	bra.uni 	$L__BB2_24;

$L__BB2_29:
	setp.eq.s32 	%p18, %r165, 2;
	@%p18 bra 	$L__BB2_33;
	bra.uni 	$L__BB2_30;

$L__BB2_33:
	// begin inline asm
	call (%rd208), _optix_get_matrix_motion_transform_from_handle, (%rd136);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd210, %rd208;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r254,%r255,%r256,%r257}, [%rd210];
	// end inline asm
	add.s64 	%rd214, %rd208, 16;
	// begin inline asm
	cvta.to.global.u64 %rd213, %rd214;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r258,%r259,%r260,%r261}, [%rd213];
	// end inline asm
	add.s64 	%rd217, %rd208, 32;
	// begin inline asm
	cvta.to.global.u64 %rd216, %rd217;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r262,%r263,%r264,%r265}, [%rd216];
	// end inline asm
	add.s64 	%rd220, %rd208, 48;
	// begin inline asm
	cvta.to.global.u64 %rd219, %rd220;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r266,%r267,%r268,%r269}, [%rd219];
	// end inline asm
	add.s64 	%rd223, %rd208, 64;
	// begin inline asm
	cvta.to.global.u64 %rd222, %rd223;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r270,%r271,%r272,%r273}, [%rd222];
	// end inline asm
	add.s64 	%rd226, %rd208, 80;
	// begin inline asm
	cvta.to.global.u64 %rd225, %rd226;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r274,%r275,%r276,%r277}, [%rd225];
	// end inline asm
	add.s64 	%rd229, %rd208, 96;
	// begin inline asm
	cvta.to.global.u64 %rd228, %rd229;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r278,%r279,%r280,%r281}, [%rd228];
	// end inline asm
	add.s64 	%rd232, %rd208, 112;
	// begin inline asm
	cvta.to.global.u64 %rd231, %rd232;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r282,%r283,%r284,%r285}, [%rd231];
	// end inline asm
	mov.b32 	%f709, %r257;
	mov.b32 	%f710, %r258;
	and.b32  	%r298, %r256, 65535;
	add.s32 	%r299, %r298, -1;
	cvt.rn.f32.s32 	%f711, %r299;
	sub.f32 	%f712, %f602, %f709;
	sub.f32 	%f713, %f710, %f709;
	div.approx.f32 	%f714, %f712, %f713;
	mul.f32 	%f715, %f714, %f711;
	min.f32 	%f716, %f711, %f715;
	mov.f32 	%f717, 0f00000000;
	max.f32 	%f718, %f717, %f716;
	setp.num.f32 	%p21, %f718, %f718;
	selp.f32 	%f719, %f718, 0f00000000, %p21;
	cvt.rmi.f32.f32 	%f720, %f719;
	add.f32 	%f721, %f711, 0fBF800000;
	min.f32 	%f722, %f720, %f721;
	sub.f32 	%f258, %f719, %f722;
	cvt.rzi.s32.f32 	%r300, %f722;
	cvt.s64.s32 	%rd15, %r300;
	mul.wide.s32 	%rd243, %r300, 48;
	add.s64 	%rd235, %rd217, %rd243;
	// begin inline asm
	cvta.to.global.u64 %rd234, %rd235;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r286,%r287,%r288,%r289}, [%rd234];
	// end inline asm
	mov.b32 	%f966, %r286;
	mov.b32 	%f967, %r287;
	mov.b32 	%f968, %r288;
	add.s64 	%rd238, %rd235, 16;
	// begin inline asm
	cvta.to.global.u64 %rd237, %rd238;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r290,%r291,%r292,%r293}, [%rd237];
	// end inline asm
	mov.b32 	%f963, %r290;
	mov.b32 	%f964, %r291;
	mov.b32 	%f965, %r292;
	add.s64 	%rd241, %rd235, 32;
	// begin inline asm
	cvta.to.global.u64 %rd240, %rd241;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r294,%r295,%r296,%r297}, [%rd240];
	// end inline asm
	mov.b32 	%f960, %r294;
	mov.b32 	%f961, %r295;
	mov.b32 	%f962, %r296;
	setp.leu.f32 	%p22, %f258, 0f00000000;
	@%p22 bra 	$L__BB2_35;

	mov.f32 	%f723, 0f3F800000;
	sub.f32 	%f724, %f723, %f258;
	mul.lo.s64 	%rd253, %rd15, 48;
	add.s64 	%rd254, %rd208, %rd253;
	add.s64 	%rd245, %rd254, 80;
	// begin inline asm
	cvta.to.global.u64 %rd244, %rd245;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r301,%r302,%r303,%r304}, [%rd244];
	// end inline asm
	mov.b32 	%f725, %r301;
	mov.b32 	%f726, %r302;
	mov.b32 	%f727, %r303;
	mul.f32 	%f728, %f258, %f725;
	mul.f32 	%f729, %f258, %f726;
	mul.f32 	%f730, %f258, %f727;
	fma.rn.f32 	%f966, %f724, %f966, %f728;
	fma.rn.f32 	%f967, %f724, %f967, %f729;
	fma.rn.f32 	%f968, %f724, %f968, %f730;
	add.s64 	%rd248, %rd254, 96;
	// begin inline asm
	cvta.to.global.u64 %rd247, %rd248;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r305,%r306,%r307,%r308}, [%rd247];
	// end inline asm
	mov.b32 	%f731, %r305;
	mov.b32 	%f732, %r306;
	mov.b32 	%f733, %r307;
	mul.f32 	%f734, %f258, %f731;
	mul.f32 	%f735, %f258, %f732;
	mul.f32 	%f736, %f258, %f733;
	fma.rn.f32 	%f963, %f724, %f963, %f734;
	fma.rn.f32 	%f964, %f724, %f964, %f735;
	fma.rn.f32 	%f965, %f724, %f965, %f736;
	add.s64 	%rd251, %rd254, 112;
	// begin inline asm
	cvta.to.global.u64 %rd250, %rd251;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r309,%r310,%r311,%r312}, [%rd250];
	// end inline asm
	mov.b32 	%f737, %r309;
	mov.b32 	%f738, %r310;
	mov.b32 	%f739, %r311;
	mul.f32 	%f740, %f258, %f737;
	mul.f32 	%f741, %f258, %f738;
	mul.f32 	%f742, %f258, %f739;
	fma.rn.f32 	%f960, %f724, %f960, %f740;
	fma.rn.f32 	%f961, %f724, %f961, %f741;
	fma.rn.f32 	%f962, %f724, %f962, %f742;
	bra.uni 	$L__BB2_35;

$L__BB2_24:
	mov.f32 	%f969, 0f00000000;
	mov.f32 	%f971, 0f3F800000;
	setp.eq.s32 	%p16, %r165, 4;
	@%p16 bra 	$L__BB2_27;

	setp.ne.s32 	%p17, %r165, 1;
	mov.f32 	%f970, %f969;
	mov.f32 	%f972, %f969;
	mov.f32 	%f973, %f971;
	mov.f32 	%f974, %f969;
	mov.f32 	%f975, %f971;
	mov.f32 	%f976, %f969;
	mov.f32 	%f977, %f969;
	@%p17 bra 	$L__BB2_36;

	// begin inline asm
	call (%rd138), _optix_get_static_transform_from_handle, (%rd136);
	// end inline asm
	add.s64 	%rd256, %rd138, 64;
	bra.uni 	$L__BB2_28;

$L__BB2_30:
	// begin inline asm
	call (%rd151), _optix_get_srt_motion_transform_from_handle, (%rd136);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd153, %rd151;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r179,%r180,%r181,%r182}, [%rd153];
	// end inline asm
	add.s64 	%rd157, %rd151, 16;
	// begin inline asm
	cvta.to.global.u64 %rd156, %rd157;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r183,%r184,%r185,%r186}, [%rd156];
	// end inline asm
	add.s64 	%rd160, %rd151, 32;
	// begin inline asm
	cvta.to.global.u64 %rd159, %rd160;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r187,%r188,%r189,%r190}, [%rd159];
	// end inline asm
	add.s64 	%rd163, %rd151, 48;
	// begin inline asm
	cvta.to.global.u64 %rd162, %rd163;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r191,%r192,%r193,%r194}, [%rd162];
	// end inline asm
	add.s64 	%rd166, %rd151, 64;
	// begin inline asm
	cvta.to.global.u64 %rd165, %rd166;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r195,%r196,%r197,%r198}, [%rd165];
	// end inline asm
	add.s64 	%rd169, %rd151, 80;
	// begin inline asm
	cvta.to.global.u64 %rd168, %rd169;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r199,%r200,%r201,%r202}, [%rd168];
	// end inline asm
	add.s64 	%rd172, %rd151, 96;
	// begin inline asm
	cvta.to.global.u64 %rd171, %rd172;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r203,%r204,%r205,%r206}, [%rd171];
	// end inline asm
	add.s64 	%rd175, %rd151, 112;
	// begin inline asm
	cvta.to.global.u64 %rd174, %rd175;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r207,%r208,%r209,%r210}, [%rd174];
	// end inline asm
	add.s64 	%rd178, %rd151, 128;
	// begin inline asm
	cvta.to.global.u64 %rd177, %rd178;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r211,%r212,%r213,%r214}, [%rd177];
	// end inline asm
	add.s64 	%rd181, %rd151, 144;
	// begin inline asm
	cvta.to.global.u64 %rd180, %rd181;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r215,%r216,%r217,%r218}, [%rd180];
	// end inline asm
	mov.b32 	%f614, %r182;
	mov.b32 	%f615, %r183;
	and.b32  	%r235, %r181, 65535;
	add.s32 	%r236, %r235, -1;
	cvt.rn.f32.s32 	%f616, %r236;
	sub.f32 	%f617, %f602, %f614;
	sub.f32 	%f618, %f615, %f614;
	div.approx.f32 	%f619, %f617, %f618;
	mul.f32 	%f620, %f619, %f616;
	min.f32 	%f621, %f616, %f620;
	mov.f32 	%f622, 0f00000000;
	max.f32 	%f623, %f622, %f621;
	setp.num.f32 	%p19, %f623, %f623;
	selp.f32 	%f624, %f623, 0f00000000, %p19;
	cvt.rmi.f32.f32 	%f625, %f624;
	add.f32 	%f626, %f616, 0fBF800000;
	min.f32 	%f627, %f625, %f626;
	sub.f32 	%f218, %f624, %f627;
	cvt.rzi.s32.f32 	%r237, %f627;
	mul.wide.s32 	%rd195, %r237, 64;
	add.s64 	%rd184, %rd160, %rd195;
	// begin inline asm
	cvta.to.global.u64 %rd183, %rd184;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r219,%r220,%r221,%r222}, [%rd183];
	// end inline asm
	mov.b32 	%f950, %r219;
	mov.b32 	%f951, %r220;
	mov.b32 	%f952, %r221;
	add.s64 	%rd187, %rd184, 16;
	// begin inline asm
	cvta.to.global.u64 %rd186, %rd187;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r223,%r224,%r225,%r226}, [%rd186];
	// end inline asm
	mov.b32 	%f953, %r223;
	mov.b32 	%f954, %r224;
	mov.b32 	%f955, %r226;
	add.s64 	%rd190, %rd184, 32;
	// begin inline asm
	cvta.to.global.u64 %rd189, %rd190;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r227,%r228,%r229,%r230}, [%rd189];
	// end inline asm
	mov.b32 	%f956, %r228;
	mov.b32 	%f957, %r229;
	mov.b32 	%f958, %r230;
	add.s64 	%rd193, %rd184, 48;
	// begin inline asm
	cvta.to.global.u64 %rd192, %rd193;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r231,%r232,%r233,%r234}, [%rd192];
	// end inline asm
	mov.b32 	%f959, %r231;
	setp.leu.f32 	%p20, %f218, 0f00000000;
	@%p20 bra 	$L__BB2_32;

	mov.f32 	%f628, 0f3F800000;
	sub.f32 	%f629, %f628, %f218;
	add.s64 	%rd197, %rd184, 64;
	// begin inline asm
	cvta.to.global.u64 %rd196, %rd197;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r238,%r239,%r240,%r241}, [%rd196];
	// end inline asm
	mov.b32 	%f630, %r238;
	mov.b32 	%f631, %r239;
	mov.b32 	%f632, %r240;
	mul.f32 	%f633, %f218, %f630;
	mul.f32 	%f634, %f218, %f631;
	mul.f32 	%f635, %f218, %f632;
	fma.rn.f32 	%f950, %f629, %f950, %f633;
	fma.rn.f32 	%f951, %f629, %f951, %f634;
	fma.rn.f32 	%f952, %f629, %f952, %f635;
	add.s64 	%rd200, %rd184, 80;
	// begin inline asm
	cvta.to.global.u64 %rd199, %rd200;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r242,%r243,%r244,%r245}, [%rd199];
	// end inline asm
	mov.b32 	%f636, %r242;
	mov.b32 	%f637, %r243;
	mov.b32 	%f638, %r245;
	mul.f32 	%f639, %f218, %f636;
	mul.f32 	%f640, %f218, %f637;
	mul.f32 	%f641, %f218, %f638;
	fma.rn.f32 	%f953, %f629, %f953, %f639;
	fma.rn.f32 	%f954, %f629, %f954, %f640;
	fma.rn.f32 	%f955, %f629, %f955, %f641;
	add.s64 	%rd203, %rd184, 96;
	// begin inline asm
	cvta.to.global.u64 %rd202, %rd203;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r246,%r247,%r248,%r249}, [%rd202];
	// end inline asm
	mov.b32 	%f642, %r247;
	mov.b32 	%f643, %r248;
	mov.b32 	%f644, %r249;
	mul.f32 	%f645, %f218, %f642;
	mul.f32 	%f646, %f218, %f643;
	mul.f32 	%f647, %f218, %f644;
	fma.rn.f32 	%f648, %f629, %f956, %f645;
	fma.rn.f32 	%f649, %f629, %f957, %f646;
	fma.rn.f32 	%f650, %f629, %f958, %f647;
	add.s64 	%rd206, %rd184, 112;
	// begin inline asm
	cvta.to.global.u64 %rd205, %rd206;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r250,%r251,%r252,%r253}, [%rd205];
	// end inline asm
	mov.b32 	%f651, %r250;
	mul.f32 	%f652, %f218, %f651;
	fma.rn.f32 	%f653, %f629, %f959, %f652;
	mul.f32 	%f654, %f649, %f649;
	fma.rn.f32 	%f655, %f648, %f648, %f654;
	fma.rn.f32 	%f656, %f650, %f650, %f655;
	fma.rn.f32 	%f657, %f653, %f653, %f656;
	sqrt.rn.f32 	%f658, %f657;
	rcp.rn.f32 	%f659, %f658;
	mul.f32 	%f956, %f648, %f659;
	mul.f32 	%f957, %f649, %f659;
	mul.f32 	%f958, %f650, %f659;
	mul.f32 	%f959, %f659, %f653;

$L__BB2_32:
	mul.f32 	%f660, %f957, %f957;
	fma.rn.f32 	%f661, %f956, %f956, %f660;
	fma.rn.f32 	%f662, %f958, %f958, %f661;
	fma.rn.f32 	%f663, %f959, %f959, %f662;
	rcp.rn.f32 	%f664, %f663;
	mul.f32 	%f665, %f956, %f664;
	mul.f32 	%f666, %f957, %f664;
	mul.f32 	%f667, %f958, %f664;
	mul.f32 	%f668, %f959, %f664;
	mul.f32 	%f669, %f956, %f665;
	mul.f32 	%f670, %f957, %f666;
	mul.f32 	%f671, %f958, %f667;
	mul.f32 	%f672, %f956, %f666;
	mul.f32 	%f673, %f958, %f668;
	mul.f32 	%f674, %f956, %f667;
	mul.f32 	%f675, %f957, %f668;
	mul.f32 	%f676, %f957, %f667;
	mul.f32 	%f677, %f956, %f668;
	sub.f32 	%f678, %f669, %f670;
	sub.f32 	%f679, %f678, %f671;
	fma.rn.f32 	%f680, %f959, %f668, %f679;
	sub.f32 	%f681, %f672, %f673;
	add.f32 	%f682, %f681, %f681;
	add.f32 	%f683, %f674, %f675;
	add.f32 	%f684, %f683, %f683;
	add.f32 	%f685, %f672, %f673;
	add.f32 	%f686, %f685, %f685;
	sub.f32 	%f687, %f670, %f669;
	sub.f32 	%f688, %f687, %f671;
	fma.rn.f32 	%f689, %f959, %f668, %f688;
	sub.f32 	%f690, %f676, %f677;
	add.f32 	%f691, %f690, %f690;
	sub.f32 	%f692, %f674, %f675;
	add.f32 	%f693, %f692, %f692;
	add.f32 	%f694, %f676, %f677;
	add.f32 	%f695, %f694, %f694;
	neg.f32 	%f696, %f669;
	sub.f32 	%f697, %f696, %f670;
	add.f32 	%f698, %f671, %f697;
	fma.rn.f32 	%f699, %f959, %f668, %f698;
	mul.f32 	%f700, %f952, %f680;
	fma.rn.f32 	%f701, %f954, %f682, %f700;
	fma.rn.f32 	%f968, %f955, %f684, %f701;
	mul.f32 	%f702, %f954, %f689;
	fma.rn.f32 	%f703, %f952, %f686, %f702;
	fma.rn.f32 	%f965, %f955, %f691, %f703;
	mul.f32 	%f704, %f954, %f695;
	fma.rn.f32 	%f705, %f952, %f693, %f704;
	fma.rn.f32 	%f962, %f955, %f699, %f705;
	mul.f32 	%f706, %f951, %f680;
	fma.rn.f32 	%f967, %f953, %f682, %f706;
	mul.f32 	%f707, %f953, %f689;
	fma.rn.f32 	%f964, %f951, %f686, %f707;
	mul.f32 	%f708, %f953, %f695;
	fma.rn.f32 	%f961, %f951, %f693, %f708;
	mul.f32 	%f966, %f950, %f680;
	mul.f32 	%f963, %f950, %f686;
	mul.f32 	%f960, %f950, %f693;

$L__BB2_35:
	mul.f32 	%f743, %f961, %f965;
	mul.f32 	%f744, %f962, %f964;
	sub.f32 	%f745, %f744, %f743;
	mul.f32 	%f746, %f966, %f745;
	mul.f32 	%f747, %f960, %f965;
	mul.f32 	%f748, %f962, %f963;
	sub.f32 	%f749, %f748, %f747;
	mul.f32 	%f750, %f749, %f967;
	sub.f32 	%f751, %f746, %f750;
	mul.f32 	%f752, %f960, %f964;
	mul.f32 	%f753, %f961, %f963;
	sub.f32 	%f754, %f753, %f752;
	fma.rn.f32 	%f755, %f754, %f968, %f751;
	rcp.rn.f32 	%f756, %f755;
	mul.f32 	%f975, %f745, %f756;
	mul.f32 	%f757, %f962, %f967;
	mul.f32 	%f758, %f961, %f968;
	sub.f32 	%f759, %f758, %f757;
	mul.f32 	%f976, %f759, %f756;
	mul.f32 	%f760, %f964, %f968;
	mul.f32 	%f761, %f965, %f967;
	sub.f32 	%f762, %f761, %f760;
	mul.f32 	%f977, %f762, %f756;
	sub.f32 	%f763, %f747, %f748;
	mul.f32 	%f972, %f763, %f756;
	mul.f32 	%f764, %f960, %f968;
	mul.f32 	%f765, %f962, %f966;
	sub.f32 	%f766, %f765, %f764;
	mul.f32 	%f973, %f766, %f756;
	mul.f32 	%f767, %f965, %f966;
	mul.f32 	%f768, %f963, %f968;
	sub.f32 	%f769, %f768, %f767;
	mul.f32 	%f974, %f769, %f756;
	mul.f32 	%f969, %f754, %f756;
	mul.f32 	%f770, %f961, %f966;
	mul.f32 	%f771, %f960, %f967;
	sub.f32 	%f772, %f771, %f770;
	mul.f32 	%f970, %f772, %f756;
	mul.f32 	%f773, %f963, %f967;
	mul.f32 	%f774, %f964, %f966;
	sub.f32 	%f775, %f774, %f773;
	mul.f32 	%f971, %f775, %f756;
	bra.uni 	$L__BB2_36;

$L__BB2_27:
	// begin inline asm
	call (%rd256), _optix_get_instance_inverse_transform_from_handle, (%rd136);
	// end inline asm

$L__BB2_28:
	// begin inline asm
	cvta.to.global.u64 %rd142, %rd256;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r167,%r168,%r169,%r170}, [%rd142];
	// end inline asm
	mov.b32 	%f975, %r167;
	mov.b32 	%f976, %r168;
	mov.b32 	%f977, %r169;
	add.s64 	%rd146, %rd256, 16;
	// begin inline asm
	cvta.to.global.u64 %rd145, %rd146;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r171,%r172,%r173,%r174}, [%rd145];
	// end inline asm
	mov.b32 	%f972, %r171;
	mov.b32 	%f973, %r172;
	mov.b32 	%f974, %r173;
	add.s64 	%rd149, %rd256, 32;
	// begin inline asm
	cvta.to.global.u64 %rd148, %rd149;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r175,%r176,%r177,%r178}, [%rd148];
	// end inline asm
	mov.b32 	%f969, %r175;
	mov.b32 	%f970, %r176;
	mov.b32 	%f971, %r177;

$L__BB2_36:
	setp.eq.s32 	%p23, %r316, 0;
	@%p23 bra 	$L__BB2_38;

	mul.f32 	%f776, %f946, %f976;
	fma.rn.f32 	%f777, %f943, %f975, %f776;
	fma.rn.f32 	%f304, %f949, %f977, %f777;
	mul.f32 	%f778, %f945, %f976;
	fma.rn.f32 	%f779, %f942, %f975, %f778;
	fma.rn.f32 	%f305, %f948, %f977, %f779;
	mul.f32 	%f780, %f944, %f976;
	fma.rn.f32 	%f781, %f941, %f975, %f780;
	fma.rn.f32 	%f977, %f947, %f977, %f781;
	mul.f32 	%f782, %f946, %f973;
	fma.rn.f32 	%f783, %f943, %f972, %f782;
	fma.rn.f32 	%f307, %f949, %f974, %f783;
	mul.f32 	%f784, %f945, %f973;
	fma.rn.f32 	%f785, %f942, %f972, %f784;
	fma.rn.f32 	%f308, %f948, %f974, %f785;
	mul.f32 	%f786, %f944, %f973;
	fma.rn.f32 	%f787, %f941, %f972, %f786;
	fma.rn.f32 	%f974, %f947, %f974, %f787;
	mul.f32 	%f788, %f946, %f970;
	fma.rn.f32 	%f789, %f943, %f969, %f788;
	fma.rn.f32 	%f310, %f949, %f971, %f789;
	mul.f32 	%f790, %f945, %f970;
	fma.rn.f32 	%f791, %f942, %f969, %f790;
	fma.rn.f32 	%f311, %f948, %f971, %f791;
	mul.f32 	%f792, %f944, %f970;
	fma.rn.f32 	%f793, %f941, %f969, %f792;
	fma.rn.f32 	%f971, %f947, %f971, %f793;
	mov.f32 	%f969, %f310;
	mov.f32 	%f970, %f311;
	mov.f32 	%f972, %f307;
	mov.f32 	%f973, %f308;
	mov.f32 	%f975, %f304;
	mov.f32 	%f976, %f305;

$L__BB2_38:
	add.s32 	%r316, %r316, 1;
	setp.lt.u32 	%p24, %r316, %r162;
	mov.f32 	%f941, %f977;
	mov.f32 	%f942, %f976;
	mov.f32 	%f943, %f975;
	mov.f32 	%f944, %f974;
	mov.f32 	%f945, %f973;
	mov.f32 	%f946, %f972;
	mov.f32 	%f947, %f971;
	mov.f32 	%f948, %f970;
	mov.f32 	%f949, %f969;
	@%p24 bra 	$L__BB2_23;

$L__BB2_39:
	mul.f32 	%f794, %f997, %f976;
	fma.rn.f32 	%f795, %f996, %f975, %f794;
	mul.f32 	%f796, %f997, %f973;
	fma.rn.f32 	%f797, %f996, %f972, %f796;
	mul.f32 	%f798, %f997, %f970;
	fma.rn.f32 	%f799, %f996, %f969, %f798;
	fma.rn.f32 	%f998, %f601, %f971, %f799;
	fma.rn.f32 	%f997, %f601, %f974, %f797;
	fma.rn.f32 	%f996, %f601, %f977, %f795;
	bra.uni 	$L__BB2_41;

$L__BB2_40:
	mov.f32 	%f998, %f601;

$L__BB2_41:
	// begin inline asm
	call (%f800), _optix_get_ray_tmin, ();
	// end inline asm
	fma.rn.f32 	%f803, %f996, %f800, %f938;
	fma.rn.f32 	%f804, %f997, %f800, %f939;
	fma.rn.f32 	%f805, %f998, %f800, %f940;
	ld.v4.f32 	{%f806, %f807, %f808, %f809}, [%rd1+32];
	mul.f32 	%f814, %f806, %f803;
	fma.rn.f32 	%f815, %f807, %f804, %f814;
	fma.rn.f32 	%f816, %f808, %f805, %f815;
	mov.f32 	%f817, 0f3F800000;
	fma.rn.f32 	%f818, %f809, %f817, %f816;
	ld.v4.f32 	{%f819, %f820, %f821, %f822}, [%rd1+48];
	mul.f32 	%f827, %f819, %f803;
	fma.rn.f32 	%f828, %f820, %f804, %f827;
	fma.rn.f32 	%f829, %f821, %f805, %f828;
	fma.rn.f32 	%f830, %f822, %f817, %f829;
	ld.v4.f32 	{%f831, %f832, %f833, %f834}, [%rd1+64];
	mul.f32 	%f839, %f831, %f803;
	fma.rn.f32 	%f840, %f832, %f804, %f839;
	fma.rn.f32 	%f841, %f833, %f805, %f840;
	fma.rn.f32 	%f842, %f834, %f817, %f841;
	mul.f32 	%f843, %f806, %f996;
	fma.rn.f32 	%f844, %f807, %f997, %f843;
	fma.rn.f32 	%f845, %f808, %f998, %f844;
	mov.f32 	%f846, 0f00000000;
	fma.rn.f32 	%f847, %f809, %f846, %f845;
	mul.f32 	%f848, %f819, %f996;
	fma.rn.f32 	%f849, %f820, %f997, %f848;
	fma.rn.f32 	%f850, %f821, %f998, %f849;
	fma.rn.f32 	%f851, %f822, %f846, %f850;
	mul.f32 	%f852, %f831, %f996;
	fma.rn.f32 	%f853, %f832, %f997, %f852;
	fma.rn.f32 	%f854, %f833, %f998, %f853;
	fma.rn.f32 	%f855, %f834, %f846, %f854;
	neg.f32 	%f856, %f842;
	div.rn.f32 	%f340, %f856, %f855;
	fma.rn.f32 	%f857, %f340, %f847, %f818;
	fma.rn.f32 	%f858, %f340, %f851, %f830;
	mul.f32 	%f859, %f858, %f858;
	fma.rn.f32 	%f860, %f857, %f857, %f859;
	setp.gtu.f32 	%p25, %f860, 0f3F800000;
	@%p25 bra 	$L__BB2_43;

	mov.u32 	%r314, 254;
	// begin inline asm
	call (%r313), _optix_report_intersection_0, (%f340, %r314);
	// end inline asm

$L__BB2_43:
	ret;

}
	// .globl	__closesthit__disk
.visible .entry __closesthit__disk()
{
	.reg .pred 	%p<26>;
	.reg .f32 	%f<996>;
	.reg .b32 	%r<330>;
	.reg .b64 	%rd<258>;


	// begin inline asm
	call (%rd17), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u64 	%rd2, [%rd17+8];
	// begin inline asm
	call (%f935), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f936), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f937), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%r9), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p1, %r9, 0;
	@%p1 bra 	$L__BB3_20;

	// begin inline asm
	call (%r10), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f343), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p2, %r10, 0;
	@%p2 bra 	$L__BB3_19;

	mov.u32 	%r328, 0;

$L__BB3_3:
	.pragma "nounroll";
	// begin inline asm
	call (%rd18), _optix_get_transform_list_handle, (%r328);
	// end inline asm
	// begin inline asm
	call (%r13), _optix_get_transform_type_from_handle, (%rd18);
	// end inline asm
	or.b32  	%r14, %r13, 1;
	setp.eq.s32 	%p3, %r14, 3;
	@%p3 bra 	$L__BB3_9;
	bra.uni 	$L__BB3_4;

$L__BB3_9:
	setp.eq.s32 	%p6, %r13, 2;
	@%p6 bra 	$L__BB3_13;
	bra.uni 	$L__BB3_10;

$L__BB3_13:
	// begin inline asm
	call (%rd90), _optix_get_matrix_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd92, %rd90;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r102,%r103,%r104,%r105}, [%rd92];
	// end inline asm
	add.s64 	%rd96, %rd90, 16;
	// begin inline asm
	cvta.to.global.u64 %rd95, %rd96;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r106,%r107,%r108,%r109}, [%rd95];
	// end inline asm
	add.s64 	%rd99, %rd90, 32;
	// begin inline asm
	cvta.to.global.u64 %rd98, %rd99;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r110,%r111,%r112,%r113}, [%rd98];
	// end inline asm
	add.s64 	%rd102, %rd90, 48;
	// begin inline asm
	cvta.to.global.u64 %rd101, %rd102;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r114,%r115,%r116,%r117}, [%rd101];
	// end inline asm
	add.s64 	%rd105, %rd90, 64;
	// begin inline asm
	cvta.to.global.u64 %rd104, %rd105;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd104];
	// end inline asm
	add.s64 	%rd108, %rd90, 80;
	// begin inline asm
	cvta.to.global.u64 %rd107, %rd108;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd107];
	// end inline asm
	add.s64 	%rd111, %rd90, 96;
	// begin inline asm
	cvta.to.global.u64 %rd110, %rd111;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd110];
	// end inline asm
	add.s64 	%rd114, %rd90, 112;
	// begin inline asm
	cvta.to.global.u64 %rd113, %rd114;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd113];
	// end inline asm
	mov.b32 	%f474, %r105;
	mov.b32 	%f475, %r106;
	and.b32  	%r146, %r104, 65535;
	add.s32 	%r147, %r146, -1;
	cvt.rn.f32.s32 	%f476, %r147;
	sub.f32 	%f477, %f343, %f474;
	sub.f32 	%f478, %f475, %f474;
	div.approx.f32 	%f479, %f477, %f478;
	mul.f32 	%f480, %f479, %f476;
	min.f32 	%f481, %f476, %f480;
	mov.f32 	%f482, 0f00000000;
	max.f32 	%f483, %f482, %f481;
	setp.num.f32 	%p9, %f483, %f483;
	selp.f32 	%f484, %f483, 0f00000000, %p9;
	cvt.rmi.f32.f32 	%f485, %f484;
	add.f32 	%f486, %f476, 0fBF800000;
	min.f32 	%f487, %f485, %f486;
	sub.f32 	%f90, %f484, %f487;
	cvt.rzi.s32.f32 	%r148, %f487;
	cvt.s64.s32 	%rd9, %r148;
	mul.wide.s32 	%rd125, %r148, 48;
	add.s64 	%rd117, %rd99, %rd125;
	// begin inline asm
	cvta.to.global.u64 %rd116, %rd117;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd116];
	// end inline asm
	mov.b32 	%f890, %r134;
	mov.b32 	%f889, %r135;
	mov.b32 	%f888, %r136;
	mov.b32 	%f887, %r137;
	add.s64 	%rd120, %rd117, 16;
	// begin inline asm
	cvta.to.global.u64 %rd119, %rd120;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd119];
	// end inline asm
	mov.b32 	%f894, %r138;
	mov.b32 	%f893, %r139;
	mov.b32 	%f892, %r140;
	mov.b32 	%f891, %r141;
	add.s64 	%rd123, %rd117, 32;
	// begin inline asm
	cvta.to.global.u64 %rd122, %rd123;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd122];
	// end inline asm
	mov.b32 	%f898, %r142;
	mov.b32 	%f897, %r143;
	mov.b32 	%f896, %r144;
	mov.b32 	%f895, %r145;
	setp.leu.f32 	%p10, %f90, 0f00000000;
	@%p10 bra 	$L__BB3_15;

	mov.f32 	%f488, 0f3F800000;
	sub.f32 	%f489, %f488, %f90;
	mul.lo.s64 	%rd135, %rd9, 48;
	add.s64 	%rd136, %rd90, %rd135;
	add.s64 	%rd127, %rd136, 80;
	// begin inline asm
	cvta.to.global.u64 %rd126, %rd127;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r149,%r150,%r151,%r152}, [%rd126];
	// end inline asm
	mov.b32 	%f490, %r149;
	mov.b32 	%f491, %r150;
	mov.b32 	%f492, %r151;
	mov.b32 	%f493, %r152;
	mul.f32 	%f494, %f90, %f490;
	mul.f32 	%f495, %f90, %f491;
	mul.f32 	%f496, %f90, %f492;
	mul.f32 	%f497, %f90, %f493;
	fma.rn.f32 	%f890, %f489, %f890, %f494;
	fma.rn.f32 	%f889, %f489, %f889, %f495;
	fma.rn.f32 	%f888, %f489, %f888, %f496;
	fma.rn.f32 	%f887, %f489, %f887, %f497;
	add.s64 	%rd130, %rd136, 96;
	// begin inline asm
	cvta.to.global.u64 %rd129, %rd130;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r153,%r154,%r155,%r156}, [%rd129];
	// end inline asm
	mov.b32 	%f498, %r153;
	mov.b32 	%f499, %r154;
	mov.b32 	%f500, %r155;
	mov.b32 	%f501, %r156;
	mul.f32 	%f502, %f90, %f498;
	mul.f32 	%f503, %f90, %f499;
	mul.f32 	%f504, %f90, %f500;
	mul.f32 	%f505, %f90, %f501;
	fma.rn.f32 	%f894, %f489, %f894, %f502;
	fma.rn.f32 	%f893, %f489, %f893, %f503;
	fma.rn.f32 	%f892, %f489, %f892, %f504;
	fma.rn.f32 	%f891, %f489, %f891, %f505;
	add.s64 	%rd133, %rd136, 112;
	// begin inline asm
	cvta.to.global.u64 %rd132, %rd133;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r157,%r158,%r159,%r160}, [%rd132];
	// end inline asm
	mov.b32 	%f506, %r157;
	mov.b32 	%f507, %r158;
	mov.b32 	%f508, %r159;
	mov.b32 	%f509, %r160;
	mul.f32 	%f510, %f90, %f506;
	mul.f32 	%f511, %f90, %f507;
	mul.f32 	%f512, %f90, %f508;
	mul.f32 	%f513, %f90, %f509;
	fma.rn.f32 	%f898, %f489, %f898, %f510;
	fma.rn.f32 	%f897, %f489, %f897, %f511;
	fma.rn.f32 	%f896, %f489, %f896, %f512;
	fma.rn.f32 	%f895, %f489, %f895, %f513;
	bra.uni 	$L__BB3_15;

$L__BB3_4:
	mov.f32 	%f899, 0f00000000;
	mov.f32 	%f902, 0f3F800000;
	setp.eq.s32 	%p4, %r13, 4;
	@%p4 bra 	$L__BB3_7;

	setp.ne.s32 	%p5, %r13, 1;
	mov.f32 	%f900, %f899;
	mov.f32 	%f901, %f899;
	mov.f32 	%f903, %f899;
	mov.f32 	%f904, %f899;
	mov.f32 	%f905, %f902;
	mov.f32 	%f906, %f899;
	mov.f32 	%f907, %f899;
	mov.f32 	%f908, %f902;
	mov.f32 	%f909, %f899;
	mov.f32 	%f910, %f899;
	@%p5 bra 	$L__BB3_16;

	// begin inline asm
	call (%rd20), _optix_get_static_transform_from_handle, (%rd18);
	// end inline asm
	add.s64 	%rd256, %rd20, 64;
	bra.uni 	$L__BB3_8;

$L__BB3_10:
	// begin inline asm
	call (%rd33), _optix_get_srt_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd35, %rd33;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r27,%r28,%r29,%r30}, [%rd35];
	// end inline asm
	add.s64 	%rd39, %rd33, 16;
	// begin inline asm
	cvta.to.global.u64 %rd38, %rd39;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r31,%r32,%r33,%r34}, [%rd38];
	// end inline asm
	add.s64 	%rd42, %rd33, 32;
	// begin inline asm
	cvta.to.global.u64 %rd41, %rd42;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r35,%r36,%r37,%r38}, [%rd41];
	// end inline asm
	add.s64 	%rd45, %rd33, 48;
	// begin inline asm
	cvta.to.global.u64 %rd44, %rd45;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r39,%r40,%r41,%r42}, [%rd44];
	// end inline asm
	add.s64 	%rd48, %rd33, 64;
	// begin inline asm
	cvta.to.global.u64 %rd47, %rd48;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r43,%r44,%r45,%r46}, [%rd47];
	// end inline asm
	add.s64 	%rd51, %rd33, 80;
	// begin inline asm
	cvta.to.global.u64 %rd50, %rd51;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd50];
	// end inline asm
	add.s64 	%rd54, %rd33, 96;
	// begin inline asm
	cvta.to.global.u64 %rd53, %rd54;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd53];
	// end inline asm
	add.s64 	%rd57, %rd33, 112;
	// begin inline asm
	cvta.to.global.u64 %rd56, %rd57;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd56];
	// end inline asm
	add.s64 	%rd60, %rd33, 128;
	// begin inline asm
	cvta.to.global.u64 %rd59, %rd60;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd59];
	// end inline asm
	add.s64 	%rd63, %rd33, 144;
	// begin inline asm
	cvta.to.global.u64 %rd62, %rd63;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd62];
	// end inline asm
	mov.b32 	%f358, %r30;
	mov.b32 	%f359, %r31;
	and.b32  	%r83, %r29, 65535;
	add.s32 	%r84, %r83, -1;
	cvt.rn.f32.s32 	%f360, %r84;
	sub.f32 	%f361, %f343, %f358;
	sub.f32 	%f362, %f359, %f358;
	div.approx.f32 	%f363, %f361, %f362;
	mul.f32 	%f364, %f363, %f360;
	min.f32 	%f365, %f360, %f364;
	mov.f32 	%f366, 0f00000000;
	max.f32 	%f367, %f366, %f365;
	setp.num.f32 	%p7, %f367, %f367;
	selp.f32 	%f368, %f367, 0f00000000, %p7;
	cvt.rmi.f32.f32 	%f369, %f368;
	add.f32 	%f370, %f360, 0fBF800000;
	min.f32 	%f371, %f369, %f370;
	sub.f32 	%f29, %f368, %f371;
	cvt.rzi.s32.f32 	%r85, %f371;
	mul.wide.s32 	%rd77, %r85, 64;
	add.s64 	%rd66, %rd42, %rd77;
	// begin inline asm
	cvta.to.global.u64 %rd65, %rd66;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd65];
	// end inline asm
	mov.b32 	%f871, %r67;
	mov.b32 	%f872, %r68;
	mov.b32 	%f873, %r69;
	mov.b32 	%f874, %r70;
	add.s64 	%rd69, %rd66, 16;
	// begin inline asm
	cvta.to.global.u64 %rd68, %rd69;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd68];
	// end inline asm
	mov.b32 	%f875, %r71;
	mov.b32 	%f876, %r72;
	mov.b32 	%f877, %r73;
	mov.b32 	%f878, %r74;
	add.s64 	%rd72, %rd66, 32;
	// begin inline asm
	cvta.to.global.u64 %rd71, %rd72;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd71];
	// end inline asm
	mov.b32 	%f879, %r75;
	mov.b32 	%f880, %r76;
	mov.b32 	%f881, %r77;
	mov.b32 	%f882, %r78;
	add.s64 	%rd75, %rd66, 48;
	// begin inline asm
	cvta.to.global.u64 %rd74, %rd75;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd74];
	// end inline asm
	mov.b32 	%f883, %r79;
	mov.b32 	%f884, %r80;
	mov.b32 	%f885, %r81;
	mov.b32 	%f886, %r82;
	setp.leu.f32 	%p8, %f29, 0f00000000;
	@%p8 bra 	$L__BB3_12;

	mov.f32 	%f372, 0f3F800000;
	sub.f32 	%f373, %f372, %f29;
	add.s64 	%rd79, %rd66, 64;
	// begin inline asm
	cvta.to.global.u64 %rd78, %rd79;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r86,%r87,%r88,%r89}, [%rd78];
	// end inline asm
	mov.b32 	%f374, %r86;
	mov.b32 	%f375, %r87;
	mov.b32 	%f376, %r88;
	mov.b32 	%f377, %r89;
	mul.f32 	%f378, %f29, %f374;
	mul.f32 	%f379, %f29, %f375;
	mul.f32 	%f380, %f29, %f376;
	mul.f32 	%f381, %f29, %f377;
	fma.rn.f32 	%f871, %f373, %f871, %f378;
	fma.rn.f32 	%f872, %f373, %f872, %f379;
	fma.rn.f32 	%f873, %f373, %f873, %f380;
	fma.rn.f32 	%f874, %f373, %f874, %f381;
	add.s64 	%rd82, %rd66, 80;
	// begin inline asm
	cvta.to.global.u64 %rd81, %rd82;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r90,%r91,%r92,%r93}, [%rd81];
	// end inline asm
	mov.b32 	%f382, %r90;
	mov.b32 	%f383, %r91;
	mov.b32 	%f384, %r92;
	mov.b32 	%f385, %r93;
	mul.f32 	%f386, %f29, %f382;
	mul.f32 	%f387, %f29, %f383;
	mul.f32 	%f388, %f29, %f384;
	mul.f32 	%f389, %f29, %f385;
	fma.rn.f32 	%f875, %f373, %f875, %f386;
	fma.rn.f32 	%f876, %f373, %f876, %f387;
	fma.rn.f32 	%f877, %f373, %f877, %f388;
	fma.rn.f32 	%f878, %f373, %f878, %f389;
	add.s64 	%rd85, %rd66, 96;
	// begin inline asm
	cvta.to.global.u64 %rd84, %rd85;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r94,%r95,%r96,%r97}, [%rd84];
	// end inline asm
	mov.b32 	%f390, %r94;
	mov.b32 	%f391, %r95;
	mov.b32 	%f392, %r96;
	mov.b32 	%f393, %r97;
	mul.f32 	%f394, %f29, %f390;
	mul.f32 	%f395, %f29, %f391;
	mul.f32 	%f396, %f29, %f392;
	mul.f32 	%f397, %f29, %f393;
	fma.rn.f32 	%f879, %f373, %f879, %f394;
	fma.rn.f32 	%f398, %f373, %f880, %f395;
	fma.rn.f32 	%f399, %f373, %f881, %f396;
	fma.rn.f32 	%f400, %f373, %f882, %f397;
	add.s64 	%rd88, %rd66, 112;
	// begin inline asm
	cvta.to.global.u64 %rd87, %rd88;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r98,%r99,%r100,%r101}, [%rd87];
	// end inline asm
	mov.b32 	%f401, %r98;
	mov.b32 	%f402, %r99;
	mov.b32 	%f403, %r100;
	mov.b32 	%f404, %r101;
	mul.f32 	%f405, %f29, %f401;
	mul.f32 	%f406, %f29, %f402;
	mul.f32 	%f407, %f29, %f403;
	mul.f32 	%f408, %f29, %f404;
	fma.rn.f32 	%f409, %f373, %f883, %f405;
	fma.rn.f32 	%f884, %f373, %f884, %f406;
	fma.rn.f32 	%f885, %f373, %f885, %f407;
	fma.rn.f32 	%f886, %f373, %f886, %f408;
	mul.f32 	%f410, %f399, %f399;
	fma.rn.f32 	%f411, %f398, %f398, %f410;
	fma.rn.f32 	%f412, %f400, %f400, %f411;
	fma.rn.f32 	%f413, %f409, %f409, %f412;
	sqrt.rn.f32 	%f414, %f413;
	rcp.rn.f32 	%f415, %f414;
	mul.f32 	%f880, %f398, %f415;
	mul.f32 	%f881, %f399, %f415;
	mul.f32 	%f882, %f400, %f415;
	mul.f32 	%f883, %f415, %f409;

$L__BB3_12:
	mul.f32 	%f416, %f881, %f881;
	fma.rn.f32 	%f417, %f880, %f880, %f416;
	fma.rn.f32 	%f418, %f882, %f882, %f417;
	fma.rn.f32 	%f419, %f883, %f883, %f418;
	rcp.rn.f32 	%f420, %f419;
	mul.f32 	%f421, %f880, %f420;
	mul.f32 	%f422, %f881, %f420;
	mul.f32 	%f423, %f882, %f420;
	mul.f32 	%f424, %f883, %f420;
	mul.f32 	%f425, %f880, %f421;
	mul.f32 	%f426, %f881, %f422;
	mul.f32 	%f427, %f882, %f423;
	mul.f32 	%f428, %f880, %f422;
	mul.f32 	%f429, %f882, %f424;
	mul.f32 	%f430, %f880, %f423;
	mul.f32 	%f431, %f881, %f424;
	mul.f32 	%f432, %f881, %f423;
	mul.f32 	%f433, %f880, %f424;
	sub.f32 	%f434, %f425, %f426;
	sub.f32 	%f435, %f434, %f427;
	fma.rn.f32 	%f436, %f883, %f424, %f435;
	sub.f32 	%f437, %f428, %f429;
	add.f32 	%f438, %f437, %f437;
	add.f32 	%f439, %f430, %f431;
	add.f32 	%f440, %f439, %f439;
	add.f32 	%f441, %f428, %f429;
	add.f32 	%f442, %f441, %f441;
	sub.f32 	%f443, %f426, %f425;
	sub.f32 	%f444, %f443, %f427;
	fma.rn.f32 	%f445, %f883, %f424, %f444;
	sub.f32 	%f446, %f432, %f433;
	add.f32 	%f447, %f446, %f446;
	sub.f32 	%f448, %f430, %f431;
	add.f32 	%f449, %f448, %f448;
	add.f32 	%f450, %f432, %f433;
	add.f32 	%f451, %f450, %f450;
	neg.f32 	%f452, %f425;
	sub.f32 	%f453, %f452, %f426;
	add.f32 	%f454, %f427, %f453;
	fma.rn.f32 	%f455, %f883, %f424, %f454;
	mul.f32 	%f456, %f874, %f436;
	fma.rn.f32 	%f457, %f877, %f438, %f456;
	fma.rn.f32 	%f458, %f879, %f440, %f457;
	add.f32 	%f887, %f884, %f458;
	mul.f32 	%f459, %f877, %f445;
	fma.rn.f32 	%f460, %f874, %f442, %f459;
	fma.rn.f32 	%f461, %f879, %f447, %f460;
	add.f32 	%f891, %f885, %f461;
	mul.f32 	%f462, %f877, %f451;
	fma.rn.f32 	%f463, %f874, %f449, %f462;
	fma.rn.f32 	%f464, %f879, %f455, %f463;
	add.f32 	%f895, %f886, %f464;
	mul.f32 	%f465, %f873, %f436;
	fma.rn.f32 	%f466, %f876, %f438, %f465;
	fma.rn.f32 	%f888, %f878, %f440, %f466;
	mul.f32 	%f467, %f876, %f445;
	fma.rn.f32 	%f468, %f873, %f442, %f467;
	fma.rn.f32 	%f892, %f878, %f447, %f468;
	mul.f32 	%f469, %f876, %f451;
	fma.rn.f32 	%f470, %f873, %f449, %f469;
	fma.rn.f32 	%f896, %f878, %f455, %f470;
	mul.f32 	%f471, %f872, %f436;
	fma.rn.f32 	%f889, %f875, %f438, %f471;
	mul.f32 	%f472, %f875, %f445;
	fma.rn.f32 	%f893, %f872, %f442, %f472;
	mul.f32 	%f473, %f875, %f451;
	fma.rn.f32 	%f897, %f872, %f449, %f473;
	mul.f32 	%f890, %f871, %f436;
	mul.f32 	%f894, %f871, %f442;
	mul.f32 	%f898, %f871, %f449;

$L__BB3_15:
	mul.f32 	%f514, %f892, %f897;
	mul.f32 	%f515, %f893, %f896;
	sub.f32 	%f516, %f515, %f514;
	mul.f32 	%f517, %f890, %f516;
	mul.f32 	%f518, %f892, %f898;
	mul.f32 	%f519, %f894, %f896;
	sub.f32 	%f520, %f519, %f518;
	mul.f32 	%f521, %f889, %f520;
	sub.f32 	%f522, %f517, %f521;
	mul.f32 	%f523, %f893, %f898;
	mul.f32 	%f524, %f894, %f897;
	sub.f32 	%f525, %f524, %f523;
	fma.rn.f32 	%f526, %f888, %f525, %f522;
	rcp.rn.f32 	%f527, %f526;
	mul.f32 	%f902, %f516, %f527;
	mul.f32 	%f528, %f889, %f896;
	mul.f32 	%f529, %f888, %f897;
	sub.f32 	%f530, %f529, %f528;
	mul.f32 	%f901, %f530, %f527;
	mul.f32 	%f531, %f888, %f893;
	mul.f32 	%f532, %f889, %f892;
	sub.f32 	%f533, %f532, %f531;
	mul.f32 	%f900, %f533, %f527;
	sub.f32 	%f534, %f518, %f519;
	mul.f32 	%f906, %f534, %f527;
	mul.f32 	%f535, %f888, %f898;
	mul.f32 	%f536, %f890, %f896;
	sub.f32 	%f537, %f536, %f535;
	mul.f32 	%f905, %f537, %f527;
	mul.f32 	%f538, %f890, %f892;
	mul.f32 	%f539, %f888, %f894;
	sub.f32 	%f540, %f539, %f538;
	mul.f32 	%f904, %f540, %f527;
	mul.f32 	%f910, %f525, %f527;
	mul.f32 	%f541, %f890, %f897;
	mul.f32 	%f542, %f889, %f898;
	sub.f32 	%f543, %f542, %f541;
	mul.f32 	%f909, %f543, %f527;
	mul.f32 	%f544, %f889, %f894;
	mul.f32 	%f545, %f890, %f893;
	sub.f32 	%f546, %f545, %f544;
	mul.f32 	%f908, %f546, %f527;
	mul.f32 	%f547, %f887, %f902;
	neg.f32 	%f548, %f547;
	mul.f32 	%f549, %f891, %f901;
	sub.f32 	%f550, %f548, %f549;
	mul.f32 	%f551, %f895, %f900;
	sub.f32 	%f899, %f550, %f551;
	mul.f32 	%f552, %f887, %f906;
	neg.f32 	%f553, %f552;
	mul.f32 	%f554, %f891, %f905;
	sub.f32 	%f555, %f553, %f554;
	mul.f32 	%f556, %f895, %f904;
	sub.f32 	%f903, %f555, %f556;
	mul.f32 	%f557, %f887, %f910;
	neg.f32 	%f558, %f557;
	mul.f32 	%f559, %f891, %f909;
	sub.f32 	%f560, %f558, %f559;
	mul.f32 	%f561, %f895, %f908;
	sub.f32 	%f907, %f560, %f561;
	bra.uni 	$L__BB3_16;

$L__BB3_7:
	// begin inline asm
	call (%rd256), _optix_get_instance_inverse_transform_from_handle, (%rd18);
	// end inline asm

$L__BB3_8:
	// begin inline asm
	cvta.to.global.u64 %rd24, %rd256;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r15,%r16,%r17,%r18}, [%rd24];
	// end inline asm
	mov.b32 	%f902, %r15;
	mov.b32 	%f901, %r16;
	mov.b32 	%f900, %r17;
	mov.b32 	%f899, %r18;
	add.s64 	%rd28, %rd256, 16;
	// begin inline asm
	cvta.to.global.u64 %rd27, %rd28;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r19,%r20,%r21,%r22}, [%rd27];
	// end inline asm
	mov.b32 	%f906, %r19;
	mov.b32 	%f905, %r20;
	mov.b32 	%f904, %r21;
	mov.b32 	%f903, %r22;
	add.s64 	%rd31, %rd256, 32;
	// begin inline asm
	cvta.to.global.u64 %rd30, %rd31;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r23,%r24,%r25,%r26}, [%rd30];
	// end inline asm
	mov.b32 	%f910, %r23;
	mov.b32 	%f909, %r24;
	mov.b32 	%f908, %r25;
	mov.b32 	%f907, %r26;

$L__BB3_16:
	setp.eq.s32 	%p11, %r328, 0;
	@%p11 bra 	$L__BB3_18;

	mul.f32 	%f562, %f867, %f902;
	fma.rn.f32 	%f563, %f863, %f901, %f562;
	fma.rn.f32 	%f151, %f859, %f900, %f563;
	mul.f32 	%f564, %f868, %f902;
	fma.rn.f32 	%f565, %f864, %f901, %f564;
	fma.rn.f32 	%f152, %f860, %f900, %f565;
	mul.f32 	%f566, %f869, %f902;
	fma.rn.f32 	%f567, %f865, %f901, %f566;
	fma.rn.f32 	%f153, %f861, %f900, %f567;
	mul.f32 	%f568, %f870, %f902;
	fma.rn.f32 	%f569, %f866, %f901, %f568;
	fma.rn.f32 	%f570, %f862, %f900, %f569;
	add.f32 	%f899, %f899, %f570;
	mul.f32 	%f571, %f867, %f906;
	fma.rn.f32 	%f572, %f863, %f905, %f571;
	fma.rn.f32 	%f155, %f859, %f904, %f572;
	mul.f32 	%f573, %f868, %f906;
	fma.rn.f32 	%f574, %f864, %f905, %f573;
	fma.rn.f32 	%f156, %f860, %f904, %f574;
	mul.f32 	%f575, %f869, %f906;
	fma.rn.f32 	%f576, %f865, %f905, %f575;
	fma.rn.f32 	%f157, %f861, %f904, %f576;
	mul.f32 	%f577, %f870, %f906;
	fma.rn.f32 	%f578, %f866, %f905, %f577;
	fma.rn.f32 	%f579, %f862, %f904, %f578;
	add.f32 	%f903, %f903, %f579;
	mul.f32 	%f580, %f867, %f910;
	fma.rn.f32 	%f581, %f863, %f909, %f580;
	fma.rn.f32 	%f159, %f859, %f908, %f581;
	mul.f32 	%f582, %f868, %f910;
	fma.rn.f32 	%f583, %f864, %f909, %f582;
	fma.rn.f32 	%f160, %f860, %f908, %f583;
	mul.f32 	%f584, %f869, %f910;
	fma.rn.f32 	%f585, %f865, %f909, %f584;
	fma.rn.f32 	%f161, %f861, %f908, %f585;
	mul.f32 	%f586, %f870, %f910;
	fma.rn.f32 	%f587, %f866, %f909, %f586;
	fma.rn.f32 	%f588, %f862, %f908, %f587;
	add.f32 	%f907, %f907, %f588;
	mov.f32 	%f900, %f153;
	mov.f32 	%f901, %f152;
	mov.f32 	%f902, %f151;
	mov.f32 	%f904, %f157;
	mov.f32 	%f905, %f156;
	mov.f32 	%f906, %f155;
	mov.f32 	%f908, %f161;
	mov.f32 	%f909, %f160;
	mov.f32 	%f910, %f159;

$L__BB3_18:
	add.s32 	%r328, %r328, 1;
	setp.lt.u32 	%p12, %r328, %r10;
	mov.f32 	%f859, %f910;
	mov.f32 	%f860, %f909;
	mov.f32 	%f861, %f908;
	mov.f32 	%f862, %f907;
	mov.f32 	%f863, %f906;
	mov.f32 	%f864, %f905;
	mov.f32 	%f865, %f904;
	mov.f32 	%f866, %f903;
	mov.f32 	%f867, %f902;
	mov.f32 	%f868, %f901;
	mov.f32 	%f869, %f900;
	mov.f32 	%f870, %f899;
	@%p12 bra 	$L__BB3_3;

$L__BB3_19:
	mul.f32 	%f589, %f935, %f902;
	fma.rn.f32 	%f590, %f936, %f901, %f589;
	fma.rn.f32 	%f591, %f937, %f900, %f590;
	mul.f32 	%f592, %f935, %f906;
	fma.rn.f32 	%f593, %f936, %f905, %f592;
	fma.rn.f32 	%f594, %f937, %f904, %f593;
	mul.f32 	%f595, %f935, %f910;
	fma.rn.f32 	%f596, %f936, %f909, %f595;
	fma.rn.f32 	%f597, %f937, %f908, %f596;
	add.f32 	%f937, %f907, %f597;
	add.f32 	%f936, %f903, %f594;
	add.f32 	%f935, %f899, %f591;

$L__BB3_20:
	// begin inline asm
	call (%f993), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f994), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f600), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%r161), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p13, %r161, 0;
	@%p13 bra 	$L__BB3_40;

	// begin inline asm
	call (%r162), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f601), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p14, %r162, 0;
	@%p14 bra 	$L__BB3_39;

	mov.u32 	%r329, 0;

$L__BB3_23:
	.pragma "nounroll";
	// begin inline asm
	call (%rd137), _optix_get_transform_list_handle, (%r329);
	// end inline asm
	// begin inline asm
	call (%r165), _optix_get_transform_type_from_handle, (%rd137);
	// end inline asm
	or.b32  	%r166, %r165, 1;
	setp.eq.s32 	%p15, %r166, 3;
	@%p15 bra 	$L__BB3_29;
	bra.uni 	$L__BB3_24;

$L__BB3_29:
	setp.eq.s32 	%p18, %r165, 2;
	@%p18 bra 	$L__BB3_33;
	bra.uni 	$L__BB3_30;

$L__BB3_33:
	// begin inline asm
	call (%rd209), _optix_get_matrix_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd211, %rd209;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r254,%r255,%r256,%r257}, [%rd211];
	// end inline asm
	add.s64 	%rd215, %rd209, 16;
	// begin inline asm
	cvta.to.global.u64 %rd214, %rd215;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r258,%r259,%r260,%r261}, [%rd214];
	// end inline asm
	add.s64 	%rd218, %rd209, 32;
	// begin inline asm
	cvta.to.global.u64 %rd217, %rd218;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r262,%r263,%r264,%r265}, [%rd217];
	// end inline asm
	add.s64 	%rd221, %rd209, 48;
	// begin inline asm
	cvta.to.global.u64 %rd220, %rd221;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r266,%r267,%r268,%r269}, [%rd220];
	// end inline asm
	add.s64 	%rd224, %rd209, 64;
	// begin inline asm
	cvta.to.global.u64 %rd223, %rd224;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r270,%r271,%r272,%r273}, [%rd223];
	// end inline asm
	add.s64 	%rd227, %rd209, 80;
	// begin inline asm
	cvta.to.global.u64 %rd226, %rd227;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r274,%r275,%r276,%r277}, [%rd226];
	// end inline asm
	add.s64 	%rd230, %rd209, 96;
	// begin inline asm
	cvta.to.global.u64 %rd229, %rd230;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r278,%r279,%r280,%r281}, [%rd229];
	// end inline asm
	add.s64 	%rd233, %rd209, 112;
	// begin inline asm
	cvta.to.global.u64 %rd232, %rd233;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r282,%r283,%r284,%r285}, [%rd232];
	// end inline asm
	mov.b32 	%f708, %r257;
	mov.b32 	%f709, %r258;
	and.b32  	%r298, %r256, 65535;
	add.s32 	%r299, %r298, -1;
	cvt.rn.f32.s32 	%f710, %r299;
	sub.f32 	%f711, %f601, %f708;
	sub.f32 	%f712, %f709, %f708;
	div.approx.f32 	%f713, %f711, %f712;
	mul.f32 	%f714, %f713, %f710;
	min.f32 	%f715, %f710, %f714;
	mov.f32 	%f716, 0f00000000;
	max.f32 	%f717, %f716, %f715;
	setp.num.f32 	%p21, %f717, %f717;
	selp.f32 	%f718, %f717, 0f00000000, %p21;
	cvt.rmi.f32.f32 	%f719, %f718;
	add.f32 	%f720, %f710, 0fBF800000;
	min.f32 	%f721, %f719, %f720;
	sub.f32 	%f258, %f718, %f721;
	cvt.rzi.s32.f32 	%r300, %f721;
	cvt.s64.s32 	%rd16, %r300;
	mul.wide.s32 	%rd244, %r300, 48;
	add.s64 	%rd236, %rd218, %rd244;
	// begin inline asm
	cvta.to.global.u64 %rd235, %rd236;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r286,%r287,%r288,%r289}, [%rd235];
	// end inline asm
	mov.b32 	%f963, %r286;
	mov.b32 	%f964, %r287;
	mov.b32 	%f965, %r288;
	add.s64 	%rd239, %rd236, 16;
	// begin inline asm
	cvta.to.global.u64 %rd238, %rd239;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r290,%r291,%r292,%r293}, [%rd238];
	// end inline asm
	mov.b32 	%f960, %r290;
	mov.b32 	%f961, %r291;
	mov.b32 	%f962, %r292;
	add.s64 	%rd242, %rd236, 32;
	// begin inline asm
	cvta.to.global.u64 %rd241, %rd242;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r294,%r295,%r296,%r297}, [%rd241];
	// end inline asm
	mov.b32 	%f957, %r294;
	mov.b32 	%f958, %r295;
	mov.b32 	%f959, %r296;
	setp.leu.f32 	%p22, %f258, 0f00000000;
	@%p22 bra 	$L__BB3_35;

	mov.f32 	%f722, 0f3F800000;
	sub.f32 	%f723, %f722, %f258;
	mul.lo.s64 	%rd254, %rd16, 48;
	add.s64 	%rd255, %rd209, %rd254;
	add.s64 	%rd246, %rd255, 80;
	// begin inline asm
	cvta.to.global.u64 %rd245, %rd246;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r301,%r302,%r303,%r304}, [%rd245];
	// end inline asm
	mov.b32 	%f724, %r301;
	mov.b32 	%f725, %r302;
	mov.b32 	%f726, %r303;
	mul.f32 	%f727, %f258, %f724;
	mul.f32 	%f728, %f258, %f725;
	mul.f32 	%f729, %f258, %f726;
	fma.rn.f32 	%f963, %f723, %f963, %f727;
	fma.rn.f32 	%f964, %f723, %f964, %f728;
	fma.rn.f32 	%f965, %f723, %f965, %f729;
	add.s64 	%rd249, %rd255, 96;
	// begin inline asm
	cvta.to.global.u64 %rd248, %rd249;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r305,%r306,%r307,%r308}, [%rd248];
	// end inline asm
	mov.b32 	%f730, %r305;
	mov.b32 	%f731, %r306;
	mov.b32 	%f732, %r307;
	mul.f32 	%f733, %f258, %f730;
	mul.f32 	%f734, %f258, %f731;
	mul.f32 	%f735, %f258, %f732;
	fma.rn.f32 	%f960, %f723, %f960, %f733;
	fma.rn.f32 	%f961, %f723, %f961, %f734;
	fma.rn.f32 	%f962, %f723, %f962, %f735;
	add.s64 	%rd252, %rd255, 112;
	// begin inline asm
	cvta.to.global.u64 %rd251, %rd252;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r309,%r310,%r311,%r312}, [%rd251];
	// end inline asm
	mov.b32 	%f736, %r309;
	mov.b32 	%f737, %r310;
	mov.b32 	%f738, %r311;
	mul.f32 	%f739, %f258, %f736;
	mul.f32 	%f740, %f258, %f737;
	mul.f32 	%f741, %f258, %f738;
	fma.rn.f32 	%f957, %f723, %f957, %f739;
	fma.rn.f32 	%f958, %f723, %f958, %f740;
	fma.rn.f32 	%f959, %f723, %f959, %f741;
	bra.uni 	$L__BB3_35;

$L__BB3_24:
	mov.f32 	%f966, 0f00000000;
	mov.f32 	%f968, 0f3F800000;
	setp.eq.s32 	%p16, %r165, 4;
	@%p16 bra 	$L__BB3_27;

	setp.ne.s32 	%p17, %r165, 1;
	mov.f32 	%f967, %f966;
	mov.f32 	%f969, %f966;
	mov.f32 	%f970, %f968;
	mov.f32 	%f971, %f966;
	mov.f32 	%f972, %f968;
	mov.f32 	%f973, %f966;
	mov.f32 	%f974, %f966;
	@%p17 bra 	$L__BB3_36;

	// begin inline asm
	call (%rd139), _optix_get_static_transform_from_handle, (%rd137);
	// end inline asm
	add.s64 	%rd257, %rd139, 64;
	bra.uni 	$L__BB3_28;

$L__BB3_30:
	// begin inline asm
	call (%rd152), _optix_get_srt_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd154, %rd152;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r179,%r180,%r181,%r182}, [%rd154];
	// end inline asm
	add.s64 	%rd158, %rd152, 16;
	// begin inline asm
	cvta.to.global.u64 %rd157, %rd158;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r183,%r184,%r185,%r186}, [%rd157];
	// end inline asm
	add.s64 	%rd161, %rd152, 32;
	// begin inline asm
	cvta.to.global.u64 %rd160, %rd161;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r187,%r188,%r189,%r190}, [%rd160];
	// end inline asm
	add.s64 	%rd164, %rd152, 48;
	// begin inline asm
	cvta.to.global.u64 %rd163, %rd164;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r191,%r192,%r193,%r194}, [%rd163];
	// end inline asm
	add.s64 	%rd167, %rd152, 64;
	// begin inline asm
	cvta.to.global.u64 %rd166, %rd167;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r195,%r196,%r197,%r198}, [%rd166];
	// end inline asm
	add.s64 	%rd170, %rd152, 80;
	// begin inline asm
	cvta.to.global.u64 %rd169, %rd170;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r199,%r200,%r201,%r202}, [%rd169];
	// end inline asm
	add.s64 	%rd173, %rd152, 96;
	// begin inline asm
	cvta.to.global.u64 %rd172, %rd173;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r203,%r204,%r205,%r206}, [%rd172];
	// end inline asm
	add.s64 	%rd176, %rd152, 112;
	// begin inline asm
	cvta.to.global.u64 %rd175, %rd176;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r207,%r208,%r209,%r210}, [%rd175];
	// end inline asm
	add.s64 	%rd179, %rd152, 128;
	// begin inline asm
	cvta.to.global.u64 %rd178, %rd179;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r211,%r212,%r213,%r214}, [%rd178];
	// end inline asm
	add.s64 	%rd182, %rd152, 144;
	// begin inline asm
	cvta.to.global.u64 %rd181, %rd182;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r215,%r216,%r217,%r218}, [%rd181];
	// end inline asm
	mov.b32 	%f613, %r182;
	mov.b32 	%f614, %r183;
	and.b32  	%r235, %r181, 65535;
	add.s32 	%r236, %r235, -1;
	cvt.rn.f32.s32 	%f615, %r236;
	sub.f32 	%f616, %f601, %f613;
	sub.f32 	%f617, %f614, %f613;
	div.approx.f32 	%f618, %f616, %f617;
	mul.f32 	%f619, %f618, %f615;
	min.f32 	%f620, %f615, %f619;
	mov.f32 	%f621, 0f00000000;
	max.f32 	%f622, %f621, %f620;
	setp.num.f32 	%p19, %f622, %f622;
	selp.f32 	%f623, %f622, 0f00000000, %p19;
	cvt.rmi.f32.f32 	%f624, %f623;
	add.f32 	%f625, %f615, 0fBF800000;
	min.f32 	%f626, %f624, %f625;
	sub.f32 	%f218, %f623, %f626;
	cvt.rzi.s32.f32 	%r237, %f626;
	mul.wide.s32 	%rd196, %r237, 64;
	add.s64 	%rd185, %rd161, %rd196;
	// begin inline asm
	cvta.to.global.u64 %rd184, %rd185;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r219,%r220,%r221,%r222}, [%rd184];
	// end inline asm
	mov.b32 	%f947, %r219;
	mov.b32 	%f948, %r220;
	mov.b32 	%f949, %r221;
	add.s64 	%rd188, %rd185, 16;
	// begin inline asm
	cvta.to.global.u64 %rd187, %rd188;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r223,%r224,%r225,%r226}, [%rd187];
	// end inline asm
	mov.b32 	%f950, %r223;
	mov.b32 	%f951, %r224;
	mov.b32 	%f952, %r226;
	add.s64 	%rd191, %rd185, 32;
	// begin inline asm
	cvta.to.global.u64 %rd190, %rd191;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r227,%r228,%r229,%r230}, [%rd190];
	// end inline asm
	mov.b32 	%f953, %r228;
	mov.b32 	%f954, %r229;
	mov.b32 	%f955, %r230;
	add.s64 	%rd194, %rd185, 48;
	// begin inline asm
	cvta.to.global.u64 %rd193, %rd194;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r231,%r232,%r233,%r234}, [%rd193];
	// end inline asm
	mov.b32 	%f956, %r231;
	setp.leu.f32 	%p20, %f218, 0f00000000;
	@%p20 bra 	$L__BB3_32;

	mov.f32 	%f627, 0f3F800000;
	sub.f32 	%f628, %f627, %f218;
	add.s64 	%rd198, %rd185, 64;
	// begin inline asm
	cvta.to.global.u64 %rd197, %rd198;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r238,%r239,%r240,%r241}, [%rd197];
	// end inline asm
	mov.b32 	%f629, %r238;
	mov.b32 	%f630, %r239;
	mov.b32 	%f631, %r240;
	mul.f32 	%f632, %f218, %f629;
	mul.f32 	%f633, %f218, %f630;
	mul.f32 	%f634, %f218, %f631;
	fma.rn.f32 	%f947, %f628, %f947, %f632;
	fma.rn.f32 	%f948, %f628, %f948, %f633;
	fma.rn.f32 	%f949, %f628, %f949, %f634;
	add.s64 	%rd201, %rd185, 80;
	// begin inline asm
	cvta.to.global.u64 %rd200, %rd201;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r242,%r243,%r244,%r245}, [%rd200];
	// end inline asm
	mov.b32 	%f635, %r242;
	mov.b32 	%f636, %r243;
	mov.b32 	%f637, %r245;
	mul.f32 	%f638, %f218, %f635;
	mul.f32 	%f639, %f218, %f636;
	mul.f32 	%f640, %f218, %f637;
	fma.rn.f32 	%f950, %f628, %f950, %f638;
	fma.rn.f32 	%f951, %f628, %f951, %f639;
	fma.rn.f32 	%f952, %f628, %f952, %f640;
	add.s64 	%rd204, %rd185, 96;
	// begin inline asm
	cvta.to.global.u64 %rd203, %rd204;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r246,%r247,%r248,%r249}, [%rd203];
	// end inline asm
	mov.b32 	%f641, %r247;
	mov.b32 	%f642, %r248;
	mov.b32 	%f643, %r249;
	mul.f32 	%f644, %f218, %f641;
	mul.f32 	%f645, %f218, %f642;
	mul.f32 	%f646, %f218, %f643;
	fma.rn.f32 	%f647, %f628, %f953, %f644;
	fma.rn.f32 	%f648, %f628, %f954, %f645;
	fma.rn.f32 	%f649, %f628, %f955, %f646;
	add.s64 	%rd207, %rd185, 112;
	// begin inline asm
	cvta.to.global.u64 %rd206, %rd207;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r250,%r251,%r252,%r253}, [%rd206];
	// end inline asm
	mov.b32 	%f650, %r250;
	mul.f32 	%f651, %f218, %f650;
	fma.rn.f32 	%f652, %f628, %f956, %f651;
	mul.f32 	%f653, %f648, %f648;
	fma.rn.f32 	%f654, %f647, %f647, %f653;
	fma.rn.f32 	%f655, %f649, %f649, %f654;
	fma.rn.f32 	%f656, %f652, %f652, %f655;
	sqrt.rn.f32 	%f657, %f656;
	rcp.rn.f32 	%f658, %f657;
	mul.f32 	%f953, %f647, %f658;
	mul.f32 	%f954, %f648, %f658;
	mul.f32 	%f955, %f649, %f658;
	mul.f32 	%f956, %f658, %f652;

$L__BB3_32:
	mul.f32 	%f659, %f954, %f954;
	fma.rn.f32 	%f660, %f953, %f953, %f659;
	fma.rn.f32 	%f661, %f955, %f955, %f660;
	fma.rn.f32 	%f662, %f956, %f956, %f661;
	rcp.rn.f32 	%f663, %f662;
	mul.f32 	%f664, %f953, %f663;
	mul.f32 	%f665, %f954, %f663;
	mul.f32 	%f666, %f955, %f663;
	mul.f32 	%f667, %f956, %f663;
	mul.f32 	%f668, %f953, %f664;
	mul.f32 	%f669, %f954, %f665;
	mul.f32 	%f670, %f955, %f666;
	mul.f32 	%f671, %f953, %f665;
	mul.f32 	%f672, %f955, %f667;
	mul.f32 	%f673, %f953, %f666;
	mul.f32 	%f674, %f954, %f667;
	mul.f32 	%f675, %f954, %f666;
	mul.f32 	%f676, %f953, %f667;
	sub.f32 	%f677, %f668, %f669;
	sub.f32 	%f678, %f677, %f670;
	fma.rn.f32 	%f679, %f956, %f667, %f678;
	sub.f32 	%f680, %f671, %f672;
	add.f32 	%f681, %f680, %f680;
	add.f32 	%f682, %f673, %f674;
	add.f32 	%f683, %f682, %f682;
	add.f32 	%f684, %f671, %f672;
	add.f32 	%f685, %f684, %f684;
	sub.f32 	%f686, %f669, %f668;
	sub.f32 	%f687, %f686, %f670;
	fma.rn.f32 	%f688, %f956, %f667, %f687;
	sub.f32 	%f689, %f675, %f676;
	add.f32 	%f690, %f689, %f689;
	sub.f32 	%f691, %f673, %f674;
	add.f32 	%f692, %f691, %f691;
	add.f32 	%f693, %f675, %f676;
	add.f32 	%f694, %f693, %f693;
	neg.f32 	%f695, %f668;
	sub.f32 	%f696, %f695, %f669;
	add.f32 	%f697, %f670, %f696;
	fma.rn.f32 	%f698, %f956, %f667, %f697;
	mul.f32 	%f699, %f949, %f679;
	fma.rn.f32 	%f700, %f951, %f681, %f699;
	fma.rn.f32 	%f965, %f952, %f683, %f700;
	mul.f32 	%f701, %f951, %f688;
	fma.rn.f32 	%f702, %f949, %f685, %f701;
	fma.rn.f32 	%f962, %f952, %f690, %f702;
	mul.f32 	%f703, %f951, %f694;
	fma.rn.f32 	%f704, %f949, %f692, %f703;
	fma.rn.f32 	%f959, %f952, %f698, %f704;
	mul.f32 	%f705, %f948, %f679;
	fma.rn.f32 	%f964, %f950, %f681, %f705;
	mul.f32 	%f706, %f950, %f688;
	fma.rn.f32 	%f961, %f948, %f685, %f706;
	mul.f32 	%f707, %f950, %f694;
	fma.rn.f32 	%f958, %f948, %f692, %f707;
	mul.f32 	%f963, %f947, %f679;
	mul.f32 	%f960, %f947, %f685;
	mul.f32 	%f957, %f947, %f692;

$L__BB3_35:
	mul.f32 	%f742, %f958, %f962;
	mul.f32 	%f743, %f959, %f961;
	sub.f32 	%f744, %f743, %f742;
	mul.f32 	%f745, %f963, %f744;
	mul.f32 	%f746, %f957, %f962;
	mul.f32 	%f747, %f959, %f960;
	sub.f32 	%f748, %f747, %f746;
	mul.f32 	%f749, %f748, %f964;
	sub.f32 	%f750, %f745, %f749;
	mul.f32 	%f751, %f957, %f961;
	mul.f32 	%f752, %f958, %f960;
	sub.f32 	%f753, %f752, %f751;
	fma.rn.f32 	%f754, %f753, %f965, %f750;
	rcp.rn.f32 	%f755, %f754;
	mul.f32 	%f972, %f744, %f755;
	mul.f32 	%f756, %f959, %f964;
	mul.f32 	%f757, %f958, %f965;
	sub.f32 	%f758, %f757, %f756;
	mul.f32 	%f973, %f758, %f755;
	mul.f32 	%f759, %f961, %f965;
	mul.f32 	%f760, %f962, %f964;
	sub.f32 	%f761, %f760, %f759;
	mul.f32 	%f974, %f761, %f755;
	sub.f32 	%f762, %f746, %f747;
	mul.f32 	%f969, %f762, %f755;
	mul.f32 	%f763, %f957, %f965;
	mul.f32 	%f764, %f959, %f963;
	sub.f32 	%f765, %f764, %f763;
	mul.f32 	%f970, %f765, %f755;
	mul.f32 	%f766, %f962, %f963;
	mul.f32 	%f767, %f960, %f965;
	sub.f32 	%f768, %f767, %f766;
	mul.f32 	%f971, %f768, %f755;
	mul.f32 	%f966, %f753, %f755;
	mul.f32 	%f769, %f958, %f963;
	mul.f32 	%f770, %f957, %f964;
	sub.f32 	%f771, %f770, %f769;
	mul.f32 	%f967, %f771, %f755;
	mul.f32 	%f772, %f960, %f964;
	mul.f32 	%f773, %f961, %f963;
	sub.f32 	%f774, %f773, %f772;
	mul.f32 	%f968, %f774, %f755;
	bra.uni 	$L__BB3_36;

$L__BB3_27:
	// begin inline asm
	call (%rd257), _optix_get_instance_inverse_transform_from_handle, (%rd137);
	// end inline asm

$L__BB3_28:
	// begin inline asm
	cvta.to.global.u64 %rd143, %rd257;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r167,%r168,%r169,%r170}, [%rd143];
	// end inline asm
	mov.b32 	%f972, %r167;
	mov.b32 	%f973, %r168;
	mov.b32 	%f974, %r169;
	add.s64 	%rd147, %rd257, 16;
	// begin inline asm
	cvta.to.global.u64 %rd146, %rd147;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r171,%r172,%r173,%r174}, [%rd146];
	// end inline asm
	mov.b32 	%f969, %r171;
	mov.b32 	%f970, %r172;
	mov.b32 	%f971, %r173;
	add.s64 	%rd150, %rd257, 32;
	// begin inline asm
	cvta.to.global.u64 %rd149, %rd150;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r175,%r176,%r177,%r178}, [%rd149];
	// end inline asm
	mov.b32 	%f966, %r175;
	mov.b32 	%f967, %r176;
	mov.b32 	%f968, %r177;

$L__BB3_36:
	setp.eq.s32 	%p23, %r329, 0;
	@%p23 bra 	$L__BB3_38;

	mul.f32 	%f775, %f943, %f973;
	fma.rn.f32 	%f776, %f940, %f972, %f775;
	fma.rn.f32 	%f304, %f946, %f974, %f776;
	mul.f32 	%f777, %f942, %f973;
	fma.rn.f32 	%f778, %f939, %f972, %f777;
	fma.rn.f32 	%f305, %f945, %f974, %f778;
	mul.f32 	%f779, %f941, %f973;
	fma.rn.f32 	%f780, %f938, %f972, %f779;
	fma.rn.f32 	%f974, %f944, %f974, %f780;
	mul.f32 	%f781, %f943, %f970;
	fma.rn.f32 	%f782, %f940, %f969, %f781;
	fma.rn.f32 	%f307, %f946, %f971, %f782;
	mul.f32 	%f783, %f942, %f970;
	fma.rn.f32 	%f784, %f939, %f969, %f783;
	fma.rn.f32 	%f308, %f945, %f971, %f784;
	mul.f32 	%f785, %f941, %f970;
	fma.rn.f32 	%f786, %f938, %f969, %f785;
	fma.rn.f32 	%f971, %f944, %f971, %f786;
	mul.f32 	%f787, %f943, %f967;
	fma.rn.f32 	%f788, %f940, %f966, %f787;
	fma.rn.f32 	%f310, %f946, %f968, %f788;
	mul.f32 	%f789, %f942, %f967;
	fma.rn.f32 	%f790, %f939, %f966, %f789;
	fma.rn.f32 	%f311, %f945, %f968, %f790;
	mul.f32 	%f791, %f941, %f967;
	fma.rn.f32 	%f792, %f938, %f966, %f791;
	fma.rn.f32 	%f968, %f944, %f968, %f792;
	mov.f32 	%f966, %f310;
	mov.f32 	%f967, %f311;
	mov.f32 	%f969, %f307;
	mov.f32 	%f970, %f308;
	mov.f32 	%f972, %f304;
	mov.f32 	%f973, %f305;

$L__BB3_38:
	add.s32 	%r329, %r329, 1;
	setp.lt.u32 	%p24, %r329, %r162;
	mov.f32 	%f938, %f974;
	mov.f32 	%f939, %f973;
	mov.f32 	%f940, %f972;
	mov.f32 	%f941, %f971;
	mov.f32 	%f942, %f970;
	mov.f32 	%f943, %f969;
	mov.f32 	%f944, %f968;
	mov.f32 	%f945, %f967;
	mov.f32 	%f946, %f966;
	@%p24 bra 	$L__BB3_23;

$L__BB3_39:
	mul.f32 	%f793, %f994, %f973;
	fma.rn.f32 	%f794, %f993, %f972, %f793;
	mul.f32 	%f795, %f994, %f970;
	fma.rn.f32 	%f796, %f993, %f969, %f795;
	mul.f32 	%f797, %f994, %f967;
	fma.rn.f32 	%f798, %f993, %f966, %f797;
	fma.rn.f32 	%f995, %f600, %f968, %f798;
	fma.rn.f32 	%f994, %f600, %f971, %f796;
	fma.rn.f32 	%f993, %f600, %f974, %f794;
	bra.uni 	$L__BB3_41;

$L__BB3_40:
	mov.f32 	%f995, %f600;

$L__BB3_41:
	// begin inline asm
	call (%f799), _optix_get_ray_tmin, ();
	// end inline asm
	fma.rn.f32 	%f802, %f993, %f799, %f935;
	fma.rn.f32 	%f803, %f994, %f799, %f936;
	fma.rn.f32 	%f804, %f995, %f799, %f937;
	ld.v4.f32 	{%f805, %f806, %f807, %f808}, [%rd2+32];
	mov.u32 	%r320, 0;
	mov.u32 	%r315, 1;
	mov.u32 	%r317, 2;
	mov.u32 	%r319, 3;
	mul.f32 	%f813, %f805, %f802;
	fma.rn.f32 	%f814, %f806, %f803, %f813;
	fma.rn.f32 	%f815, %f807, %f804, %f814;
	mov.f32 	%f816, 0f3F800000;
	fma.rn.f32 	%f817, %f808, %f816, %f815;
	ld.v4.f32 	{%f818, %f819, %f820, %f821}, [%rd2+48];
	mul.f32 	%f826, %f818, %f802;
	fma.rn.f32 	%f827, %f819, %f803, %f826;
	fma.rn.f32 	%f828, %f820, %f804, %f827;
	fma.rn.f32 	%f829, %f821, %f816, %f828;
	ld.v4.f32 	{%f830, %f831, %f832, %f833}, [%rd2+64];
	mul.f32 	%f838, %f830, %f802;
	fma.rn.f32 	%f839, %f831, %f803, %f838;
	fma.rn.f32 	%f840, %f832, %f804, %f839;
	fma.rn.f32 	%f841, %f833, %f816, %f840;
	mul.f32 	%f842, %f805, %f993;
	fma.rn.f32 	%f843, %f806, %f994, %f842;
	fma.rn.f32 	%f844, %f807, %f995, %f843;
	mov.f32 	%f845, 0f00000000;
	fma.rn.f32 	%f846, %f808, %f845, %f844;
	mul.f32 	%f847, %f818, %f993;
	fma.rn.f32 	%f848, %f819, %f994, %f847;
	fma.rn.f32 	%f849, %f820, %f995, %f848;
	fma.rn.f32 	%f850, %f821, %f845, %f849;
	mul.f32 	%f851, %f830, %f993;
	fma.rn.f32 	%f852, %f831, %f994, %f851;
	fma.rn.f32 	%f853, %f832, %f995, %f852;
	fma.rn.f32 	%f854, %f833, %f845, %f853;
	neg.f32 	%f855, %f841;
	div.rn.f32 	%f856, %f855, %f854;
	fma.rn.f32 	%f857, %f856, %f846, %f817;
	fma.rn.f32 	%f858, %f856, %f850, %f829;
	ld.u32 	%r322, [%rd17];
	mov.b32 	%r314, %f856;
	// begin inline asm
	call _optix_set_payload, (%r320, %r314);
	// end inline asm
	mov.b32 	%r316, %f857;
	// begin inline asm
	call _optix_set_payload, (%r315, %r316);
	// end inline asm
	mov.b32 	%r318, %f858;
	// begin inline asm
	call _optix_set_payload, (%r317, %r318);
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r319, %r320);
	// end inline asm
	mov.u32 	%r321, 4;
	// begin inline asm
	call _optix_set_payload, (%r321, %r322);
	// end inline asm
	mov.u32 	%r324, 5;
	// begin inline asm
	call (%r323), _optix_get_payload, (%r324);
	// end inline asm
	setp.eq.s32 	%p25, %r323, 0;
	@%p25 bra 	$L__BB3_43;

	// begin inline asm
	call (%r325), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r324, %r325);
	// end inline asm

$L__BB3_43:
	ret;

}
	// .globl	__closesthit__mesh
.visible .entry __closesthit__mesh()
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<2>;


	// begin inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	// begin inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// end inline asm
	// begin inline asm
	call (%f1), _optix_get_ray_tmax, ();
	// end inline asm
	// begin inline asm
	call (%f2, %f3), _optix_get_triangle_barycentrics, ();
	// end inline asm
	ld.u32 	%r11, [%rd1];
	mov.b32 	%r3, %f1;
	mov.u32 	%r2, 0;
	// begin inline asm
	call _optix_set_payload, (%r2, %r3);
	// end inline asm
	mov.b32 	%r5, %f2;
	mov.u32 	%r4, 1;
	// begin inline asm
	call _optix_set_payload, (%r4, %r5);
	// end inline asm
	mov.b32 	%r7, %f3;
	mov.u32 	%r6, 2;
	// begin inline asm
	call _optix_set_payload, (%r6, %r7);
	// end inline asm
	mov.u32 	%r8, 3;
	// begin inline asm
	call _optix_set_payload, (%r8, %r1);
	// end inline asm
	mov.u32 	%r10, 4;
	// begin inline asm
	call _optix_set_payload, (%r10, %r11);
	// end inline asm
	mov.u32 	%r13, 5;
	// begin inline asm
	call (%r12), _optix_get_payload, (%r13);
	// end inline asm
	setp.eq.s32 	%p1, %r12, 0;
	@%p1 bra 	$L__BB4_2;

	// begin inline asm
	call (%r14), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r13, %r14);
	// end inline asm

$L__BB4_2:
	ret;

}
	// .globl	__intersection__rectangle
.visible .entry __intersection__rectangle()
{
	.reg .pred 	%p<27>;
	.reg .f32 	%f<999>;
	.reg .b32 	%r<317>;
	.reg .b64 	%rd<257>;


	// begin inline asm
	call (%rd16), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u64 	%rd1, [%rd16+8];
	// begin inline asm
	call (%f938), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f939), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f940), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%r9), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p1, %r9, 0;
	@%p1 bra 	$L__BB5_20;

	// begin inline asm
	call (%r10), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f345), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p2, %r10, 0;
	@%p2 bra 	$L__BB5_19;

	mov.u32 	%r315, 0;

$L__BB5_3:
	.pragma "nounroll";
	// begin inline asm
	call (%rd17), _optix_get_transform_list_handle, (%r315);
	// end inline asm
	// begin inline asm
	call (%r13), _optix_get_transform_type_from_handle, (%rd17);
	// end inline asm
	or.b32  	%r14, %r13, 1;
	setp.eq.s32 	%p3, %r14, 3;
	@%p3 bra 	$L__BB5_9;
	bra.uni 	$L__BB5_4;

$L__BB5_9:
	setp.eq.s32 	%p6, %r13, 2;
	@%p6 bra 	$L__BB5_13;
	bra.uni 	$L__BB5_10;

$L__BB5_13:
	// begin inline asm
	call (%rd89), _optix_get_matrix_motion_transform_from_handle, (%rd17);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd91, %rd89;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r102,%r103,%r104,%r105}, [%rd91];
	// end inline asm
	add.s64 	%rd95, %rd89, 16;
	// begin inline asm
	cvta.to.global.u64 %rd94, %rd95;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r106,%r107,%r108,%r109}, [%rd94];
	// end inline asm
	add.s64 	%rd98, %rd89, 32;
	// begin inline asm
	cvta.to.global.u64 %rd97, %rd98;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r110,%r111,%r112,%r113}, [%rd97];
	// end inline asm
	add.s64 	%rd101, %rd89, 48;
	// begin inline asm
	cvta.to.global.u64 %rd100, %rd101;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r114,%r115,%r116,%r117}, [%rd100];
	// end inline asm
	add.s64 	%rd104, %rd89, 64;
	// begin inline asm
	cvta.to.global.u64 %rd103, %rd104;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd103];
	// end inline asm
	add.s64 	%rd107, %rd89, 80;
	// begin inline asm
	cvta.to.global.u64 %rd106, %rd107;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd106];
	// end inline asm
	add.s64 	%rd110, %rd89, 96;
	// begin inline asm
	cvta.to.global.u64 %rd109, %rd110;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd109];
	// end inline asm
	add.s64 	%rd113, %rd89, 112;
	// begin inline asm
	cvta.to.global.u64 %rd112, %rd113;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd112];
	// end inline asm
	mov.b32 	%f476, %r105;
	mov.b32 	%f477, %r106;
	and.b32  	%r146, %r104, 65535;
	add.s32 	%r147, %r146, -1;
	cvt.rn.f32.s32 	%f478, %r147;
	sub.f32 	%f479, %f345, %f476;
	sub.f32 	%f480, %f477, %f476;
	div.approx.f32 	%f481, %f479, %f480;
	mul.f32 	%f482, %f481, %f478;
	min.f32 	%f483, %f478, %f482;
	mov.f32 	%f484, 0f00000000;
	max.f32 	%f485, %f484, %f483;
	setp.num.f32 	%p9, %f485, %f485;
	selp.f32 	%f486, %f485, 0f00000000, %p9;
	cvt.rmi.f32.f32 	%f487, %f486;
	add.f32 	%f488, %f478, 0fBF800000;
	min.f32 	%f489, %f487, %f488;
	sub.f32 	%f90, %f486, %f489;
	cvt.rzi.s32.f32 	%r148, %f489;
	cvt.s64.s32 	%rd8, %r148;
	mul.wide.s32 	%rd124, %r148, 48;
	add.s64 	%rd116, %rd98, %rd124;
	// begin inline asm
	cvta.to.global.u64 %rd115, %rd116;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd115];
	// end inline asm
	mov.b32 	%f893, %r134;
	mov.b32 	%f892, %r135;
	mov.b32 	%f891, %r136;
	mov.b32 	%f890, %r137;
	add.s64 	%rd119, %rd116, 16;
	// begin inline asm
	cvta.to.global.u64 %rd118, %rd119;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd118];
	// end inline asm
	mov.b32 	%f897, %r138;
	mov.b32 	%f896, %r139;
	mov.b32 	%f895, %r140;
	mov.b32 	%f894, %r141;
	add.s64 	%rd122, %rd116, 32;
	// begin inline asm
	cvta.to.global.u64 %rd121, %rd122;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd121];
	// end inline asm
	mov.b32 	%f901, %r142;
	mov.b32 	%f900, %r143;
	mov.b32 	%f899, %r144;
	mov.b32 	%f898, %r145;
	setp.leu.f32 	%p10, %f90, 0f00000000;
	@%p10 bra 	$L__BB5_15;

	mov.f32 	%f490, 0f3F800000;
	sub.f32 	%f491, %f490, %f90;
	mul.lo.s64 	%rd134, %rd8, 48;
	add.s64 	%rd135, %rd89, %rd134;
	add.s64 	%rd126, %rd135, 80;
	// begin inline asm
	cvta.to.global.u64 %rd125, %rd126;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r149,%r150,%r151,%r152}, [%rd125];
	// end inline asm
	mov.b32 	%f492, %r149;
	mov.b32 	%f493, %r150;
	mov.b32 	%f494, %r151;
	mov.b32 	%f495, %r152;
	mul.f32 	%f496, %f90, %f492;
	mul.f32 	%f497, %f90, %f493;
	mul.f32 	%f498, %f90, %f494;
	mul.f32 	%f499, %f90, %f495;
	fma.rn.f32 	%f893, %f491, %f893, %f496;
	fma.rn.f32 	%f892, %f491, %f892, %f497;
	fma.rn.f32 	%f891, %f491, %f891, %f498;
	fma.rn.f32 	%f890, %f491, %f890, %f499;
	add.s64 	%rd129, %rd135, 96;
	// begin inline asm
	cvta.to.global.u64 %rd128, %rd129;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r153,%r154,%r155,%r156}, [%rd128];
	// end inline asm
	mov.b32 	%f500, %r153;
	mov.b32 	%f501, %r154;
	mov.b32 	%f502, %r155;
	mov.b32 	%f503, %r156;
	mul.f32 	%f504, %f90, %f500;
	mul.f32 	%f505, %f90, %f501;
	mul.f32 	%f506, %f90, %f502;
	mul.f32 	%f507, %f90, %f503;
	fma.rn.f32 	%f897, %f491, %f897, %f504;
	fma.rn.f32 	%f896, %f491, %f896, %f505;
	fma.rn.f32 	%f895, %f491, %f895, %f506;
	fma.rn.f32 	%f894, %f491, %f894, %f507;
	add.s64 	%rd132, %rd135, 112;
	// begin inline asm
	cvta.to.global.u64 %rd131, %rd132;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r157,%r158,%r159,%r160}, [%rd131];
	// end inline asm
	mov.b32 	%f508, %r157;
	mov.b32 	%f509, %r158;
	mov.b32 	%f510, %r159;
	mov.b32 	%f511, %r160;
	mul.f32 	%f512, %f90, %f508;
	mul.f32 	%f513, %f90, %f509;
	mul.f32 	%f514, %f90, %f510;
	mul.f32 	%f515, %f90, %f511;
	fma.rn.f32 	%f901, %f491, %f901, %f512;
	fma.rn.f32 	%f900, %f491, %f900, %f513;
	fma.rn.f32 	%f899, %f491, %f899, %f514;
	fma.rn.f32 	%f898, %f491, %f898, %f515;
	bra.uni 	$L__BB5_15;

$L__BB5_4:
	mov.f32 	%f902, 0f00000000;
	mov.f32 	%f905, 0f3F800000;
	setp.eq.s32 	%p4, %r13, 4;
	@%p4 bra 	$L__BB5_7;

	setp.ne.s32 	%p5, %r13, 1;
	mov.f32 	%f903, %f902;
	mov.f32 	%f904, %f902;
	mov.f32 	%f906, %f902;
	mov.f32 	%f907, %f902;
	mov.f32 	%f908, %f905;
	mov.f32 	%f909, %f902;
	mov.f32 	%f910, %f902;
	mov.f32 	%f911, %f905;
	mov.f32 	%f912, %f902;
	mov.f32 	%f913, %f902;
	@%p5 bra 	$L__BB5_16;

	// begin inline asm
	call (%rd19), _optix_get_static_transform_from_handle, (%rd17);
	// end inline asm
	add.s64 	%rd255, %rd19, 64;
	bra.uni 	$L__BB5_8;

$L__BB5_10:
	// begin inline asm
	call (%rd32), _optix_get_srt_motion_transform_from_handle, (%rd17);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd34, %rd32;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r27,%r28,%r29,%r30}, [%rd34];
	// end inline asm
	add.s64 	%rd38, %rd32, 16;
	// begin inline asm
	cvta.to.global.u64 %rd37, %rd38;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r31,%r32,%r33,%r34}, [%rd37];
	// end inline asm
	add.s64 	%rd41, %rd32, 32;
	// begin inline asm
	cvta.to.global.u64 %rd40, %rd41;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r35,%r36,%r37,%r38}, [%rd40];
	// end inline asm
	add.s64 	%rd44, %rd32, 48;
	// begin inline asm
	cvta.to.global.u64 %rd43, %rd44;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r39,%r40,%r41,%r42}, [%rd43];
	// end inline asm
	add.s64 	%rd47, %rd32, 64;
	// begin inline asm
	cvta.to.global.u64 %rd46, %rd47;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r43,%r44,%r45,%r46}, [%rd46];
	// end inline asm
	add.s64 	%rd50, %rd32, 80;
	// begin inline asm
	cvta.to.global.u64 %rd49, %rd50;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd49];
	// end inline asm
	add.s64 	%rd53, %rd32, 96;
	// begin inline asm
	cvta.to.global.u64 %rd52, %rd53;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd52];
	// end inline asm
	add.s64 	%rd56, %rd32, 112;
	// begin inline asm
	cvta.to.global.u64 %rd55, %rd56;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd55];
	// end inline asm
	add.s64 	%rd59, %rd32, 128;
	// begin inline asm
	cvta.to.global.u64 %rd58, %rd59;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd58];
	// end inline asm
	add.s64 	%rd62, %rd32, 144;
	// begin inline asm
	cvta.to.global.u64 %rd61, %rd62;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd61];
	// end inline asm
	mov.b32 	%f360, %r30;
	mov.b32 	%f361, %r31;
	and.b32  	%r83, %r29, 65535;
	add.s32 	%r84, %r83, -1;
	cvt.rn.f32.s32 	%f362, %r84;
	sub.f32 	%f363, %f345, %f360;
	sub.f32 	%f364, %f361, %f360;
	div.approx.f32 	%f365, %f363, %f364;
	mul.f32 	%f366, %f365, %f362;
	min.f32 	%f367, %f362, %f366;
	mov.f32 	%f368, 0f00000000;
	max.f32 	%f369, %f368, %f367;
	setp.num.f32 	%p7, %f369, %f369;
	selp.f32 	%f370, %f369, 0f00000000, %p7;
	cvt.rmi.f32.f32 	%f371, %f370;
	add.f32 	%f372, %f362, 0fBF800000;
	min.f32 	%f373, %f371, %f372;
	sub.f32 	%f29, %f370, %f373;
	cvt.rzi.s32.f32 	%r85, %f373;
	mul.wide.s32 	%rd76, %r85, 64;
	add.s64 	%rd65, %rd41, %rd76;
	// begin inline asm
	cvta.to.global.u64 %rd64, %rd65;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd64];
	// end inline asm
	mov.b32 	%f874, %r67;
	mov.b32 	%f875, %r68;
	mov.b32 	%f876, %r69;
	mov.b32 	%f877, %r70;
	add.s64 	%rd68, %rd65, 16;
	// begin inline asm
	cvta.to.global.u64 %rd67, %rd68;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd67];
	// end inline asm
	mov.b32 	%f878, %r71;
	mov.b32 	%f879, %r72;
	mov.b32 	%f880, %r73;
	mov.b32 	%f881, %r74;
	add.s64 	%rd71, %rd65, 32;
	// begin inline asm
	cvta.to.global.u64 %rd70, %rd71;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd70];
	// end inline asm
	mov.b32 	%f882, %r75;
	mov.b32 	%f883, %r76;
	mov.b32 	%f884, %r77;
	mov.b32 	%f885, %r78;
	add.s64 	%rd74, %rd65, 48;
	// begin inline asm
	cvta.to.global.u64 %rd73, %rd74;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd73];
	// end inline asm
	mov.b32 	%f886, %r79;
	mov.b32 	%f887, %r80;
	mov.b32 	%f888, %r81;
	mov.b32 	%f889, %r82;
	setp.leu.f32 	%p8, %f29, 0f00000000;
	@%p8 bra 	$L__BB5_12;

	mov.f32 	%f374, 0f3F800000;
	sub.f32 	%f375, %f374, %f29;
	add.s64 	%rd78, %rd65, 64;
	// begin inline asm
	cvta.to.global.u64 %rd77, %rd78;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r86,%r87,%r88,%r89}, [%rd77];
	// end inline asm
	mov.b32 	%f376, %r86;
	mov.b32 	%f377, %r87;
	mov.b32 	%f378, %r88;
	mov.b32 	%f379, %r89;
	mul.f32 	%f380, %f29, %f376;
	mul.f32 	%f381, %f29, %f377;
	mul.f32 	%f382, %f29, %f378;
	mul.f32 	%f383, %f29, %f379;
	fma.rn.f32 	%f874, %f375, %f874, %f380;
	fma.rn.f32 	%f875, %f375, %f875, %f381;
	fma.rn.f32 	%f876, %f375, %f876, %f382;
	fma.rn.f32 	%f877, %f375, %f877, %f383;
	add.s64 	%rd81, %rd65, 80;
	// begin inline asm
	cvta.to.global.u64 %rd80, %rd81;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r90,%r91,%r92,%r93}, [%rd80];
	// end inline asm
	mov.b32 	%f384, %r90;
	mov.b32 	%f385, %r91;
	mov.b32 	%f386, %r92;
	mov.b32 	%f387, %r93;
	mul.f32 	%f388, %f29, %f384;
	mul.f32 	%f389, %f29, %f385;
	mul.f32 	%f390, %f29, %f386;
	mul.f32 	%f391, %f29, %f387;
	fma.rn.f32 	%f878, %f375, %f878, %f388;
	fma.rn.f32 	%f879, %f375, %f879, %f389;
	fma.rn.f32 	%f880, %f375, %f880, %f390;
	fma.rn.f32 	%f881, %f375, %f881, %f391;
	add.s64 	%rd84, %rd65, 96;
	// begin inline asm
	cvta.to.global.u64 %rd83, %rd84;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r94,%r95,%r96,%r97}, [%rd83];
	// end inline asm
	mov.b32 	%f392, %r94;
	mov.b32 	%f393, %r95;
	mov.b32 	%f394, %r96;
	mov.b32 	%f395, %r97;
	mul.f32 	%f396, %f29, %f392;
	mul.f32 	%f397, %f29, %f393;
	mul.f32 	%f398, %f29, %f394;
	mul.f32 	%f399, %f29, %f395;
	fma.rn.f32 	%f882, %f375, %f882, %f396;
	fma.rn.f32 	%f400, %f375, %f883, %f397;
	fma.rn.f32 	%f401, %f375, %f884, %f398;
	fma.rn.f32 	%f402, %f375, %f885, %f399;
	add.s64 	%rd87, %rd65, 112;
	// begin inline asm
	cvta.to.global.u64 %rd86, %rd87;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r98,%r99,%r100,%r101}, [%rd86];
	// end inline asm
	mov.b32 	%f403, %r98;
	mov.b32 	%f404, %r99;
	mov.b32 	%f405, %r100;
	mov.b32 	%f406, %r101;
	mul.f32 	%f407, %f29, %f403;
	mul.f32 	%f408, %f29, %f404;
	mul.f32 	%f409, %f29, %f405;
	mul.f32 	%f410, %f29, %f406;
	fma.rn.f32 	%f411, %f375, %f886, %f407;
	fma.rn.f32 	%f887, %f375, %f887, %f408;
	fma.rn.f32 	%f888, %f375, %f888, %f409;
	fma.rn.f32 	%f889, %f375, %f889, %f410;
	mul.f32 	%f412, %f401, %f401;
	fma.rn.f32 	%f413, %f400, %f400, %f412;
	fma.rn.f32 	%f414, %f402, %f402, %f413;
	fma.rn.f32 	%f415, %f411, %f411, %f414;
	sqrt.rn.f32 	%f416, %f415;
	rcp.rn.f32 	%f417, %f416;
	mul.f32 	%f883, %f400, %f417;
	mul.f32 	%f884, %f401, %f417;
	mul.f32 	%f885, %f402, %f417;
	mul.f32 	%f886, %f417, %f411;

$L__BB5_12:
	mul.f32 	%f418, %f884, %f884;
	fma.rn.f32 	%f419, %f883, %f883, %f418;
	fma.rn.f32 	%f420, %f885, %f885, %f419;
	fma.rn.f32 	%f421, %f886, %f886, %f420;
	rcp.rn.f32 	%f422, %f421;
	mul.f32 	%f423, %f883, %f422;
	mul.f32 	%f424, %f884, %f422;
	mul.f32 	%f425, %f885, %f422;
	mul.f32 	%f426, %f886, %f422;
	mul.f32 	%f427, %f883, %f423;
	mul.f32 	%f428, %f884, %f424;
	mul.f32 	%f429, %f885, %f425;
	mul.f32 	%f430, %f883, %f424;
	mul.f32 	%f431, %f885, %f426;
	mul.f32 	%f432, %f883, %f425;
	mul.f32 	%f433, %f884, %f426;
	mul.f32 	%f434, %f884, %f425;
	mul.f32 	%f435, %f883, %f426;
	sub.f32 	%f436, %f427, %f428;
	sub.f32 	%f437, %f436, %f429;
	fma.rn.f32 	%f438, %f886, %f426, %f437;
	sub.f32 	%f439, %f430, %f431;
	add.f32 	%f440, %f439, %f439;
	add.f32 	%f441, %f432, %f433;
	add.f32 	%f442, %f441, %f441;
	add.f32 	%f443, %f430, %f431;
	add.f32 	%f444, %f443, %f443;
	sub.f32 	%f445, %f428, %f427;
	sub.f32 	%f446, %f445, %f429;
	fma.rn.f32 	%f447, %f886, %f426, %f446;
	sub.f32 	%f448, %f434, %f435;
	add.f32 	%f449, %f448, %f448;
	sub.f32 	%f450, %f432, %f433;
	add.f32 	%f451, %f450, %f450;
	add.f32 	%f452, %f434, %f435;
	add.f32 	%f453, %f452, %f452;
	neg.f32 	%f454, %f427;
	sub.f32 	%f455, %f454, %f428;
	add.f32 	%f456, %f429, %f455;
	fma.rn.f32 	%f457, %f886, %f426, %f456;
	mul.f32 	%f458, %f877, %f438;
	fma.rn.f32 	%f459, %f880, %f440, %f458;
	fma.rn.f32 	%f460, %f882, %f442, %f459;
	add.f32 	%f890, %f887, %f460;
	mul.f32 	%f461, %f880, %f447;
	fma.rn.f32 	%f462, %f877, %f444, %f461;
	fma.rn.f32 	%f463, %f882, %f449, %f462;
	add.f32 	%f894, %f888, %f463;
	mul.f32 	%f464, %f880, %f453;
	fma.rn.f32 	%f465, %f877, %f451, %f464;
	fma.rn.f32 	%f466, %f882, %f457, %f465;
	add.f32 	%f898, %f889, %f466;
	mul.f32 	%f467, %f876, %f438;
	fma.rn.f32 	%f468, %f879, %f440, %f467;
	fma.rn.f32 	%f891, %f881, %f442, %f468;
	mul.f32 	%f469, %f879, %f447;
	fma.rn.f32 	%f470, %f876, %f444, %f469;
	fma.rn.f32 	%f895, %f881, %f449, %f470;
	mul.f32 	%f471, %f879, %f453;
	fma.rn.f32 	%f472, %f876, %f451, %f471;
	fma.rn.f32 	%f899, %f881, %f457, %f472;
	mul.f32 	%f473, %f875, %f438;
	fma.rn.f32 	%f892, %f878, %f440, %f473;
	mul.f32 	%f474, %f878, %f447;
	fma.rn.f32 	%f896, %f875, %f444, %f474;
	mul.f32 	%f475, %f878, %f453;
	fma.rn.f32 	%f900, %f875, %f451, %f475;
	mul.f32 	%f893, %f874, %f438;
	mul.f32 	%f897, %f874, %f444;
	mul.f32 	%f901, %f874, %f451;

$L__BB5_15:
	mul.f32 	%f516, %f895, %f900;
	mul.f32 	%f517, %f896, %f899;
	sub.f32 	%f518, %f517, %f516;
	mul.f32 	%f519, %f893, %f518;
	mul.f32 	%f520, %f895, %f901;
	mul.f32 	%f521, %f897, %f899;
	sub.f32 	%f522, %f521, %f520;
	mul.f32 	%f523, %f892, %f522;
	sub.f32 	%f524, %f519, %f523;
	mul.f32 	%f525, %f896, %f901;
	mul.f32 	%f526, %f897, %f900;
	sub.f32 	%f527, %f526, %f525;
	fma.rn.f32 	%f528, %f891, %f527, %f524;
	rcp.rn.f32 	%f529, %f528;
	mul.f32 	%f905, %f518, %f529;
	mul.f32 	%f530, %f892, %f899;
	mul.f32 	%f531, %f891, %f900;
	sub.f32 	%f532, %f531, %f530;
	mul.f32 	%f904, %f532, %f529;
	mul.f32 	%f533, %f891, %f896;
	mul.f32 	%f534, %f892, %f895;
	sub.f32 	%f535, %f534, %f533;
	mul.f32 	%f903, %f535, %f529;
	sub.f32 	%f536, %f520, %f521;
	mul.f32 	%f909, %f536, %f529;
	mul.f32 	%f537, %f891, %f901;
	mul.f32 	%f538, %f893, %f899;
	sub.f32 	%f539, %f538, %f537;
	mul.f32 	%f908, %f539, %f529;
	mul.f32 	%f540, %f893, %f895;
	mul.f32 	%f541, %f891, %f897;
	sub.f32 	%f542, %f541, %f540;
	mul.f32 	%f907, %f542, %f529;
	mul.f32 	%f913, %f527, %f529;
	mul.f32 	%f543, %f893, %f900;
	mul.f32 	%f544, %f892, %f901;
	sub.f32 	%f545, %f544, %f543;
	mul.f32 	%f912, %f545, %f529;
	mul.f32 	%f546, %f892, %f897;
	mul.f32 	%f547, %f893, %f896;
	sub.f32 	%f548, %f547, %f546;
	mul.f32 	%f911, %f548, %f529;
	mul.f32 	%f549, %f890, %f905;
	neg.f32 	%f550, %f549;
	mul.f32 	%f551, %f894, %f904;
	sub.f32 	%f552, %f550, %f551;
	mul.f32 	%f553, %f898, %f903;
	sub.f32 	%f902, %f552, %f553;
	mul.f32 	%f554, %f890, %f909;
	neg.f32 	%f555, %f554;
	mul.f32 	%f556, %f894, %f908;
	sub.f32 	%f557, %f555, %f556;
	mul.f32 	%f558, %f898, %f907;
	sub.f32 	%f906, %f557, %f558;
	mul.f32 	%f559, %f890, %f913;
	neg.f32 	%f560, %f559;
	mul.f32 	%f561, %f894, %f912;
	sub.f32 	%f562, %f560, %f561;
	mul.f32 	%f563, %f898, %f911;
	sub.f32 	%f910, %f562, %f563;
	bra.uni 	$L__BB5_16;

$L__BB5_7:
	// begin inline asm
	call (%rd255), _optix_get_instance_inverse_transform_from_handle, (%rd17);
	// end inline asm

$L__BB5_8:
	// begin inline asm
	cvta.to.global.u64 %rd23, %rd255;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r15,%r16,%r17,%r18}, [%rd23];
	// end inline asm
	mov.b32 	%f905, %r15;
	mov.b32 	%f904, %r16;
	mov.b32 	%f903, %r17;
	mov.b32 	%f902, %r18;
	add.s64 	%rd27, %rd255, 16;
	// begin inline asm
	cvta.to.global.u64 %rd26, %rd27;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r19,%r20,%r21,%r22}, [%rd26];
	// end inline asm
	mov.b32 	%f909, %r19;
	mov.b32 	%f908, %r20;
	mov.b32 	%f907, %r21;
	mov.b32 	%f906, %r22;
	add.s64 	%rd30, %rd255, 32;
	// begin inline asm
	cvta.to.global.u64 %rd29, %rd30;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r23,%r24,%r25,%r26}, [%rd29];
	// end inline asm
	mov.b32 	%f913, %r23;
	mov.b32 	%f912, %r24;
	mov.b32 	%f911, %r25;
	mov.b32 	%f910, %r26;

$L__BB5_16:
	setp.eq.s32 	%p11, %r315, 0;
	@%p11 bra 	$L__BB5_18;

	mul.f32 	%f564, %f870, %f905;
	fma.rn.f32 	%f565, %f866, %f904, %f564;
	fma.rn.f32 	%f151, %f862, %f903, %f565;
	mul.f32 	%f566, %f871, %f905;
	fma.rn.f32 	%f567, %f867, %f904, %f566;
	fma.rn.f32 	%f152, %f863, %f903, %f567;
	mul.f32 	%f568, %f872, %f905;
	fma.rn.f32 	%f569, %f868, %f904, %f568;
	fma.rn.f32 	%f153, %f864, %f903, %f569;
	mul.f32 	%f570, %f873, %f905;
	fma.rn.f32 	%f571, %f869, %f904, %f570;
	fma.rn.f32 	%f572, %f865, %f903, %f571;
	add.f32 	%f902, %f902, %f572;
	mul.f32 	%f573, %f870, %f909;
	fma.rn.f32 	%f574, %f866, %f908, %f573;
	fma.rn.f32 	%f155, %f862, %f907, %f574;
	mul.f32 	%f575, %f871, %f909;
	fma.rn.f32 	%f576, %f867, %f908, %f575;
	fma.rn.f32 	%f156, %f863, %f907, %f576;
	mul.f32 	%f577, %f872, %f909;
	fma.rn.f32 	%f578, %f868, %f908, %f577;
	fma.rn.f32 	%f157, %f864, %f907, %f578;
	mul.f32 	%f579, %f873, %f909;
	fma.rn.f32 	%f580, %f869, %f908, %f579;
	fma.rn.f32 	%f581, %f865, %f907, %f580;
	add.f32 	%f906, %f906, %f581;
	mul.f32 	%f582, %f870, %f913;
	fma.rn.f32 	%f583, %f866, %f912, %f582;
	fma.rn.f32 	%f159, %f862, %f911, %f583;
	mul.f32 	%f584, %f871, %f913;
	fma.rn.f32 	%f585, %f867, %f912, %f584;
	fma.rn.f32 	%f160, %f863, %f911, %f585;
	mul.f32 	%f586, %f872, %f913;
	fma.rn.f32 	%f587, %f868, %f912, %f586;
	fma.rn.f32 	%f161, %f864, %f911, %f587;
	mul.f32 	%f588, %f873, %f913;
	fma.rn.f32 	%f589, %f869, %f912, %f588;
	fma.rn.f32 	%f590, %f865, %f911, %f589;
	add.f32 	%f910, %f910, %f590;
	mov.f32 	%f903, %f153;
	mov.f32 	%f904, %f152;
	mov.f32 	%f905, %f151;
	mov.f32 	%f907, %f157;
	mov.f32 	%f908, %f156;
	mov.f32 	%f909, %f155;
	mov.f32 	%f911, %f161;
	mov.f32 	%f912, %f160;
	mov.f32 	%f913, %f159;

$L__BB5_18:
	add.s32 	%r315, %r315, 1;
	setp.lt.u32 	%p12, %r315, %r10;
	mov.f32 	%f862, %f913;
	mov.f32 	%f863, %f912;
	mov.f32 	%f864, %f911;
	mov.f32 	%f865, %f910;
	mov.f32 	%f866, %f909;
	mov.f32 	%f867, %f908;
	mov.f32 	%f868, %f907;
	mov.f32 	%f869, %f906;
	mov.f32 	%f870, %f905;
	mov.f32 	%f871, %f904;
	mov.f32 	%f872, %f903;
	mov.f32 	%f873, %f902;
	@%p12 bra 	$L__BB5_3;

$L__BB5_19:
	mul.f32 	%f591, %f938, %f905;
	fma.rn.f32 	%f592, %f939, %f904, %f591;
	fma.rn.f32 	%f593, %f940, %f903, %f592;
	mul.f32 	%f594, %f938, %f909;
	fma.rn.f32 	%f595, %f939, %f908, %f594;
	fma.rn.f32 	%f596, %f940, %f907, %f595;
	mul.f32 	%f597, %f938, %f913;
	fma.rn.f32 	%f598, %f939, %f912, %f597;
	fma.rn.f32 	%f599, %f940, %f911, %f598;
	add.f32 	%f940, %f910, %f599;
	add.f32 	%f939, %f906, %f596;
	add.f32 	%f938, %f902, %f593;

$L__BB5_20:
	// begin inline asm
	call (%f996), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f997), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f602), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%r161), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p13, %r161, 0;
	@%p13 bra 	$L__BB5_40;

	// begin inline asm
	call (%r162), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f603), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p14, %r162, 0;
	@%p14 bra 	$L__BB5_39;

	mov.u32 	%r316, 0;

$L__BB5_23:
	.pragma "nounroll";
	// begin inline asm
	call (%rd136), _optix_get_transform_list_handle, (%r316);
	// end inline asm
	// begin inline asm
	call (%r165), _optix_get_transform_type_from_handle, (%rd136);
	// end inline asm
	or.b32  	%r166, %r165, 1;
	setp.eq.s32 	%p15, %r166, 3;
	@%p15 bra 	$L__BB5_29;
	bra.uni 	$L__BB5_24;

$L__BB5_29:
	setp.eq.s32 	%p18, %r165, 2;
	@%p18 bra 	$L__BB5_33;
	bra.uni 	$L__BB5_30;

$L__BB5_33:
	// begin inline asm
	call (%rd208), _optix_get_matrix_motion_transform_from_handle, (%rd136);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd210, %rd208;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r254,%r255,%r256,%r257}, [%rd210];
	// end inline asm
	add.s64 	%rd214, %rd208, 16;
	// begin inline asm
	cvta.to.global.u64 %rd213, %rd214;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r258,%r259,%r260,%r261}, [%rd213];
	// end inline asm
	add.s64 	%rd217, %rd208, 32;
	// begin inline asm
	cvta.to.global.u64 %rd216, %rd217;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r262,%r263,%r264,%r265}, [%rd216];
	// end inline asm
	add.s64 	%rd220, %rd208, 48;
	// begin inline asm
	cvta.to.global.u64 %rd219, %rd220;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r266,%r267,%r268,%r269}, [%rd219];
	// end inline asm
	add.s64 	%rd223, %rd208, 64;
	// begin inline asm
	cvta.to.global.u64 %rd222, %rd223;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r270,%r271,%r272,%r273}, [%rd222];
	// end inline asm
	add.s64 	%rd226, %rd208, 80;
	// begin inline asm
	cvta.to.global.u64 %rd225, %rd226;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r274,%r275,%r276,%r277}, [%rd225];
	// end inline asm
	add.s64 	%rd229, %rd208, 96;
	// begin inline asm
	cvta.to.global.u64 %rd228, %rd229;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r278,%r279,%r280,%r281}, [%rd228];
	// end inline asm
	add.s64 	%rd232, %rd208, 112;
	// begin inline asm
	cvta.to.global.u64 %rd231, %rd232;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r282,%r283,%r284,%r285}, [%rd231];
	// end inline asm
	mov.b32 	%f710, %r257;
	mov.b32 	%f711, %r258;
	and.b32  	%r298, %r256, 65535;
	add.s32 	%r299, %r298, -1;
	cvt.rn.f32.s32 	%f712, %r299;
	sub.f32 	%f713, %f603, %f710;
	sub.f32 	%f714, %f711, %f710;
	div.approx.f32 	%f715, %f713, %f714;
	mul.f32 	%f716, %f715, %f712;
	min.f32 	%f717, %f712, %f716;
	mov.f32 	%f718, 0f00000000;
	max.f32 	%f719, %f718, %f717;
	setp.num.f32 	%p21, %f719, %f719;
	selp.f32 	%f720, %f719, 0f00000000, %p21;
	cvt.rmi.f32.f32 	%f721, %f720;
	add.f32 	%f722, %f712, 0fBF800000;
	min.f32 	%f723, %f721, %f722;
	sub.f32 	%f258, %f720, %f723;
	cvt.rzi.s32.f32 	%r300, %f723;
	cvt.s64.s32 	%rd15, %r300;
	mul.wide.s32 	%rd243, %r300, 48;
	add.s64 	%rd235, %rd217, %rd243;
	// begin inline asm
	cvta.to.global.u64 %rd234, %rd235;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r286,%r287,%r288,%r289}, [%rd234];
	// end inline asm
	mov.b32 	%f966, %r286;
	mov.b32 	%f967, %r287;
	mov.b32 	%f968, %r288;
	add.s64 	%rd238, %rd235, 16;
	// begin inline asm
	cvta.to.global.u64 %rd237, %rd238;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r290,%r291,%r292,%r293}, [%rd237];
	// end inline asm
	mov.b32 	%f963, %r290;
	mov.b32 	%f964, %r291;
	mov.b32 	%f965, %r292;
	add.s64 	%rd241, %rd235, 32;
	// begin inline asm
	cvta.to.global.u64 %rd240, %rd241;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r294,%r295,%r296,%r297}, [%rd240];
	// end inline asm
	mov.b32 	%f960, %r294;
	mov.b32 	%f961, %r295;
	mov.b32 	%f962, %r296;
	setp.leu.f32 	%p22, %f258, 0f00000000;
	@%p22 bra 	$L__BB5_35;

	mov.f32 	%f724, 0f3F800000;
	sub.f32 	%f725, %f724, %f258;
	mul.lo.s64 	%rd253, %rd15, 48;
	add.s64 	%rd254, %rd208, %rd253;
	add.s64 	%rd245, %rd254, 80;
	// begin inline asm
	cvta.to.global.u64 %rd244, %rd245;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r301,%r302,%r303,%r304}, [%rd244];
	// end inline asm
	mov.b32 	%f726, %r301;
	mov.b32 	%f727, %r302;
	mov.b32 	%f728, %r303;
	mul.f32 	%f729, %f258, %f726;
	mul.f32 	%f730, %f258, %f727;
	mul.f32 	%f731, %f258, %f728;
	fma.rn.f32 	%f966, %f725, %f966, %f729;
	fma.rn.f32 	%f967, %f725, %f967, %f730;
	fma.rn.f32 	%f968, %f725, %f968, %f731;
	add.s64 	%rd248, %rd254, 96;
	// begin inline asm
	cvta.to.global.u64 %rd247, %rd248;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r305,%r306,%r307,%r308}, [%rd247];
	// end inline asm
	mov.b32 	%f732, %r305;
	mov.b32 	%f733, %r306;
	mov.b32 	%f734, %r307;
	mul.f32 	%f735, %f258, %f732;
	mul.f32 	%f736, %f258, %f733;
	mul.f32 	%f737, %f258, %f734;
	fma.rn.f32 	%f963, %f725, %f963, %f735;
	fma.rn.f32 	%f964, %f725, %f964, %f736;
	fma.rn.f32 	%f965, %f725, %f965, %f737;
	add.s64 	%rd251, %rd254, 112;
	// begin inline asm
	cvta.to.global.u64 %rd250, %rd251;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r309,%r310,%r311,%r312}, [%rd250];
	// end inline asm
	mov.b32 	%f738, %r309;
	mov.b32 	%f739, %r310;
	mov.b32 	%f740, %r311;
	mul.f32 	%f741, %f258, %f738;
	mul.f32 	%f742, %f258, %f739;
	mul.f32 	%f743, %f258, %f740;
	fma.rn.f32 	%f960, %f725, %f960, %f741;
	fma.rn.f32 	%f961, %f725, %f961, %f742;
	fma.rn.f32 	%f962, %f725, %f962, %f743;
	bra.uni 	$L__BB5_35;

$L__BB5_24:
	mov.f32 	%f969, 0f00000000;
	mov.f32 	%f971, 0f3F800000;
	setp.eq.s32 	%p16, %r165, 4;
	@%p16 bra 	$L__BB5_27;

	setp.ne.s32 	%p17, %r165, 1;
	mov.f32 	%f970, %f969;
	mov.f32 	%f972, %f969;
	mov.f32 	%f973, %f971;
	mov.f32 	%f974, %f969;
	mov.f32 	%f975, %f971;
	mov.f32 	%f976, %f969;
	mov.f32 	%f977, %f969;
	@%p17 bra 	$L__BB5_36;

	// begin inline asm
	call (%rd138), _optix_get_static_transform_from_handle, (%rd136);
	// end inline asm
	add.s64 	%rd256, %rd138, 64;
	bra.uni 	$L__BB5_28;

$L__BB5_30:
	// begin inline asm
	call (%rd151), _optix_get_srt_motion_transform_from_handle, (%rd136);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd153, %rd151;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r179,%r180,%r181,%r182}, [%rd153];
	// end inline asm
	add.s64 	%rd157, %rd151, 16;
	// begin inline asm
	cvta.to.global.u64 %rd156, %rd157;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r183,%r184,%r185,%r186}, [%rd156];
	// end inline asm
	add.s64 	%rd160, %rd151, 32;
	// begin inline asm
	cvta.to.global.u64 %rd159, %rd160;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r187,%r188,%r189,%r190}, [%rd159];
	// end inline asm
	add.s64 	%rd163, %rd151, 48;
	// begin inline asm
	cvta.to.global.u64 %rd162, %rd163;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r191,%r192,%r193,%r194}, [%rd162];
	// end inline asm
	add.s64 	%rd166, %rd151, 64;
	// begin inline asm
	cvta.to.global.u64 %rd165, %rd166;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r195,%r196,%r197,%r198}, [%rd165];
	// end inline asm
	add.s64 	%rd169, %rd151, 80;
	// begin inline asm
	cvta.to.global.u64 %rd168, %rd169;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r199,%r200,%r201,%r202}, [%rd168];
	// end inline asm
	add.s64 	%rd172, %rd151, 96;
	// begin inline asm
	cvta.to.global.u64 %rd171, %rd172;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r203,%r204,%r205,%r206}, [%rd171];
	// end inline asm
	add.s64 	%rd175, %rd151, 112;
	// begin inline asm
	cvta.to.global.u64 %rd174, %rd175;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r207,%r208,%r209,%r210}, [%rd174];
	// end inline asm
	add.s64 	%rd178, %rd151, 128;
	// begin inline asm
	cvta.to.global.u64 %rd177, %rd178;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r211,%r212,%r213,%r214}, [%rd177];
	// end inline asm
	add.s64 	%rd181, %rd151, 144;
	// begin inline asm
	cvta.to.global.u64 %rd180, %rd181;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r215,%r216,%r217,%r218}, [%rd180];
	// end inline asm
	mov.b32 	%f615, %r182;
	mov.b32 	%f616, %r183;
	and.b32  	%r235, %r181, 65535;
	add.s32 	%r236, %r235, -1;
	cvt.rn.f32.s32 	%f617, %r236;
	sub.f32 	%f618, %f603, %f615;
	sub.f32 	%f619, %f616, %f615;
	div.approx.f32 	%f620, %f618, %f619;
	mul.f32 	%f621, %f620, %f617;
	min.f32 	%f622, %f617, %f621;
	mov.f32 	%f623, 0f00000000;
	max.f32 	%f624, %f623, %f622;
	setp.num.f32 	%p19, %f624, %f624;
	selp.f32 	%f625, %f624, 0f00000000, %p19;
	cvt.rmi.f32.f32 	%f626, %f625;
	add.f32 	%f627, %f617, 0fBF800000;
	min.f32 	%f628, %f626, %f627;
	sub.f32 	%f218, %f625, %f628;
	cvt.rzi.s32.f32 	%r237, %f628;
	mul.wide.s32 	%rd195, %r237, 64;
	add.s64 	%rd184, %rd160, %rd195;
	// begin inline asm
	cvta.to.global.u64 %rd183, %rd184;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r219,%r220,%r221,%r222}, [%rd183];
	// end inline asm
	mov.b32 	%f950, %r219;
	mov.b32 	%f951, %r220;
	mov.b32 	%f952, %r221;
	add.s64 	%rd187, %rd184, 16;
	// begin inline asm
	cvta.to.global.u64 %rd186, %rd187;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r223,%r224,%r225,%r226}, [%rd186];
	// end inline asm
	mov.b32 	%f953, %r223;
	mov.b32 	%f954, %r224;
	mov.b32 	%f955, %r226;
	add.s64 	%rd190, %rd184, 32;
	// begin inline asm
	cvta.to.global.u64 %rd189, %rd190;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r227,%r228,%r229,%r230}, [%rd189];
	// end inline asm
	mov.b32 	%f956, %r228;
	mov.b32 	%f957, %r229;
	mov.b32 	%f958, %r230;
	add.s64 	%rd193, %rd184, 48;
	// begin inline asm
	cvta.to.global.u64 %rd192, %rd193;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r231,%r232,%r233,%r234}, [%rd192];
	// end inline asm
	mov.b32 	%f959, %r231;
	setp.leu.f32 	%p20, %f218, 0f00000000;
	@%p20 bra 	$L__BB5_32;

	mov.f32 	%f629, 0f3F800000;
	sub.f32 	%f630, %f629, %f218;
	add.s64 	%rd197, %rd184, 64;
	// begin inline asm
	cvta.to.global.u64 %rd196, %rd197;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r238,%r239,%r240,%r241}, [%rd196];
	// end inline asm
	mov.b32 	%f631, %r238;
	mov.b32 	%f632, %r239;
	mov.b32 	%f633, %r240;
	mul.f32 	%f634, %f218, %f631;
	mul.f32 	%f635, %f218, %f632;
	mul.f32 	%f636, %f218, %f633;
	fma.rn.f32 	%f950, %f630, %f950, %f634;
	fma.rn.f32 	%f951, %f630, %f951, %f635;
	fma.rn.f32 	%f952, %f630, %f952, %f636;
	add.s64 	%rd200, %rd184, 80;
	// begin inline asm
	cvta.to.global.u64 %rd199, %rd200;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r242,%r243,%r244,%r245}, [%rd199];
	// end inline asm
	mov.b32 	%f637, %r242;
	mov.b32 	%f638, %r243;
	mov.b32 	%f639, %r245;
	mul.f32 	%f640, %f218, %f637;
	mul.f32 	%f641, %f218, %f638;
	mul.f32 	%f642, %f218, %f639;
	fma.rn.f32 	%f953, %f630, %f953, %f640;
	fma.rn.f32 	%f954, %f630, %f954, %f641;
	fma.rn.f32 	%f955, %f630, %f955, %f642;
	add.s64 	%rd203, %rd184, 96;
	// begin inline asm
	cvta.to.global.u64 %rd202, %rd203;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r246,%r247,%r248,%r249}, [%rd202];
	// end inline asm
	mov.b32 	%f643, %r247;
	mov.b32 	%f644, %r248;
	mov.b32 	%f645, %r249;
	mul.f32 	%f646, %f218, %f643;
	mul.f32 	%f647, %f218, %f644;
	mul.f32 	%f648, %f218, %f645;
	fma.rn.f32 	%f649, %f630, %f956, %f646;
	fma.rn.f32 	%f650, %f630, %f957, %f647;
	fma.rn.f32 	%f651, %f630, %f958, %f648;
	add.s64 	%rd206, %rd184, 112;
	// begin inline asm
	cvta.to.global.u64 %rd205, %rd206;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r250,%r251,%r252,%r253}, [%rd205];
	// end inline asm
	mov.b32 	%f652, %r250;
	mul.f32 	%f653, %f218, %f652;
	fma.rn.f32 	%f654, %f630, %f959, %f653;
	mul.f32 	%f655, %f650, %f650;
	fma.rn.f32 	%f656, %f649, %f649, %f655;
	fma.rn.f32 	%f657, %f651, %f651, %f656;
	fma.rn.f32 	%f658, %f654, %f654, %f657;
	sqrt.rn.f32 	%f659, %f658;
	rcp.rn.f32 	%f660, %f659;
	mul.f32 	%f956, %f649, %f660;
	mul.f32 	%f957, %f650, %f660;
	mul.f32 	%f958, %f651, %f660;
	mul.f32 	%f959, %f660, %f654;

$L__BB5_32:
	mul.f32 	%f661, %f957, %f957;
	fma.rn.f32 	%f662, %f956, %f956, %f661;
	fma.rn.f32 	%f663, %f958, %f958, %f662;
	fma.rn.f32 	%f664, %f959, %f959, %f663;
	rcp.rn.f32 	%f665, %f664;
	mul.f32 	%f666, %f956, %f665;
	mul.f32 	%f667, %f957, %f665;
	mul.f32 	%f668, %f958, %f665;
	mul.f32 	%f669, %f959, %f665;
	mul.f32 	%f670, %f956, %f666;
	mul.f32 	%f671, %f957, %f667;
	mul.f32 	%f672, %f958, %f668;
	mul.f32 	%f673, %f956, %f667;
	mul.f32 	%f674, %f958, %f669;
	mul.f32 	%f675, %f956, %f668;
	mul.f32 	%f676, %f957, %f669;
	mul.f32 	%f677, %f957, %f668;
	mul.f32 	%f678, %f956, %f669;
	sub.f32 	%f679, %f670, %f671;
	sub.f32 	%f680, %f679, %f672;
	fma.rn.f32 	%f681, %f959, %f669, %f680;
	sub.f32 	%f682, %f673, %f674;
	add.f32 	%f683, %f682, %f682;
	add.f32 	%f684, %f675, %f676;
	add.f32 	%f685, %f684, %f684;
	add.f32 	%f686, %f673, %f674;
	add.f32 	%f687, %f686, %f686;
	sub.f32 	%f688, %f671, %f670;
	sub.f32 	%f689, %f688, %f672;
	fma.rn.f32 	%f690, %f959, %f669, %f689;
	sub.f32 	%f691, %f677, %f678;
	add.f32 	%f692, %f691, %f691;
	sub.f32 	%f693, %f675, %f676;
	add.f32 	%f694, %f693, %f693;
	add.f32 	%f695, %f677, %f678;
	add.f32 	%f696, %f695, %f695;
	neg.f32 	%f697, %f670;
	sub.f32 	%f698, %f697, %f671;
	add.f32 	%f699, %f672, %f698;
	fma.rn.f32 	%f700, %f959, %f669, %f699;
	mul.f32 	%f701, %f952, %f681;
	fma.rn.f32 	%f702, %f954, %f683, %f701;
	fma.rn.f32 	%f968, %f955, %f685, %f702;
	mul.f32 	%f703, %f954, %f690;
	fma.rn.f32 	%f704, %f952, %f687, %f703;
	fma.rn.f32 	%f965, %f955, %f692, %f704;
	mul.f32 	%f705, %f954, %f696;
	fma.rn.f32 	%f706, %f952, %f694, %f705;
	fma.rn.f32 	%f962, %f955, %f700, %f706;
	mul.f32 	%f707, %f951, %f681;
	fma.rn.f32 	%f967, %f953, %f683, %f707;
	mul.f32 	%f708, %f953, %f690;
	fma.rn.f32 	%f964, %f951, %f687, %f708;
	mul.f32 	%f709, %f953, %f696;
	fma.rn.f32 	%f961, %f951, %f694, %f709;
	mul.f32 	%f966, %f950, %f681;
	mul.f32 	%f963, %f950, %f687;
	mul.f32 	%f960, %f950, %f694;

$L__BB5_35:
	mul.f32 	%f744, %f961, %f965;
	mul.f32 	%f745, %f962, %f964;
	sub.f32 	%f746, %f745, %f744;
	mul.f32 	%f747, %f966, %f746;
	mul.f32 	%f748, %f960, %f965;
	mul.f32 	%f749, %f962, %f963;
	sub.f32 	%f750, %f749, %f748;
	mul.f32 	%f751, %f750, %f967;
	sub.f32 	%f752, %f747, %f751;
	mul.f32 	%f753, %f960, %f964;
	mul.f32 	%f754, %f961, %f963;
	sub.f32 	%f755, %f754, %f753;
	fma.rn.f32 	%f756, %f755, %f968, %f752;
	rcp.rn.f32 	%f757, %f756;
	mul.f32 	%f975, %f746, %f757;
	mul.f32 	%f758, %f962, %f967;
	mul.f32 	%f759, %f961, %f968;
	sub.f32 	%f760, %f759, %f758;
	mul.f32 	%f976, %f760, %f757;
	mul.f32 	%f761, %f964, %f968;
	mul.f32 	%f762, %f965, %f967;
	sub.f32 	%f763, %f762, %f761;
	mul.f32 	%f977, %f763, %f757;
	sub.f32 	%f764, %f748, %f749;
	mul.f32 	%f972, %f764, %f757;
	mul.f32 	%f765, %f960, %f968;
	mul.f32 	%f766, %f962, %f966;
	sub.f32 	%f767, %f766, %f765;
	mul.f32 	%f973, %f767, %f757;
	mul.f32 	%f768, %f965, %f966;
	mul.f32 	%f769, %f963, %f968;
	sub.f32 	%f770, %f769, %f768;
	mul.f32 	%f974, %f770, %f757;
	mul.f32 	%f969, %f755, %f757;
	mul.f32 	%f771, %f961, %f966;
	mul.f32 	%f772, %f960, %f967;
	sub.f32 	%f773, %f772, %f771;
	mul.f32 	%f970, %f773, %f757;
	mul.f32 	%f774, %f963, %f967;
	mul.f32 	%f775, %f964, %f966;
	sub.f32 	%f776, %f775, %f774;
	mul.f32 	%f971, %f776, %f757;
	bra.uni 	$L__BB5_36;

$L__BB5_27:
	// begin inline asm
	call (%rd256), _optix_get_instance_inverse_transform_from_handle, (%rd136);
	// end inline asm

$L__BB5_28:
	// begin inline asm
	cvta.to.global.u64 %rd142, %rd256;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r167,%r168,%r169,%r170}, [%rd142];
	// end inline asm
	mov.b32 	%f975, %r167;
	mov.b32 	%f976, %r168;
	mov.b32 	%f977, %r169;
	add.s64 	%rd146, %rd256, 16;
	// begin inline asm
	cvta.to.global.u64 %rd145, %rd146;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r171,%r172,%r173,%r174}, [%rd145];
	// end inline asm
	mov.b32 	%f972, %r171;
	mov.b32 	%f973, %r172;
	mov.b32 	%f974, %r173;
	add.s64 	%rd149, %rd256, 32;
	// begin inline asm
	cvta.to.global.u64 %rd148, %rd149;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r175,%r176,%r177,%r178}, [%rd148];
	// end inline asm
	mov.b32 	%f969, %r175;
	mov.b32 	%f970, %r176;
	mov.b32 	%f971, %r177;

$L__BB5_36:
	setp.eq.s32 	%p23, %r316, 0;
	@%p23 bra 	$L__BB5_38;

	mul.f32 	%f777, %f946, %f976;
	fma.rn.f32 	%f778, %f943, %f975, %f777;
	fma.rn.f32 	%f304, %f949, %f977, %f778;
	mul.f32 	%f779, %f945, %f976;
	fma.rn.f32 	%f780, %f942, %f975, %f779;
	fma.rn.f32 	%f305, %f948, %f977, %f780;
	mul.f32 	%f781, %f944, %f976;
	fma.rn.f32 	%f782, %f941, %f975, %f781;
	fma.rn.f32 	%f977, %f947, %f977, %f782;
	mul.f32 	%f783, %f946, %f973;
	fma.rn.f32 	%f784, %f943, %f972, %f783;
	fma.rn.f32 	%f307, %f949, %f974, %f784;
	mul.f32 	%f785, %f945, %f973;
	fma.rn.f32 	%f786, %f942, %f972, %f785;
	fma.rn.f32 	%f308, %f948, %f974, %f786;
	mul.f32 	%f787, %f944, %f973;
	fma.rn.f32 	%f788, %f941, %f972, %f787;
	fma.rn.f32 	%f974, %f947, %f974, %f788;
	mul.f32 	%f789, %f946, %f970;
	fma.rn.f32 	%f790, %f943, %f969, %f789;
	fma.rn.f32 	%f310, %f949, %f971, %f790;
	mul.f32 	%f791, %f945, %f970;
	fma.rn.f32 	%f792, %f942, %f969, %f791;
	fma.rn.f32 	%f311, %f948, %f971, %f792;
	mul.f32 	%f793, %f944, %f970;
	fma.rn.f32 	%f794, %f941, %f969, %f793;
	fma.rn.f32 	%f971, %f947, %f971, %f794;
	mov.f32 	%f969, %f310;
	mov.f32 	%f970, %f311;
	mov.f32 	%f972, %f307;
	mov.f32 	%f973, %f308;
	mov.f32 	%f975, %f304;
	mov.f32 	%f976, %f305;

$L__BB5_38:
	add.s32 	%r316, %r316, 1;
	setp.lt.u32 	%p24, %r316, %r162;
	mov.f32 	%f941, %f977;
	mov.f32 	%f942, %f976;
	mov.f32 	%f943, %f975;
	mov.f32 	%f944, %f974;
	mov.f32 	%f945, %f973;
	mov.f32 	%f946, %f972;
	mov.f32 	%f947, %f971;
	mov.f32 	%f948, %f970;
	mov.f32 	%f949, %f969;
	@%p24 bra 	$L__BB5_23;

$L__BB5_39:
	mul.f32 	%f795, %f997, %f976;
	fma.rn.f32 	%f796, %f996, %f975, %f795;
	mul.f32 	%f797, %f997, %f973;
	fma.rn.f32 	%f798, %f996, %f972, %f797;
	mul.f32 	%f799, %f997, %f970;
	fma.rn.f32 	%f800, %f996, %f969, %f799;
	fma.rn.f32 	%f998, %f602, %f971, %f800;
	fma.rn.f32 	%f997, %f602, %f974, %f798;
	fma.rn.f32 	%f996, %f602, %f977, %f796;
	bra.uni 	$L__BB5_41;

$L__BB5_40:
	mov.f32 	%f998, %f602;

$L__BB5_41:
	// begin inline asm
	call (%f801), _optix_get_ray_tmin, ();
	// end inline asm
	fma.rn.f32 	%f804, %f996, %f801, %f938;
	fma.rn.f32 	%f805, %f997, %f801, %f939;
	fma.rn.f32 	%f806, %f998, %f801, %f940;
	ld.v4.f32 	{%f807, %f808, %f809, %f810}, [%rd1+32];
	mul.f32 	%f815, %f807, %f804;
	fma.rn.f32 	%f816, %f808, %f805, %f815;
	fma.rn.f32 	%f817, %f809, %f806, %f816;
	mov.f32 	%f818, 0f3F800000;
	fma.rn.f32 	%f819, %f810, %f818, %f817;
	ld.v4.f32 	{%f820, %f821, %f822, %f823}, [%rd1+48];
	mul.f32 	%f828, %f820, %f804;
	fma.rn.f32 	%f829, %f821, %f805, %f828;
	fma.rn.f32 	%f830, %f822, %f806, %f829;
	fma.rn.f32 	%f831, %f823, %f818, %f830;
	ld.v4.f32 	{%f832, %f833, %f834, %f835}, [%rd1+64];
	mul.f32 	%f840, %f832, %f804;
	fma.rn.f32 	%f841, %f833, %f805, %f840;
	fma.rn.f32 	%f842, %f834, %f806, %f841;
	fma.rn.f32 	%f843, %f835, %f818, %f842;
	mul.f32 	%f844, %f807, %f996;
	fma.rn.f32 	%f845, %f808, %f997, %f844;
	fma.rn.f32 	%f846, %f809, %f998, %f845;
	mov.f32 	%f847, 0f00000000;
	fma.rn.f32 	%f848, %f810, %f847, %f846;
	mul.f32 	%f849, %f820, %f996;
	fma.rn.f32 	%f850, %f821, %f997, %f849;
	fma.rn.f32 	%f851, %f822, %f998, %f850;
	fma.rn.f32 	%f852, %f823, %f847, %f851;
	mul.f32 	%f853, %f832, %f996;
	fma.rn.f32 	%f854, %f833, %f997, %f853;
	fma.rn.f32 	%f855, %f834, %f998, %f854;
	fma.rn.f32 	%f856, %f835, %f847, %f855;
	neg.f32 	%f857, %f843;
	div.rn.f32 	%f340, %f857, %f856;
	fma.rn.f32 	%f858, %f340, %f848, %f819;
	fma.rn.f32 	%f341, %f340, %f852, %f831;
	abs.f32 	%f859, %f858;
	setp.gtu.f32 	%p25, %f859, 0f3F800000;
	@%p25 bra 	$L__BB5_44;

	abs.f32 	%f860, %f341;
	setp.gtu.f32 	%p26, %f860, 0f3F800000;
	@%p26 bra 	$L__BB5_44;

	mov.u32 	%r314, 254;
	// begin inline asm
	call (%r313), _optix_report_intersection_0, (%f340, %r314);
	// end inline asm

$L__BB5_44:
	ret;

}
	// .globl	__closesthit__rectangle
.visible .entry __closesthit__rectangle()
{
	.reg .pred 	%p<26>;
	.reg .f32 	%f<996>;
	.reg .b32 	%r<330>;
	.reg .b64 	%rd<258>;


	// begin inline asm
	call (%rd17), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u64 	%rd2, [%rd17+8];
	// begin inline asm
	call (%f935), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f936), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f937), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%r9), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p1, %r9, 0;
	@%p1 bra 	$L__BB6_20;

	// begin inline asm
	call (%r10), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f343), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p2, %r10, 0;
	@%p2 bra 	$L__BB6_19;

	mov.u32 	%r328, 0;

$L__BB6_3:
	.pragma "nounroll";
	// begin inline asm
	call (%rd18), _optix_get_transform_list_handle, (%r328);
	// end inline asm
	// begin inline asm
	call (%r13), _optix_get_transform_type_from_handle, (%rd18);
	// end inline asm
	or.b32  	%r14, %r13, 1;
	setp.eq.s32 	%p3, %r14, 3;
	@%p3 bra 	$L__BB6_9;
	bra.uni 	$L__BB6_4;

$L__BB6_9:
	setp.eq.s32 	%p6, %r13, 2;
	@%p6 bra 	$L__BB6_13;
	bra.uni 	$L__BB6_10;

$L__BB6_13:
	// begin inline asm
	call (%rd90), _optix_get_matrix_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd92, %rd90;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r102,%r103,%r104,%r105}, [%rd92];
	// end inline asm
	add.s64 	%rd96, %rd90, 16;
	// begin inline asm
	cvta.to.global.u64 %rd95, %rd96;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r106,%r107,%r108,%r109}, [%rd95];
	// end inline asm
	add.s64 	%rd99, %rd90, 32;
	// begin inline asm
	cvta.to.global.u64 %rd98, %rd99;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r110,%r111,%r112,%r113}, [%rd98];
	// end inline asm
	add.s64 	%rd102, %rd90, 48;
	// begin inline asm
	cvta.to.global.u64 %rd101, %rd102;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r114,%r115,%r116,%r117}, [%rd101];
	// end inline asm
	add.s64 	%rd105, %rd90, 64;
	// begin inline asm
	cvta.to.global.u64 %rd104, %rd105;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd104];
	// end inline asm
	add.s64 	%rd108, %rd90, 80;
	// begin inline asm
	cvta.to.global.u64 %rd107, %rd108;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd107];
	// end inline asm
	add.s64 	%rd111, %rd90, 96;
	// begin inline asm
	cvta.to.global.u64 %rd110, %rd111;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd110];
	// end inline asm
	add.s64 	%rd114, %rd90, 112;
	// begin inline asm
	cvta.to.global.u64 %rd113, %rd114;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd113];
	// end inline asm
	mov.b32 	%f474, %r105;
	mov.b32 	%f475, %r106;
	and.b32  	%r146, %r104, 65535;
	add.s32 	%r147, %r146, -1;
	cvt.rn.f32.s32 	%f476, %r147;
	sub.f32 	%f477, %f343, %f474;
	sub.f32 	%f478, %f475, %f474;
	div.approx.f32 	%f479, %f477, %f478;
	mul.f32 	%f480, %f479, %f476;
	min.f32 	%f481, %f476, %f480;
	mov.f32 	%f482, 0f00000000;
	max.f32 	%f483, %f482, %f481;
	setp.num.f32 	%p9, %f483, %f483;
	selp.f32 	%f484, %f483, 0f00000000, %p9;
	cvt.rmi.f32.f32 	%f485, %f484;
	add.f32 	%f486, %f476, 0fBF800000;
	min.f32 	%f487, %f485, %f486;
	sub.f32 	%f90, %f484, %f487;
	cvt.rzi.s32.f32 	%r148, %f487;
	cvt.s64.s32 	%rd9, %r148;
	mul.wide.s32 	%rd125, %r148, 48;
	add.s64 	%rd117, %rd99, %rd125;
	// begin inline asm
	cvta.to.global.u64 %rd116, %rd117;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd116];
	// end inline asm
	mov.b32 	%f890, %r134;
	mov.b32 	%f889, %r135;
	mov.b32 	%f888, %r136;
	mov.b32 	%f887, %r137;
	add.s64 	%rd120, %rd117, 16;
	// begin inline asm
	cvta.to.global.u64 %rd119, %rd120;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd119];
	// end inline asm
	mov.b32 	%f894, %r138;
	mov.b32 	%f893, %r139;
	mov.b32 	%f892, %r140;
	mov.b32 	%f891, %r141;
	add.s64 	%rd123, %rd117, 32;
	// begin inline asm
	cvta.to.global.u64 %rd122, %rd123;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd122];
	// end inline asm
	mov.b32 	%f898, %r142;
	mov.b32 	%f897, %r143;
	mov.b32 	%f896, %r144;
	mov.b32 	%f895, %r145;
	setp.leu.f32 	%p10, %f90, 0f00000000;
	@%p10 bra 	$L__BB6_15;

	mov.f32 	%f488, 0f3F800000;
	sub.f32 	%f489, %f488, %f90;
	mul.lo.s64 	%rd135, %rd9, 48;
	add.s64 	%rd136, %rd90, %rd135;
	add.s64 	%rd127, %rd136, 80;
	// begin inline asm
	cvta.to.global.u64 %rd126, %rd127;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r149,%r150,%r151,%r152}, [%rd126];
	// end inline asm
	mov.b32 	%f490, %r149;
	mov.b32 	%f491, %r150;
	mov.b32 	%f492, %r151;
	mov.b32 	%f493, %r152;
	mul.f32 	%f494, %f90, %f490;
	mul.f32 	%f495, %f90, %f491;
	mul.f32 	%f496, %f90, %f492;
	mul.f32 	%f497, %f90, %f493;
	fma.rn.f32 	%f890, %f489, %f890, %f494;
	fma.rn.f32 	%f889, %f489, %f889, %f495;
	fma.rn.f32 	%f888, %f489, %f888, %f496;
	fma.rn.f32 	%f887, %f489, %f887, %f497;
	add.s64 	%rd130, %rd136, 96;
	// begin inline asm
	cvta.to.global.u64 %rd129, %rd130;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r153,%r154,%r155,%r156}, [%rd129];
	// end inline asm
	mov.b32 	%f498, %r153;
	mov.b32 	%f499, %r154;
	mov.b32 	%f500, %r155;
	mov.b32 	%f501, %r156;
	mul.f32 	%f502, %f90, %f498;
	mul.f32 	%f503, %f90, %f499;
	mul.f32 	%f504, %f90, %f500;
	mul.f32 	%f505, %f90, %f501;
	fma.rn.f32 	%f894, %f489, %f894, %f502;
	fma.rn.f32 	%f893, %f489, %f893, %f503;
	fma.rn.f32 	%f892, %f489, %f892, %f504;
	fma.rn.f32 	%f891, %f489, %f891, %f505;
	add.s64 	%rd133, %rd136, 112;
	// begin inline asm
	cvta.to.global.u64 %rd132, %rd133;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r157,%r158,%r159,%r160}, [%rd132];
	// end inline asm
	mov.b32 	%f506, %r157;
	mov.b32 	%f507, %r158;
	mov.b32 	%f508, %r159;
	mov.b32 	%f509, %r160;
	mul.f32 	%f510, %f90, %f506;
	mul.f32 	%f511, %f90, %f507;
	mul.f32 	%f512, %f90, %f508;
	mul.f32 	%f513, %f90, %f509;
	fma.rn.f32 	%f898, %f489, %f898, %f510;
	fma.rn.f32 	%f897, %f489, %f897, %f511;
	fma.rn.f32 	%f896, %f489, %f896, %f512;
	fma.rn.f32 	%f895, %f489, %f895, %f513;
	bra.uni 	$L__BB6_15;

$L__BB6_4:
	mov.f32 	%f899, 0f00000000;
	mov.f32 	%f902, 0f3F800000;
	setp.eq.s32 	%p4, %r13, 4;
	@%p4 bra 	$L__BB6_7;

	setp.ne.s32 	%p5, %r13, 1;
	mov.f32 	%f900, %f899;
	mov.f32 	%f901, %f899;
	mov.f32 	%f903, %f899;
	mov.f32 	%f904, %f899;
	mov.f32 	%f905, %f902;
	mov.f32 	%f906, %f899;
	mov.f32 	%f907, %f899;
	mov.f32 	%f908, %f902;
	mov.f32 	%f909, %f899;
	mov.f32 	%f910, %f899;
	@%p5 bra 	$L__BB6_16;

	// begin inline asm
	call (%rd20), _optix_get_static_transform_from_handle, (%rd18);
	// end inline asm
	add.s64 	%rd256, %rd20, 64;
	bra.uni 	$L__BB6_8;

$L__BB6_10:
	// begin inline asm
	call (%rd33), _optix_get_srt_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd35, %rd33;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r27,%r28,%r29,%r30}, [%rd35];
	// end inline asm
	add.s64 	%rd39, %rd33, 16;
	// begin inline asm
	cvta.to.global.u64 %rd38, %rd39;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r31,%r32,%r33,%r34}, [%rd38];
	// end inline asm
	add.s64 	%rd42, %rd33, 32;
	// begin inline asm
	cvta.to.global.u64 %rd41, %rd42;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r35,%r36,%r37,%r38}, [%rd41];
	// end inline asm
	add.s64 	%rd45, %rd33, 48;
	// begin inline asm
	cvta.to.global.u64 %rd44, %rd45;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r39,%r40,%r41,%r42}, [%rd44];
	// end inline asm
	add.s64 	%rd48, %rd33, 64;
	// begin inline asm
	cvta.to.global.u64 %rd47, %rd48;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r43,%r44,%r45,%r46}, [%rd47];
	// end inline asm
	add.s64 	%rd51, %rd33, 80;
	// begin inline asm
	cvta.to.global.u64 %rd50, %rd51;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd50];
	// end inline asm
	add.s64 	%rd54, %rd33, 96;
	// begin inline asm
	cvta.to.global.u64 %rd53, %rd54;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd53];
	// end inline asm
	add.s64 	%rd57, %rd33, 112;
	// begin inline asm
	cvta.to.global.u64 %rd56, %rd57;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd56];
	// end inline asm
	add.s64 	%rd60, %rd33, 128;
	// begin inline asm
	cvta.to.global.u64 %rd59, %rd60;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd59];
	// end inline asm
	add.s64 	%rd63, %rd33, 144;
	// begin inline asm
	cvta.to.global.u64 %rd62, %rd63;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd62];
	// end inline asm
	mov.b32 	%f358, %r30;
	mov.b32 	%f359, %r31;
	and.b32  	%r83, %r29, 65535;
	add.s32 	%r84, %r83, -1;
	cvt.rn.f32.s32 	%f360, %r84;
	sub.f32 	%f361, %f343, %f358;
	sub.f32 	%f362, %f359, %f358;
	div.approx.f32 	%f363, %f361, %f362;
	mul.f32 	%f364, %f363, %f360;
	min.f32 	%f365, %f360, %f364;
	mov.f32 	%f366, 0f00000000;
	max.f32 	%f367, %f366, %f365;
	setp.num.f32 	%p7, %f367, %f367;
	selp.f32 	%f368, %f367, 0f00000000, %p7;
	cvt.rmi.f32.f32 	%f369, %f368;
	add.f32 	%f370, %f360, 0fBF800000;
	min.f32 	%f371, %f369, %f370;
	sub.f32 	%f29, %f368, %f371;
	cvt.rzi.s32.f32 	%r85, %f371;
	mul.wide.s32 	%rd77, %r85, 64;
	add.s64 	%rd66, %rd42, %rd77;
	// begin inline asm
	cvta.to.global.u64 %rd65, %rd66;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd65];
	// end inline asm
	mov.b32 	%f871, %r67;
	mov.b32 	%f872, %r68;
	mov.b32 	%f873, %r69;
	mov.b32 	%f874, %r70;
	add.s64 	%rd69, %rd66, 16;
	// begin inline asm
	cvta.to.global.u64 %rd68, %rd69;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd68];
	// end inline asm
	mov.b32 	%f875, %r71;
	mov.b32 	%f876, %r72;
	mov.b32 	%f877, %r73;
	mov.b32 	%f878, %r74;
	add.s64 	%rd72, %rd66, 32;
	// begin inline asm
	cvta.to.global.u64 %rd71, %rd72;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd71];
	// end inline asm
	mov.b32 	%f879, %r75;
	mov.b32 	%f880, %r76;
	mov.b32 	%f881, %r77;
	mov.b32 	%f882, %r78;
	add.s64 	%rd75, %rd66, 48;
	// begin inline asm
	cvta.to.global.u64 %rd74, %rd75;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd74];
	// end inline asm
	mov.b32 	%f883, %r79;
	mov.b32 	%f884, %r80;
	mov.b32 	%f885, %r81;
	mov.b32 	%f886, %r82;
	setp.leu.f32 	%p8, %f29, 0f00000000;
	@%p8 bra 	$L__BB6_12;

	mov.f32 	%f372, 0f3F800000;
	sub.f32 	%f373, %f372, %f29;
	add.s64 	%rd79, %rd66, 64;
	// begin inline asm
	cvta.to.global.u64 %rd78, %rd79;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r86,%r87,%r88,%r89}, [%rd78];
	// end inline asm
	mov.b32 	%f374, %r86;
	mov.b32 	%f375, %r87;
	mov.b32 	%f376, %r88;
	mov.b32 	%f377, %r89;
	mul.f32 	%f378, %f29, %f374;
	mul.f32 	%f379, %f29, %f375;
	mul.f32 	%f380, %f29, %f376;
	mul.f32 	%f381, %f29, %f377;
	fma.rn.f32 	%f871, %f373, %f871, %f378;
	fma.rn.f32 	%f872, %f373, %f872, %f379;
	fma.rn.f32 	%f873, %f373, %f873, %f380;
	fma.rn.f32 	%f874, %f373, %f874, %f381;
	add.s64 	%rd82, %rd66, 80;
	// begin inline asm
	cvta.to.global.u64 %rd81, %rd82;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r90,%r91,%r92,%r93}, [%rd81];
	// end inline asm
	mov.b32 	%f382, %r90;
	mov.b32 	%f383, %r91;
	mov.b32 	%f384, %r92;
	mov.b32 	%f385, %r93;
	mul.f32 	%f386, %f29, %f382;
	mul.f32 	%f387, %f29, %f383;
	mul.f32 	%f388, %f29, %f384;
	mul.f32 	%f389, %f29, %f385;
	fma.rn.f32 	%f875, %f373, %f875, %f386;
	fma.rn.f32 	%f876, %f373, %f876, %f387;
	fma.rn.f32 	%f877, %f373, %f877, %f388;
	fma.rn.f32 	%f878, %f373, %f878, %f389;
	add.s64 	%rd85, %rd66, 96;
	// begin inline asm
	cvta.to.global.u64 %rd84, %rd85;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r94,%r95,%r96,%r97}, [%rd84];
	// end inline asm
	mov.b32 	%f390, %r94;
	mov.b32 	%f391, %r95;
	mov.b32 	%f392, %r96;
	mov.b32 	%f393, %r97;
	mul.f32 	%f394, %f29, %f390;
	mul.f32 	%f395, %f29, %f391;
	mul.f32 	%f396, %f29, %f392;
	mul.f32 	%f397, %f29, %f393;
	fma.rn.f32 	%f879, %f373, %f879, %f394;
	fma.rn.f32 	%f398, %f373, %f880, %f395;
	fma.rn.f32 	%f399, %f373, %f881, %f396;
	fma.rn.f32 	%f400, %f373, %f882, %f397;
	add.s64 	%rd88, %rd66, 112;
	// begin inline asm
	cvta.to.global.u64 %rd87, %rd88;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r98,%r99,%r100,%r101}, [%rd87];
	// end inline asm
	mov.b32 	%f401, %r98;
	mov.b32 	%f402, %r99;
	mov.b32 	%f403, %r100;
	mov.b32 	%f404, %r101;
	mul.f32 	%f405, %f29, %f401;
	mul.f32 	%f406, %f29, %f402;
	mul.f32 	%f407, %f29, %f403;
	mul.f32 	%f408, %f29, %f404;
	fma.rn.f32 	%f409, %f373, %f883, %f405;
	fma.rn.f32 	%f884, %f373, %f884, %f406;
	fma.rn.f32 	%f885, %f373, %f885, %f407;
	fma.rn.f32 	%f886, %f373, %f886, %f408;
	mul.f32 	%f410, %f399, %f399;
	fma.rn.f32 	%f411, %f398, %f398, %f410;
	fma.rn.f32 	%f412, %f400, %f400, %f411;
	fma.rn.f32 	%f413, %f409, %f409, %f412;
	sqrt.rn.f32 	%f414, %f413;
	rcp.rn.f32 	%f415, %f414;
	mul.f32 	%f880, %f398, %f415;
	mul.f32 	%f881, %f399, %f415;
	mul.f32 	%f882, %f400, %f415;
	mul.f32 	%f883, %f415, %f409;

$L__BB6_12:
	mul.f32 	%f416, %f881, %f881;
	fma.rn.f32 	%f417, %f880, %f880, %f416;
	fma.rn.f32 	%f418, %f882, %f882, %f417;
	fma.rn.f32 	%f419, %f883, %f883, %f418;
	rcp.rn.f32 	%f420, %f419;
	mul.f32 	%f421, %f880, %f420;
	mul.f32 	%f422, %f881, %f420;
	mul.f32 	%f423, %f882, %f420;
	mul.f32 	%f424, %f883, %f420;
	mul.f32 	%f425, %f880, %f421;
	mul.f32 	%f426, %f881, %f422;
	mul.f32 	%f427, %f882, %f423;
	mul.f32 	%f428, %f880, %f422;
	mul.f32 	%f429, %f882, %f424;
	mul.f32 	%f430, %f880, %f423;
	mul.f32 	%f431, %f881, %f424;
	mul.f32 	%f432, %f881, %f423;
	mul.f32 	%f433, %f880, %f424;
	sub.f32 	%f434, %f425, %f426;
	sub.f32 	%f435, %f434, %f427;
	fma.rn.f32 	%f436, %f883, %f424, %f435;
	sub.f32 	%f437, %f428, %f429;
	add.f32 	%f438, %f437, %f437;
	add.f32 	%f439, %f430, %f431;
	add.f32 	%f440, %f439, %f439;
	add.f32 	%f441, %f428, %f429;
	add.f32 	%f442, %f441, %f441;
	sub.f32 	%f443, %f426, %f425;
	sub.f32 	%f444, %f443, %f427;
	fma.rn.f32 	%f445, %f883, %f424, %f444;
	sub.f32 	%f446, %f432, %f433;
	add.f32 	%f447, %f446, %f446;
	sub.f32 	%f448, %f430, %f431;
	add.f32 	%f449, %f448, %f448;
	add.f32 	%f450, %f432, %f433;
	add.f32 	%f451, %f450, %f450;
	neg.f32 	%f452, %f425;
	sub.f32 	%f453, %f452, %f426;
	add.f32 	%f454, %f427, %f453;
	fma.rn.f32 	%f455, %f883, %f424, %f454;
	mul.f32 	%f456, %f874, %f436;
	fma.rn.f32 	%f457, %f877, %f438, %f456;
	fma.rn.f32 	%f458, %f879, %f440, %f457;
	add.f32 	%f887, %f884, %f458;
	mul.f32 	%f459, %f877, %f445;
	fma.rn.f32 	%f460, %f874, %f442, %f459;
	fma.rn.f32 	%f461, %f879, %f447, %f460;
	add.f32 	%f891, %f885, %f461;
	mul.f32 	%f462, %f877, %f451;
	fma.rn.f32 	%f463, %f874, %f449, %f462;
	fma.rn.f32 	%f464, %f879, %f455, %f463;
	add.f32 	%f895, %f886, %f464;
	mul.f32 	%f465, %f873, %f436;
	fma.rn.f32 	%f466, %f876, %f438, %f465;
	fma.rn.f32 	%f888, %f878, %f440, %f466;
	mul.f32 	%f467, %f876, %f445;
	fma.rn.f32 	%f468, %f873, %f442, %f467;
	fma.rn.f32 	%f892, %f878, %f447, %f468;
	mul.f32 	%f469, %f876, %f451;
	fma.rn.f32 	%f470, %f873, %f449, %f469;
	fma.rn.f32 	%f896, %f878, %f455, %f470;
	mul.f32 	%f471, %f872, %f436;
	fma.rn.f32 	%f889, %f875, %f438, %f471;
	mul.f32 	%f472, %f875, %f445;
	fma.rn.f32 	%f893, %f872, %f442, %f472;
	mul.f32 	%f473, %f875, %f451;
	fma.rn.f32 	%f897, %f872, %f449, %f473;
	mul.f32 	%f890, %f871, %f436;
	mul.f32 	%f894, %f871, %f442;
	mul.f32 	%f898, %f871, %f449;

$L__BB6_15:
	mul.f32 	%f514, %f892, %f897;
	mul.f32 	%f515, %f893, %f896;
	sub.f32 	%f516, %f515, %f514;
	mul.f32 	%f517, %f890, %f516;
	mul.f32 	%f518, %f892, %f898;
	mul.f32 	%f519, %f894, %f896;
	sub.f32 	%f520, %f519, %f518;
	mul.f32 	%f521, %f889, %f520;
	sub.f32 	%f522, %f517, %f521;
	mul.f32 	%f523, %f893, %f898;
	mul.f32 	%f524, %f894, %f897;
	sub.f32 	%f525, %f524, %f523;
	fma.rn.f32 	%f526, %f888, %f525, %f522;
	rcp.rn.f32 	%f527, %f526;
	mul.f32 	%f902, %f516, %f527;
	mul.f32 	%f528, %f889, %f896;
	mul.f32 	%f529, %f888, %f897;
	sub.f32 	%f530, %f529, %f528;
	mul.f32 	%f901, %f530, %f527;
	mul.f32 	%f531, %f888, %f893;
	mul.f32 	%f532, %f889, %f892;
	sub.f32 	%f533, %f532, %f531;
	mul.f32 	%f900, %f533, %f527;
	sub.f32 	%f534, %f518, %f519;
	mul.f32 	%f906, %f534, %f527;
	mul.f32 	%f535, %f888, %f898;
	mul.f32 	%f536, %f890, %f896;
	sub.f32 	%f537, %f536, %f535;
	mul.f32 	%f905, %f537, %f527;
	mul.f32 	%f538, %f890, %f892;
	mul.f32 	%f539, %f888, %f894;
	sub.f32 	%f540, %f539, %f538;
	mul.f32 	%f904, %f540, %f527;
	mul.f32 	%f910, %f525, %f527;
	mul.f32 	%f541, %f890, %f897;
	mul.f32 	%f542, %f889, %f898;
	sub.f32 	%f543, %f542, %f541;
	mul.f32 	%f909, %f543, %f527;
	mul.f32 	%f544, %f889, %f894;
	mul.f32 	%f545, %f890, %f893;
	sub.f32 	%f546, %f545, %f544;
	mul.f32 	%f908, %f546, %f527;
	mul.f32 	%f547, %f887, %f902;
	neg.f32 	%f548, %f547;
	mul.f32 	%f549, %f891, %f901;
	sub.f32 	%f550, %f548, %f549;
	mul.f32 	%f551, %f895, %f900;
	sub.f32 	%f899, %f550, %f551;
	mul.f32 	%f552, %f887, %f906;
	neg.f32 	%f553, %f552;
	mul.f32 	%f554, %f891, %f905;
	sub.f32 	%f555, %f553, %f554;
	mul.f32 	%f556, %f895, %f904;
	sub.f32 	%f903, %f555, %f556;
	mul.f32 	%f557, %f887, %f910;
	neg.f32 	%f558, %f557;
	mul.f32 	%f559, %f891, %f909;
	sub.f32 	%f560, %f558, %f559;
	mul.f32 	%f561, %f895, %f908;
	sub.f32 	%f907, %f560, %f561;
	bra.uni 	$L__BB6_16;

$L__BB6_7:
	// begin inline asm
	call (%rd256), _optix_get_instance_inverse_transform_from_handle, (%rd18);
	// end inline asm

$L__BB6_8:
	// begin inline asm
	cvta.to.global.u64 %rd24, %rd256;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r15,%r16,%r17,%r18}, [%rd24];
	// end inline asm
	mov.b32 	%f902, %r15;
	mov.b32 	%f901, %r16;
	mov.b32 	%f900, %r17;
	mov.b32 	%f899, %r18;
	add.s64 	%rd28, %rd256, 16;
	// begin inline asm
	cvta.to.global.u64 %rd27, %rd28;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r19,%r20,%r21,%r22}, [%rd27];
	// end inline asm
	mov.b32 	%f906, %r19;
	mov.b32 	%f905, %r20;
	mov.b32 	%f904, %r21;
	mov.b32 	%f903, %r22;
	add.s64 	%rd31, %rd256, 32;
	// begin inline asm
	cvta.to.global.u64 %rd30, %rd31;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r23,%r24,%r25,%r26}, [%rd30];
	// end inline asm
	mov.b32 	%f910, %r23;
	mov.b32 	%f909, %r24;
	mov.b32 	%f908, %r25;
	mov.b32 	%f907, %r26;

$L__BB6_16:
	setp.eq.s32 	%p11, %r328, 0;
	@%p11 bra 	$L__BB6_18;

	mul.f32 	%f562, %f867, %f902;
	fma.rn.f32 	%f563, %f863, %f901, %f562;
	fma.rn.f32 	%f151, %f859, %f900, %f563;
	mul.f32 	%f564, %f868, %f902;
	fma.rn.f32 	%f565, %f864, %f901, %f564;
	fma.rn.f32 	%f152, %f860, %f900, %f565;
	mul.f32 	%f566, %f869, %f902;
	fma.rn.f32 	%f567, %f865, %f901, %f566;
	fma.rn.f32 	%f153, %f861, %f900, %f567;
	mul.f32 	%f568, %f870, %f902;
	fma.rn.f32 	%f569, %f866, %f901, %f568;
	fma.rn.f32 	%f570, %f862, %f900, %f569;
	add.f32 	%f899, %f899, %f570;
	mul.f32 	%f571, %f867, %f906;
	fma.rn.f32 	%f572, %f863, %f905, %f571;
	fma.rn.f32 	%f155, %f859, %f904, %f572;
	mul.f32 	%f573, %f868, %f906;
	fma.rn.f32 	%f574, %f864, %f905, %f573;
	fma.rn.f32 	%f156, %f860, %f904, %f574;
	mul.f32 	%f575, %f869, %f906;
	fma.rn.f32 	%f576, %f865, %f905, %f575;
	fma.rn.f32 	%f157, %f861, %f904, %f576;
	mul.f32 	%f577, %f870, %f906;
	fma.rn.f32 	%f578, %f866, %f905, %f577;
	fma.rn.f32 	%f579, %f862, %f904, %f578;
	add.f32 	%f903, %f903, %f579;
	mul.f32 	%f580, %f867, %f910;
	fma.rn.f32 	%f581, %f863, %f909, %f580;
	fma.rn.f32 	%f159, %f859, %f908, %f581;
	mul.f32 	%f582, %f868, %f910;
	fma.rn.f32 	%f583, %f864, %f909, %f582;
	fma.rn.f32 	%f160, %f860, %f908, %f583;
	mul.f32 	%f584, %f869, %f910;
	fma.rn.f32 	%f585, %f865, %f909, %f584;
	fma.rn.f32 	%f161, %f861, %f908, %f585;
	mul.f32 	%f586, %f870, %f910;
	fma.rn.f32 	%f587, %f866, %f909, %f586;
	fma.rn.f32 	%f588, %f862, %f908, %f587;
	add.f32 	%f907, %f907, %f588;
	mov.f32 	%f900, %f153;
	mov.f32 	%f901, %f152;
	mov.f32 	%f902, %f151;
	mov.f32 	%f904, %f157;
	mov.f32 	%f905, %f156;
	mov.f32 	%f906, %f155;
	mov.f32 	%f908, %f161;
	mov.f32 	%f909, %f160;
	mov.f32 	%f910, %f159;

$L__BB6_18:
	add.s32 	%r328, %r328, 1;
	setp.lt.u32 	%p12, %r328, %r10;
	mov.f32 	%f859, %f910;
	mov.f32 	%f860, %f909;
	mov.f32 	%f861, %f908;
	mov.f32 	%f862, %f907;
	mov.f32 	%f863, %f906;
	mov.f32 	%f864, %f905;
	mov.f32 	%f865, %f904;
	mov.f32 	%f866, %f903;
	mov.f32 	%f867, %f902;
	mov.f32 	%f868, %f901;
	mov.f32 	%f869, %f900;
	mov.f32 	%f870, %f899;
	@%p12 bra 	$L__BB6_3;

$L__BB6_19:
	mul.f32 	%f589, %f935, %f902;
	fma.rn.f32 	%f590, %f936, %f901, %f589;
	fma.rn.f32 	%f591, %f937, %f900, %f590;
	mul.f32 	%f592, %f935, %f906;
	fma.rn.f32 	%f593, %f936, %f905, %f592;
	fma.rn.f32 	%f594, %f937, %f904, %f593;
	mul.f32 	%f595, %f935, %f910;
	fma.rn.f32 	%f596, %f936, %f909, %f595;
	fma.rn.f32 	%f597, %f937, %f908, %f596;
	add.f32 	%f937, %f907, %f597;
	add.f32 	%f936, %f903, %f594;
	add.f32 	%f935, %f899, %f591;

$L__BB6_20:
	// begin inline asm
	call (%f993), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f994), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f600), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%r161), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p13, %r161, 0;
	@%p13 bra 	$L__BB6_40;

	// begin inline asm
	call (%r162), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f601), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p14, %r162, 0;
	@%p14 bra 	$L__BB6_39;

	mov.u32 	%r329, 0;

$L__BB6_23:
	.pragma "nounroll";
	// begin inline asm
	call (%rd137), _optix_get_transform_list_handle, (%r329);
	// end inline asm
	// begin inline asm
	call (%r165), _optix_get_transform_type_from_handle, (%rd137);
	// end inline asm
	or.b32  	%r166, %r165, 1;
	setp.eq.s32 	%p15, %r166, 3;
	@%p15 bra 	$L__BB6_29;
	bra.uni 	$L__BB6_24;

$L__BB6_29:
	setp.eq.s32 	%p18, %r165, 2;
	@%p18 bra 	$L__BB6_33;
	bra.uni 	$L__BB6_30;

$L__BB6_33:
	// begin inline asm
	call (%rd209), _optix_get_matrix_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd211, %rd209;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r254,%r255,%r256,%r257}, [%rd211];
	// end inline asm
	add.s64 	%rd215, %rd209, 16;
	// begin inline asm
	cvta.to.global.u64 %rd214, %rd215;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r258,%r259,%r260,%r261}, [%rd214];
	// end inline asm
	add.s64 	%rd218, %rd209, 32;
	// begin inline asm
	cvta.to.global.u64 %rd217, %rd218;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r262,%r263,%r264,%r265}, [%rd217];
	// end inline asm
	add.s64 	%rd221, %rd209, 48;
	// begin inline asm
	cvta.to.global.u64 %rd220, %rd221;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r266,%r267,%r268,%r269}, [%rd220];
	// end inline asm
	add.s64 	%rd224, %rd209, 64;
	// begin inline asm
	cvta.to.global.u64 %rd223, %rd224;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r270,%r271,%r272,%r273}, [%rd223];
	// end inline asm
	add.s64 	%rd227, %rd209, 80;
	// begin inline asm
	cvta.to.global.u64 %rd226, %rd227;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r274,%r275,%r276,%r277}, [%rd226];
	// end inline asm
	add.s64 	%rd230, %rd209, 96;
	// begin inline asm
	cvta.to.global.u64 %rd229, %rd230;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r278,%r279,%r280,%r281}, [%rd229];
	// end inline asm
	add.s64 	%rd233, %rd209, 112;
	// begin inline asm
	cvta.to.global.u64 %rd232, %rd233;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r282,%r283,%r284,%r285}, [%rd232];
	// end inline asm
	mov.b32 	%f708, %r257;
	mov.b32 	%f709, %r258;
	and.b32  	%r298, %r256, 65535;
	add.s32 	%r299, %r298, -1;
	cvt.rn.f32.s32 	%f710, %r299;
	sub.f32 	%f711, %f601, %f708;
	sub.f32 	%f712, %f709, %f708;
	div.approx.f32 	%f713, %f711, %f712;
	mul.f32 	%f714, %f713, %f710;
	min.f32 	%f715, %f710, %f714;
	mov.f32 	%f716, 0f00000000;
	max.f32 	%f717, %f716, %f715;
	setp.num.f32 	%p21, %f717, %f717;
	selp.f32 	%f718, %f717, 0f00000000, %p21;
	cvt.rmi.f32.f32 	%f719, %f718;
	add.f32 	%f720, %f710, 0fBF800000;
	min.f32 	%f721, %f719, %f720;
	sub.f32 	%f258, %f718, %f721;
	cvt.rzi.s32.f32 	%r300, %f721;
	cvt.s64.s32 	%rd16, %r300;
	mul.wide.s32 	%rd244, %r300, 48;
	add.s64 	%rd236, %rd218, %rd244;
	// begin inline asm
	cvta.to.global.u64 %rd235, %rd236;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r286,%r287,%r288,%r289}, [%rd235];
	// end inline asm
	mov.b32 	%f963, %r286;
	mov.b32 	%f964, %r287;
	mov.b32 	%f965, %r288;
	add.s64 	%rd239, %rd236, 16;
	// begin inline asm
	cvta.to.global.u64 %rd238, %rd239;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r290,%r291,%r292,%r293}, [%rd238];
	// end inline asm
	mov.b32 	%f960, %r290;
	mov.b32 	%f961, %r291;
	mov.b32 	%f962, %r292;
	add.s64 	%rd242, %rd236, 32;
	// begin inline asm
	cvta.to.global.u64 %rd241, %rd242;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r294,%r295,%r296,%r297}, [%rd241];
	// end inline asm
	mov.b32 	%f957, %r294;
	mov.b32 	%f958, %r295;
	mov.b32 	%f959, %r296;
	setp.leu.f32 	%p22, %f258, 0f00000000;
	@%p22 bra 	$L__BB6_35;

	mov.f32 	%f722, 0f3F800000;
	sub.f32 	%f723, %f722, %f258;
	mul.lo.s64 	%rd254, %rd16, 48;
	add.s64 	%rd255, %rd209, %rd254;
	add.s64 	%rd246, %rd255, 80;
	// begin inline asm
	cvta.to.global.u64 %rd245, %rd246;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r301,%r302,%r303,%r304}, [%rd245];
	// end inline asm
	mov.b32 	%f724, %r301;
	mov.b32 	%f725, %r302;
	mov.b32 	%f726, %r303;
	mul.f32 	%f727, %f258, %f724;
	mul.f32 	%f728, %f258, %f725;
	mul.f32 	%f729, %f258, %f726;
	fma.rn.f32 	%f963, %f723, %f963, %f727;
	fma.rn.f32 	%f964, %f723, %f964, %f728;
	fma.rn.f32 	%f965, %f723, %f965, %f729;
	add.s64 	%rd249, %rd255, 96;
	// begin inline asm
	cvta.to.global.u64 %rd248, %rd249;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r305,%r306,%r307,%r308}, [%rd248];
	// end inline asm
	mov.b32 	%f730, %r305;
	mov.b32 	%f731, %r306;
	mov.b32 	%f732, %r307;
	mul.f32 	%f733, %f258, %f730;
	mul.f32 	%f734, %f258, %f731;
	mul.f32 	%f735, %f258, %f732;
	fma.rn.f32 	%f960, %f723, %f960, %f733;
	fma.rn.f32 	%f961, %f723, %f961, %f734;
	fma.rn.f32 	%f962, %f723, %f962, %f735;
	add.s64 	%rd252, %rd255, 112;
	// begin inline asm
	cvta.to.global.u64 %rd251, %rd252;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r309,%r310,%r311,%r312}, [%rd251];
	// end inline asm
	mov.b32 	%f736, %r309;
	mov.b32 	%f737, %r310;
	mov.b32 	%f738, %r311;
	mul.f32 	%f739, %f258, %f736;
	mul.f32 	%f740, %f258, %f737;
	mul.f32 	%f741, %f258, %f738;
	fma.rn.f32 	%f957, %f723, %f957, %f739;
	fma.rn.f32 	%f958, %f723, %f958, %f740;
	fma.rn.f32 	%f959, %f723, %f959, %f741;
	bra.uni 	$L__BB6_35;

$L__BB6_24:
	mov.f32 	%f966, 0f00000000;
	mov.f32 	%f968, 0f3F800000;
	setp.eq.s32 	%p16, %r165, 4;
	@%p16 bra 	$L__BB6_27;

	setp.ne.s32 	%p17, %r165, 1;
	mov.f32 	%f967, %f966;
	mov.f32 	%f969, %f966;
	mov.f32 	%f970, %f968;
	mov.f32 	%f971, %f966;
	mov.f32 	%f972, %f968;
	mov.f32 	%f973, %f966;
	mov.f32 	%f974, %f966;
	@%p17 bra 	$L__BB6_36;

	// begin inline asm
	call (%rd139), _optix_get_static_transform_from_handle, (%rd137);
	// end inline asm
	add.s64 	%rd257, %rd139, 64;
	bra.uni 	$L__BB6_28;

$L__BB6_30:
	// begin inline asm
	call (%rd152), _optix_get_srt_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd154, %rd152;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r179,%r180,%r181,%r182}, [%rd154];
	// end inline asm
	add.s64 	%rd158, %rd152, 16;
	// begin inline asm
	cvta.to.global.u64 %rd157, %rd158;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r183,%r184,%r185,%r186}, [%rd157];
	// end inline asm
	add.s64 	%rd161, %rd152, 32;
	// begin inline asm
	cvta.to.global.u64 %rd160, %rd161;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r187,%r188,%r189,%r190}, [%rd160];
	// end inline asm
	add.s64 	%rd164, %rd152, 48;
	// begin inline asm
	cvta.to.global.u64 %rd163, %rd164;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r191,%r192,%r193,%r194}, [%rd163];
	// end inline asm
	add.s64 	%rd167, %rd152, 64;
	// begin inline asm
	cvta.to.global.u64 %rd166, %rd167;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r195,%r196,%r197,%r198}, [%rd166];
	// end inline asm
	add.s64 	%rd170, %rd152, 80;
	// begin inline asm
	cvta.to.global.u64 %rd169, %rd170;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r199,%r200,%r201,%r202}, [%rd169];
	// end inline asm
	add.s64 	%rd173, %rd152, 96;
	// begin inline asm
	cvta.to.global.u64 %rd172, %rd173;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r203,%r204,%r205,%r206}, [%rd172];
	// end inline asm
	add.s64 	%rd176, %rd152, 112;
	// begin inline asm
	cvta.to.global.u64 %rd175, %rd176;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r207,%r208,%r209,%r210}, [%rd175];
	// end inline asm
	add.s64 	%rd179, %rd152, 128;
	// begin inline asm
	cvta.to.global.u64 %rd178, %rd179;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r211,%r212,%r213,%r214}, [%rd178];
	// end inline asm
	add.s64 	%rd182, %rd152, 144;
	// begin inline asm
	cvta.to.global.u64 %rd181, %rd182;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r215,%r216,%r217,%r218}, [%rd181];
	// end inline asm
	mov.b32 	%f613, %r182;
	mov.b32 	%f614, %r183;
	and.b32  	%r235, %r181, 65535;
	add.s32 	%r236, %r235, -1;
	cvt.rn.f32.s32 	%f615, %r236;
	sub.f32 	%f616, %f601, %f613;
	sub.f32 	%f617, %f614, %f613;
	div.approx.f32 	%f618, %f616, %f617;
	mul.f32 	%f619, %f618, %f615;
	min.f32 	%f620, %f615, %f619;
	mov.f32 	%f621, 0f00000000;
	max.f32 	%f622, %f621, %f620;
	setp.num.f32 	%p19, %f622, %f622;
	selp.f32 	%f623, %f622, 0f00000000, %p19;
	cvt.rmi.f32.f32 	%f624, %f623;
	add.f32 	%f625, %f615, 0fBF800000;
	min.f32 	%f626, %f624, %f625;
	sub.f32 	%f218, %f623, %f626;
	cvt.rzi.s32.f32 	%r237, %f626;
	mul.wide.s32 	%rd196, %r237, 64;
	add.s64 	%rd185, %rd161, %rd196;
	// begin inline asm
	cvta.to.global.u64 %rd184, %rd185;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r219,%r220,%r221,%r222}, [%rd184];
	// end inline asm
	mov.b32 	%f947, %r219;
	mov.b32 	%f948, %r220;
	mov.b32 	%f949, %r221;
	add.s64 	%rd188, %rd185, 16;
	// begin inline asm
	cvta.to.global.u64 %rd187, %rd188;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r223,%r224,%r225,%r226}, [%rd187];
	// end inline asm
	mov.b32 	%f950, %r223;
	mov.b32 	%f951, %r224;
	mov.b32 	%f952, %r226;
	add.s64 	%rd191, %rd185, 32;
	// begin inline asm
	cvta.to.global.u64 %rd190, %rd191;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r227,%r228,%r229,%r230}, [%rd190];
	// end inline asm
	mov.b32 	%f953, %r228;
	mov.b32 	%f954, %r229;
	mov.b32 	%f955, %r230;
	add.s64 	%rd194, %rd185, 48;
	// begin inline asm
	cvta.to.global.u64 %rd193, %rd194;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r231,%r232,%r233,%r234}, [%rd193];
	// end inline asm
	mov.b32 	%f956, %r231;
	setp.leu.f32 	%p20, %f218, 0f00000000;
	@%p20 bra 	$L__BB6_32;

	mov.f32 	%f627, 0f3F800000;
	sub.f32 	%f628, %f627, %f218;
	add.s64 	%rd198, %rd185, 64;
	// begin inline asm
	cvta.to.global.u64 %rd197, %rd198;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r238,%r239,%r240,%r241}, [%rd197];
	// end inline asm
	mov.b32 	%f629, %r238;
	mov.b32 	%f630, %r239;
	mov.b32 	%f631, %r240;
	mul.f32 	%f632, %f218, %f629;
	mul.f32 	%f633, %f218, %f630;
	mul.f32 	%f634, %f218, %f631;
	fma.rn.f32 	%f947, %f628, %f947, %f632;
	fma.rn.f32 	%f948, %f628, %f948, %f633;
	fma.rn.f32 	%f949, %f628, %f949, %f634;
	add.s64 	%rd201, %rd185, 80;
	// begin inline asm
	cvta.to.global.u64 %rd200, %rd201;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r242,%r243,%r244,%r245}, [%rd200];
	// end inline asm
	mov.b32 	%f635, %r242;
	mov.b32 	%f636, %r243;
	mov.b32 	%f637, %r245;
	mul.f32 	%f638, %f218, %f635;
	mul.f32 	%f639, %f218, %f636;
	mul.f32 	%f640, %f218, %f637;
	fma.rn.f32 	%f950, %f628, %f950, %f638;
	fma.rn.f32 	%f951, %f628, %f951, %f639;
	fma.rn.f32 	%f952, %f628, %f952, %f640;
	add.s64 	%rd204, %rd185, 96;
	// begin inline asm
	cvta.to.global.u64 %rd203, %rd204;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r246,%r247,%r248,%r249}, [%rd203];
	// end inline asm
	mov.b32 	%f641, %r247;
	mov.b32 	%f642, %r248;
	mov.b32 	%f643, %r249;
	mul.f32 	%f644, %f218, %f641;
	mul.f32 	%f645, %f218, %f642;
	mul.f32 	%f646, %f218, %f643;
	fma.rn.f32 	%f647, %f628, %f953, %f644;
	fma.rn.f32 	%f648, %f628, %f954, %f645;
	fma.rn.f32 	%f649, %f628, %f955, %f646;
	add.s64 	%rd207, %rd185, 112;
	// begin inline asm
	cvta.to.global.u64 %rd206, %rd207;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r250,%r251,%r252,%r253}, [%rd206];
	// end inline asm
	mov.b32 	%f650, %r250;
	mul.f32 	%f651, %f218, %f650;
	fma.rn.f32 	%f652, %f628, %f956, %f651;
	mul.f32 	%f653, %f648, %f648;
	fma.rn.f32 	%f654, %f647, %f647, %f653;
	fma.rn.f32 	%f655, %f649, %f649, %f654;
	fma.rn.f32 	%f656, %f652, %f652, %f655;
	sqrt.rn.f32 	%f657, %f656;
	rcp.rn.f32 	%f658, %f657;
	mul.f32 	%f953, %f647, %f658;
	mul.f32 	%f954, %f648, %f658;
	mul.f32 	%f955, %f649, %f658;
	mul.f32 	%f956, %f658, %f652;

$L__BB6_32:
	mul.f32 	%f659, %f954, %f954;
	fma.rn.f32 	%f660, %f953, %f953, %f659;
	fma.rn.f32 	%f661, %f955, %f955, %f660;
	fma.rn.f32 	%f662, %f956, %f956, %f661;
	rcp.rn.f32 	%f663, %f662;
	mul.f32 	%f664, %f953, %f663;
	mul.f32 	%f665, %f954, %f663;
	mul.f32 	%f666, %f955, %f663;
	mul.f32 	%f667, %f956, %f663;
	mul.f32 	%f668, %f953, %f664;
	mul.f32 	%f669, %f954, %f665;
	mul.f32 	%f670, %f955, %f666;
	mul.f32 	%f671, %f953, %f665;
	mul.f32 	%f672, %f955, %f667;
	mul.f32 	%f673, %f953, %f666;
	mul.f32 	%f674, %f954, %f667;
	mul.f32 	%f675, %f954, %f666;
	mul.f32 	%f676, %f953, %f667;
	sub.f32 	%f677, %f668, %f669;
	sub.f32 	%f678, %f677, %f670;
	fma.rn.f32 	%f679, %f956, %f667, %f678;
	sub.f32 	%f680, %f671, %f672;
	add.f32 	%f681, %f680, %f680;
	add.f32 	%f682, %f673, %f674;
	add.f32 	%f683, %f682, %f682;
	add.f32 	%f684, %f671, %f672;
	add.f32 	%f685, %f684, %f684;
	sub.f32 	%f686, %f669, %f668;
	sub.f32 	%f687, %f686, %f670;
	fma.rn.f32 	%f688, %f956, %f667, %f687;
	sub.f32 	%f689, %f675, %f676;
	add.f32 	%f690, %f689, %f689;
	sub.f32 	%f691, %f673, %f674;
	add.f32 	%f692, %f691, %f691;
	add.f32 	%f693, %f675, %f676;
	add.f32 	%f694, %f693, %f693;
	neg.f32 	%f695, %f668;
	sub.f32 	%f696, %f695, %f669;
	add.f32 	%f697, %f670, %f696;
	fma.rn.f32 	%f698, %f956, %f667, %f697;
	mul.f32 	%f699, %f949, %f679;
	fma.rn.f32 	%f700, %f951, %f681, %f699;
	fma.rn.f32 	%f965, %f952, %f683, %f700;
	mul.f32 	%f701, %f951, %f688;
	fma.rn.f32 	%f702, %f949, %f685, %f701;
	fma.rn.f32 	%f962, %f952, %f690, %f702;
	mul.f32 	%f703, %f951, %f694;
	fma.rn.f32 	%f704, %f949, %f692, %f703;
	fma.rn.f32 	%f959, %f952, %f698, %f704;
	mul.f32 	%f705, %f948, %f679;
	fma.rn.f32 	%f964, %f950, %f681, %f705;
	mul.f32 	%f706, %f950, %f688;
	fma.rn.f32 	%f961, %f948, %f685, %f706;
	mul.f32 	%f707, %f950, %f694;
	fma.rn.f32 	%f958, %f948, %f692, %f707;
	mul.f32 	%f963, %f947, %f679;
	mul.f32 	%f960, %f947, %f685;
	mul.f32 	%f957, %f947, %f692;

$L__BB6_35:
	mul.f32 	%f742, %f958, %f962;
	mul.f32 	%f743, %f959, %f961;
	sub.f32 	%f744, %f743, %f742;
	mul.f32 	%f745, %f963, %f744;
	mul.f32 	%f746, %f957, %f962;
	mul.f32 	%f747, %f959, %f960;
	sub.f32 	%f748, %f747, %f746;
	mul.f32 	%f749, %f748, %f964;
	sub.f32 	%f750, %f745, %f749;
	mul.f32 	%f751, %f957, %f961;
	mul.f32 	%f752, %f958, %f960;
	sub.f32 	%f753, %f752, %f751;
	fma.rn.f32 	%f754, %f753, %f965, %f750;
	rcp.rn.f32 	%f755, %f754;
	mul.f32 	%f972, %f744, %f755;
	mul.f32 	%f756, %f959, %f964;
	mul.f32 	%f757, %f958, %f965;
	sub.f32 	%f758, %f757, %f756;
	mul.f32 	%f973, %f758, %f755;
	mul.f32 	%f759, %f961, %f965;
	mul.f32 	%f760, %f962, %f964;
	sub.f32 	%f761, %f760, %f759;
	mul.f32 	%f974, %f761, %f755;
	sub.f32 	%f762, %f746, %f747;
	mul.f32 	%f969, %f762, %f755;
	mul.f32 	%f763, %f957, %f965;
	mul.f32 	%f764, %f959, %f963;
	sub.f32 	%f765, %f764, %f763;
	mul.f32 	%f970, %f765, %f755;
	mul.f32 	%f766, %f962, %f963;
	mul.f32 	%f767, %f960, %f965;
	sub.f32 	%f768, %f767, %f766;
	mul.f32 	%f971, %f768, %f755;
	mul.f32 	%f966, %f753, %f755;
	mul.f32 	%f769, %f958, %f963;
	mul.f32 	%f770, %f957, %f964;
	sub.f32 	%f771, %f770, %f769;
	mul.f32 	%f967, %f771, %f755;
	mul.f32 	%f772, %f960, %f964;
	mul.f32 	%f773, %f961, %f963;
	sub.f32 	%f774, %f773, %f772;
	mul.f32 	%f968, %f774, %f755;
	bra.uni 	$L__BB6_36;

$L__BB6_27:
	// begin inline asm
	call (%rd257), _optix_get_instance_inverse_transform_from_handle, (%rd137);
	// end inline asm

$L__BB6_28:
	// begin inline asm
	cvta.to.global.u64 %rd143, %rd257;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r167,%r168,%r169,%r170}, [%rd143];
	// end inline asm
	mov.b32 	%f972, %r167;
	mov.b32 	%f973, %r168;
	mov.b32 	%f974, %r169;
	add.s64 	%rd147, %rd257, 16;
	// begin inline asm
	cvta.to.global.u64 %rd146, %rd147;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r171,%r172,%r173,%r174}, [%rd146];
	// end inline asm
	mov.b32 	%f969, %r171;
	mov.b32 	%f970, %r172;
	mov.b32 	%f971, %r173;
	add.s64 	%rd150, %rd257, 32;
	// begin inline asm
	cvta.to.global.u64 %rd149, %rd150;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r175,%r176,%r177,%r178}, [%rd149];
	// end inline asm
	mov.b32 	%f966, %r175;
	mov.b32 	%f967, %r176;
	mov.b32 	%f968, %r177;

$L__BB6_36:
	setp.eq.s32 	%p23, %r329, 0;
	@%p23 bra 	$L__BB6_38;

	mul.f32 	%f775, %f943, %f973;
	fma.rn.f32 	%f776, %f940, %f972, %f775;
	fma.rn.f32 	%f304, %f946, %f974, %f776;
	mul.f32 	%f777, %f942, %f973;
	fma.rn.f32 	%f778, %f939, %f972, %f777;
	fma.rn.f32 	%f305, %f945, %f974, %f778;
	mul.f32 	%f779, %f941, %f973;
	fma.rn.f32 	%f780, %f938, %f972, %f779;
	fma.rn.f32 	%f974, %f944, %f974, %f780;
	mul.f32 	%f781, %f943, %f970;
	fma.rn.f32 	%f782, %f940, %f969, %f781;
	fma.rn.f32 	%f307, %f946, %f971, %f782;
	mul.f32 	%f783, %f942, %f970;
	fma.rn.f32 	%f784, %f939, %f969, %f783;
	fma.rn.f32 	%f308, %f945, %f971, %f784;
	mul.f32 	%f785, %f941, %f970;
	fma.rn.f32 	%f786, %f938, %f969, %f785;
	fma.rn.f32 	%f971, %f944, %f971, %f786;
	mul.f32 	%f787, %f943, %f967;
	fma.rn.f32 	%f788, %f940, %f966, %f787;
	fma.rn.f32 	%f310, %f946, %f968, %f788;
	mul.f32 	%f789, %f942, %f967;
	fma.rn.f32 	%f790, %f939, %f966, %f789;
	fma.rn.f32 	%f311, %f945, %f968, %f790;
	mul.f32 	%f791, %f941, %f967;
	fma.rn.f32 	%f792, %f938, %f966, %f791;
	fma.rn.f32 	%f968, %f944, %f968, %f792;
	mov.f32 	%f966, %f310;
	mov.f32 	%f967, %f311;
	mov.f32 	%f969, %f307;
	mov.f32 	%f970, %f308;
	mov.f32 	%f972, %f304;
	mov.f32 	%f973, %f305;

$L__BB6_38:
	add.s32 	%r329, %r329, 1;
	setp.lt.u32 	%p24, %r329, %r162;
	mov.f32 	%f938, %f974;
	mov.f32 	%f939, %f973;
	mov.f32 	%f940, %f972;
	mov.f32 	%f941, %f971;
	mov.f32 	%f942, %f970;
	mov.f32 	%f943, %f969;
	mov.f32 	%f944, %f968;
	mov.f32 	%f945, %f967;
	mov.f32 	%f946, %f966;
	@%p24 bra 	$L__BB6_23;

$L__BB6_39:
	mul.f32 	%f793, %f994, %f973;
	fma.rn.f32 	%f794, %f993, %f972, %f793;
	mul.f32 	%f795, %f994, %f970;
	fma.rn.f32 	%f796, %f993, %f969, %f795;
	mul.f32 	%f797, %f994, %f967;
	fma.rn.f32 	%f798, %f993, %f966, %f797;
	fma.rn.f32 	%f995, %f600, %f968, %f798;
	fma.rn.f32 	%f994, %f600, %f971, %f796;
	fma.rn.f32 	%f993, %f600, %f974, %f794;
	bra.uni 	$L__BB6_41;

$L__BB6_40:
	mov.f32 	%f995, %f600;

$L__BB6_41:
	// begin inline asm
	call (%f799), _optix_get_ray_tmin, ();
	// end inline asm
	fma.rn.f32 	%f802, %f993, %f799, %f935;
	fma.rn.f32 	%f803, %f994, %f799, %f936;
	fma.rn.f32 	%f804, %f995, %f799, %f937;
	ld.v4.f32 	{%f805, %f806, %f807, %f808}, [%rd2+32];
	mov.u32 	%r320, 0;
	mov.u32 	%r315, 1;
	mov.u32 	%r317, 2;
	mov.u32 	%r319, 3;
	mul.f32 	%f813, %f805, %f802;
	fma.rn.f32 	%f814, %f806, %f803, %f813;
	fma.rn.f32 	%f815, %f807, %f804, %f814;
	mov.f32 	%f816, 0f3F800000;
	fma.rn.f32 	%f817, %f808, %f816, %f815;
	ld.v4.f32 	{%f818, %f819, %f820, %f821}, [%rd2+48];
	mul.f32 	%f826, %f818, %f802;
	fma.rn.f32 	%f827, %f819, %f803, %f826;
	fma.rn.f32 	%f828, %f820, %f804, %f827;
	fma.rn.f32 	%f829, %f821, %f816, %f828;
	ld.v4.f32 	{%f830, %f831, %f832, %f833}, [%rd2+64];
	mul.f32 	%f838, %f830, %f802;
	fma.rn.f32 	%f839, %f831, %f803, %f838;
	fma.rn.f32 	%f840, %f832, %f804, %f839;
	fma.rn.f32 	%f841, %f833, %f816, %f840;
	mul.f32 	%f842, %f805, %f993;
	fma.rn.f32 	%f843, %f806, %f994, %f842;
	fma.rn.f32 	%f844, %f807, %f995, %f843;
	mov.f32 	%f845, 0f00000000;
	fma.rn.f32 	%f846, %f808, %f845, %f844;
	mul.f32 	%f847, %f818, %f993;
	fma.rn.f32 	%f848, %f819, %f994, %f847;
	fma.rn.f32 	%f849, %f820, %f995, %f848;
	fma.rn.f32 	%f850, %f821, %f845, %f849;
	mul.f32 	%f851, %f830, %f993;
	fma.rn.f32 	%f852, %f831, %f994, %f851;
	fma.rn.f32 	%f853, %f832, %f995, %f852;
	fma.rn.f32 	%f854, %f833, %f845, %f853;
	neg.f32 	%f855, %f841;
	div.rn.f32 	%f856, %f855, %f854;
	fma.rn.f32 	%f857, %f856, %f846, %f817;
	fma.rn.f32 	%f858, %f856, %f850, %f829;
	ld.u32 	%r322, [%rd17];
	mov.b32 	%r314, %f856;
	// begin inline asm
	call _optix_set_payload, (%r320, %r314);
	// end inline asm
	mov.b32 	%r316, %f857;
	// begin inline asm
	call _optix_set_payload, (%r315, %r316);
	// end inline asm
	mov.b32 	%r318, %f858;
	// begin inline asm
	call _optix_set_payload, (%r317, %r318);
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r319, %r320);
	// end inline asm
	mov.u32 	%r321, 4;
	// begin inline asm
	call _optix_set_payload, (%r321, %r322);
	// end inline asm
	mov.u32 	%r324, 5;
	// begin inline asm
	call (%r323), _optix_get_payload, (%r324);
	// end inline asm
	setp.eq.s32 	%p25, %r323, 0;
	@%p25 bra 	$L__BB6_43;

	// begin inline asm
	call (%r325), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r324, %r325);
	// end inline asm

$L__BB6_43:
	ret;

}
	// .globl	__intersection__sdfgrid
.visible .entry __intersection__sdfgrid()
{
	.reg .pred 	%p<112>;
	.reg .f32 	%f<1248>;
	.reg .b32 	%r<376>;
	.reg .b64 	%rd<277>;


	// begin inline asm
	call (%rd16), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u64 	%rd1, [%rd16+8];
	ld.u64 	%rd17, [%rd1];
	// begin inline asm
	call (%r17), _optix_read_primitive_idx, ();
	// end inline asm
	mul.wide.u32 	%rd18, %r17, 4;
	add.s64 	%rd19, %rd17, %rd18;
	ld.u32 	%r1, [%rd19];
	// begin inline asm
	call (%f1165), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f1166), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f1167), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%r18), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p5, %r18, 0;
	@%p5 bra 	$L__BB7_20;

	// begin inline asm
	call (%r19), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f417), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p6, %r19, 0;
	@%p6 bra 	$L__BB7_19;

	mov.u32 	%r373, 0;

$L__BB7_3:
	.pragma "nounroll";
	// begin inline asm
	call (%rd20), _optix_get_transform_list_handle, (%r373);
	// end inline asm
	// begin inline asm
	call (%r22), _optix_get_transform_type_from_handle, (%rd20);
	// end inline asm
	or.b32  	%r23, %r22, 1;
	setp.eq.s32 	%p7, %r23, 3;
	@%p7 bra 	$L__BB7_9;
	bra.uni 	$L__BB7_4;

$L__BB7_9:
	setp.eq.s32 	%p10, %r22, 2;
	@%p10 bra 	$L__BB7_13;
	bra.uni 	$L__BB7_10;

$L__BB7_13:
	// begin inline asm
	call (%rd92), _optix_get_matrix_motion_transform_from_handle, (%rd20);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd94, %rd92;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r111,%r112,%r113,%r114}, [%rd94];
	// end inline asm
	add.s64 	%rd98, %rd92, 16;
	// begin inline asm
	cvta.to.global.u64 %rd97, %rd98;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r115,%r116,%r117,%r118}, [%rd97];
	// end inline asm
	add.s64 	%rd101, %rd92, 32;
	// begin inline asm
	cvta.to.global.u64 %rd100, %rd101;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r119,%r120,%r121,%r122}, [%rd100];
	// end inline asm
	add.s64 	%rd104, %rd92, 48;
	// begin inline asm
	cvta.to.global.u64 %rd103, %rd104;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r123,%r124,%r125,%r126}, [%rd103];
	// end inline asm
	add.s64 	%rd107, %rd92, 64;
	// begin inline asm
	cvta.to.global.u64 %rd106, %rd107;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r127,%r128,%r129,%r130}, [%rd106];
	// end inline asm
	add.s64 	%rd110, %rd92, 80;
	// begin inline asm
	cvta.to.global.u64 %rd109, %rd110;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r131,%r132,%r133,%r134}, [%rd109];
	// end inline asm
	add.s64 	%rd113, %rd92, 96;
	// begin inline asm
	cvta.to.global.u64 %rd112, %rd113;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r135,%r136,%r137,%r138}, [%rd112];
	// end inline asm
	add.s64 	%rd116, %rd92, 112;
	// begin inline asm
	cvta.to.global.u64 %rd115, %rd116;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r139,%r140,%r141,%r142}, [%rd115];
	// end inline asm
	mov.b32 	%f548, %r114;
	mov.b32 	%f549, %r115;
	and.b32  	%r155, %r113, 65535;
	add.s32 	%r156, %r155, -1;
	cvt.rn.f32.s32 	%f550, %r156;
	sub.f32 	%f551, %f417, %f548;
	sub.f32 	%f552, %f549, %f548;
	div.approx.f32 	%f553, %f551, %f552;
	mul.f32 	%f554, %f553, %f550;
	min.f32 	%f555, %f550, %f554;
	mov.f32 	%f556, 0f00000000;
	max.f32 	%f557, %f556, %f555;
	setp.num.f32 	%p13, %f557, %f557;
	selp.f32 	%f558, %f557, 0f00000000, %p13;
	cvt.rmi.f32.f32 	%f559, %f558;
	add.f32 	%f560, %f550, 0fBF800000;
	min.f32 	%f561, %f559, %f560;
	sub.f32 	%f90, %f558, %f561;
	cvt.rzi.s32.f32 	%r157, %f561;
	cvt.s64.s32 	%rd8, %r157;
	mul.wide.s32 	%rd127, %r157, 48;
	add.s64 	%rd119, %rd101, %rd127;
	// begin inline asm
	cvta.to.global.u64 %rd118, %rd119;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r143,%r144,%r145,%r146}, [%rd118];
	// end inline asm
	mov.b32 	%f1125, %r143;
	mov.b32 	%f1126, %r144;
	mov.b32 	%f1127, %r145;
	mov.b32 	%f1128, %r146;
	add.s64 	%rd122, %rd119, 16;
	// begin inline asm
	cvta.to.global.u64 %rd121, %rd122;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r147,%r148,%r149,%r150}, [%rd121];
	// end inline asm
	mov.b32 	%f1121, %r147;
	mov.b32 	%f1122, %r148;
	mov.b32 	%f1123, %r149;
	mov.b32 	%f1124, %r150;
	add.s64 	%rd125, %rd119, 32;
	// begin inline asm
	cvta.to.global.u64 %rd124, %rd125;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r151,%r152,%r153,%r154}, [%rd124];
	// end inline asm
	mov.b32 	%f1117, %r151;
	mov.b32 	%f1118, %r152;
	mov.b32 	%f1119, %r153;
	mov.b32 	%f1120, %r154;
	setp.leu.f32 	%p14, %f90, 0f00000000;
	@%p14 bra 	$L__BB7_15;

	mov.f32 	%f562, 0f3F800000;
	sub.f32 	%f563, %f562, %f90;
	mul.lo.s64 	%rd137, %rd8, 48;
	add.s64 	%rd138, %rd92, %rd137;
	add.s64 	%rd129, %rd138, 80;
	// begin inline asm
	cvta.to.global.u64 %rd128, %rd129;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r158,%r159,%r160,%r161}, [%rd128];
	// end inline asm
	mov.b32 	%f564, %r158;
	mov.b32 	%f565, %r159;
	mov.b32 	%f566, %r160;
	mov.b32 	%f567, %r161;
	mul.f32 	%f568, %f90, %f564;
	mul.f32 	%f569, %f90, %f565;
	mul.f32 	%f570, %f90, %f566;
	mul.f32 	%f571, %f90, %f567;
	fma.rn.f32 	%f1125, %f563, %f1125, %f568;
	fma.rn.f32 	%f1126, %f563, %f1126, %f569;
	fma.rn.f32 	%f1127, %f563, %f1127, %f570;
	fma.rn.f32 	%f1128, %f563, %f1128, %f571;
	add.s64 	%rd132, %rd138, 96;
	// begin inline asm
	cvta.to.global.u64 %rd131, %rd132;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r162,%r163,%r164,%r165}, [%rd131];
	// end inline asm
	mov.b32 	%f572, %r162;
	mov.b32 	%f573, %r163;
	mov.b32 	%f574, %r164;
	mov.b32 	%f575, %r165;
	mul.f32 	%f576, %f90, %f572;
	mul.f32 	%f577, %f90, %f573;
	mul.f32 	%f578, %f90, %f574;
	mul.f32 	%f579, %f90, %f575;
	fma.rn.f32 	%f1121, %f563, %f1121, %f576;
	fma.rn.f32 	%f1122, %f563, %f1122, %f577;
	fma.rn.f32 	%f1123, %f563, %f1123, %f578;
	fma.rn.f32 	%f1124, %f563, %f1124, %f579;
	add.s64 	%rd135, %rd138, 112;
	// begin inline asm
	cvta.to.global.u64 %rd134, %rd135;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r166,%r167,%r168,%r169}, [%rd134];
	// end inline asm
	mov.b32 	%f580, %r166;
	mov.b32 	%f581, %r167;
	mov.b32 	%f582, %r168;
	mov.b32 	%f583, %r169;
	mul.f32 	%f584, %f90, %f580;
	mul.f32 	%f585, %f90, %f581;
	mul.f32 	%f586, %f90, %f582;
	mul.f32 	%f587, %f90, %f583;
	fma.rn.f32 	%f1117, %f563, %f1117, %f584;
	fma.rn.f32 	%f1118, %f563, %f1118, %f585;
	fma.rn.f32 	%f1119, %f563, %f1119, %f586;
	fma.rn.f32 	%f1120, %f563, %f1120, %f587;
	bra.uni 	$L__BB7_15;

$L__BB7_4:
	mov.f32 	%f1129, 0f00000000;
	mov.f32 	%f1131, 0f3F800000;
	setp.eq.s32 	%p8, %r22, 4;
	@%p8 bra 	$L__BB7_7;

	setp.ne.s32 	%p9, %r22, 1;
	mov.f32 	%f1130, %f1129;
	mov.f32 	%f1132, %f1129;
	mov.f32 	%f1133, %f1129;
	mov.f32 	%f1134, %f1131;
	mov.f32 	%f1135, %f1129;
	mov.f32 	%f1136, %f1129;
	mov.f32 	%f1137, %f1131;
	mov.f32 	%f1138, %f1129;
	mov.f32 	%f1139, %f1129;
	mov.f32 	%f1140, %f1129;
	@%p9 bra 	$L__BB7_16;

	// begin inline asm
	call (%rd22), _optix_get_static_transform_from_handle, (%rd20);
	// end inline asm
	add.s64 	%rd275, %rd22, 64;
	bra.uni 	$L__BB7_8;

$L__BB7_10:
	// begin inline asm
	call (%rd35), _optix_get_srt_motion_transform_from_handle, (%rd20);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd37, %rd35;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r36,%r37,%r38,%r39}, [%rd37];
	// end inline asm
	add.s64 	%rd41, %rd35, 16;
	// begin inline asm
	cvta.to.global.u64 %rd40, %rd41;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r40,%r41,%r42,%r43}, [%rd40];
	// end inline asm
	add.s64 	%rd44, %rd35, 32;
	// begin inline asm
	cvta.to.global.u64 %rd43, %rd44;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r44,%r45,%r46,%r47}, [%rd43];
	// end inline asm
	add.s64 	%rd47, %rd35, 48;
	// begin inline asm
	cvta.to.global.u64 %rd46, %rd47;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r48,%r49,%r50,%r51}, [%rd46];
	// end inline asm
	add.s64 	%rd50, %rd35, 64;
	// begin inline asm
	cvta.to.global.u64 %rd49, %rd50;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r52,%r53,%r54,%r55}, [%rd49];
	// end inline asm
	add.s64 	%rd53, %rd35, 80;
	// begin inline asm
	cvta.to.global.u64 %rd52, %rd53;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r56,%r57,%r58,%r59}, [%rd52];
	// end inline asm
	add.s64 	%rd56, %rd35, 96;
	// begin inline asm
	cvta.to.global.u64 %rd55, %rd56;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r60,%r61,%r62,%r63}, [%rd55];
	// end inline asm
	add.s64 	%rd59, %rd35, 112;
	// begin inline asm
	cvta.to.global.u64 %rd58, %rd59;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r64,%r65,%r66,%r67}, [%rd58];
	// end inline asm
	add.s64 	%rd62, %rd35, 128;
	// begin inline asm
	cvta.to.global.u64 %rd61, %rd62;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r68,%r69,%r70,%r71}, [%rd61];
	// end inline asm
	add.s64 	%rd65, %rd35, 144;
	// begin inline asm
	cvta.to.global.u64 %rd64, %rd65;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r72,%r73,%r74,%r75}, [%rd64];
	// end inline asm
	mov.b32 	%f432, %r39;
	mov.b32 	%f433, %r40;
	and.b32  	%r92, %r38, 65535;
	add.s32 	%r93, %r92, -1;
	cvt.rn.f32.s32 	%f434, %r93;
	sub.f32 	%f435, %f417, %f432;
	sub.f32 	%f436, %f433, %f432;
	div.approx.f32 	%f437, %f435, %f436;
	mul.f32 	%f438, %f437, %f434;
	min.f32 	%f439, %f434, %f438;
	mov.f32 	%f440, 0f00000000;
	max.f32 	%f441, %f440, %f439;
	setp.num.f32 	%p11, %f441, %f441;
	selp.f32 	%f442, %f441, 0f00000000, %p11;
	cvt.rmi.f32.f32 	%f443, %f442;
	add.f32 	%f444, %f434, 0fBF800000;
	min.f32 	%f445, %f443, %f444;
	sub.f32 	%f29, %f442, %f445;
	cvt.rzi.s32.f32 	%r94, %f445;
	mul.wide.s32 	%rd79, %r94, 64;
	add.s64 	%rd68, %rd44, %rd79;
	// begin inline asm
	cvta.to.global.u64 %rd67, %rd68;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r76,%r77,%r78,%r79}, [%rd67];
	// end inline asm
	mov.b32 	%f1101, %r76;
	mov.b32 	%f1102, %r77;
	mov.b32 	%f1103, %r78;
	mov.b32 	%f1104, %r79;
	add.s64 	%rd71, %rd68, 16;
	// begin inline asm
	cvta.to.global.u64 %rd70, %rd71;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r80,%r81,%r82,%r83}, [%rd70];
	// end inline asm
	mov.b32 	%f1105, %r80;
	mov.b32 	%f1106, %r81;
	mov.b32 	%f1107, %r82;
	mov.b32 	%f1108, %r83;
	add.s64 	%rd74, %rd68, 32;
	// begin inline asm
	cvta.to.global.u64 %rd73, %rd74;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r84,%r85,%r86,%r87}, [%rd73];
	// end inline asm
	mov.b32 	%f1109, %r84;
	mov.b32 	%f1110, %r85;
	mov.b32 	%f1111, %r86;
	mov.b32 	%f1112, %r87;
	add.s64 	%rd77, %rd68, 48;
	// begin inline asm
	cvta.to.global.u64 %rd76, %rd77;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r88,%r89,%r90,%r91}, [%rd76];
	// end inline asm
	mov.b32 	%f1113, %r88;
	mov.b32 	%f1114, %r89;
	mov.b32 	%f1115, %r90;
	mov.b32 	%f1116, %r91;
	setp.leu.f32 	%p12, %f29, 0f00000000;
	@%p12 bra 	$L__BB7_12;

	mov.f32 	%f446, 0f3F800000;
	sub.f32 	%f447, %f446, %f29;
	add.s64 	%rd81, %rd68, 64;
	// begin inline asm
	cvta.to.global.u64 %rd80, %rd81;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r95,%r96,%r97,%r98}, [%rd80];
	// end inline asm
	mov.b32 	%f448, %r95;
	mov.b32 	%f449, %r96;
	mov.b32 	%f450, %r97;
	mov.b32 	%f451, %r98;
	mul.f32 	%f452, %f29, %f448;
	mul.f32 	%f453, %f29, %f449;
	mul.f32 	%f454, %f29, %f450;
	mul.f32 	%f455, %f29, %f451;
	fma.rn.f32 	%f1101, %f447, %f1101, %f452;
	fma.rn.f32 	%f1102, %f447, %f1102, %f453;
	fma.rn.f32 	%f1103, %f447, %f1103, %f454;
	fma.rn.f32 	%f1104, %f447, %f1104, %f455;
	add.s64 	%rd84, %rd68, 80;
	// begin inline asm
	cvta.to.global.u64 %rd83, %rd84;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r99,%r100,%r101,%r102}, [%rd83];
	// end inline asm
	mov.b32 	%f456, %r99;
	mov.b32 	%f457, %r100;
	mov.b32 	%f458, %r101;
	mov.b32 	%f459, %r102;
	mul.f32 	%f460, %f29, %f456;
	mul.f32 	%f461, %f29, %f457;
	mul.f32 	%f462, %f29, %f458;
	mul.f32 	%f463, %f29, %f459;
	fma.rn.f32 	%f1105, %f447, %f1105, %f460;
	fma.rn.f32 	%f1106, %f447, %f1106, %f461;
	fma.rn.f32 	%f1107, %f447, %f1107, %f462;
	fma.rn.f32 	%f1108, %f447, %f1108, %f463;
	add.s64 	%rd87, %rd68, 96;
	// begin inline asm
	cvta.to.global.u64 %rd86, %rd87;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r103,%r104,%r105,%r106}, [%rd86];
	// end inline asm
	mov.b32 	%f464, %r103;
	mov.b32 	%f465, %r104;
	mov.b32 	%f466, %r105;
	mov.b32 	%f467, %r106;
	mul.f32 	%f468, %f29, %f464;
	mul.f32 	%f469, %f29, %f465;
	mul.f32 	%f470, %f29, %f466;
	mul.f32 	%f471, %f29, %f467;
	fma.rn.f32 	%f1109, %f447, %f1109, %f468;
	fma.rn.f32 	%f472, %f447, %f1110, %f469;
	fma.rn.f32 	%f473, %f447, %f1111, %f470;
	fma.rn.f32 	%f474, %f447, %f1112, %f471;
	add.s64 	%rd90, %rd68, 112;
	// begin inline asm
	cvta.to.global.u64 %rd89, %rd90;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r107,%r108,%r109,%r110}, [%rd89];
	// end inline asm
	mov.b32 	%f475, %r107;
	mov.b32 	%f476, %r108;
	mov.b32 	%f477, %r109;
	mov.b32 	%f478, %r110;
	mul.f32 	%f479, %f29, %f475;
	mul.f32 	%f480, %f29, %f476;
	mul.f32 	%f481, %f29, %f477;
	mul.f32 	%f482, %f29, %f478;
	fma.rn.f32 	%f483, %f447, %f1113, %f479;
	fma.rn.f32 	%f1114, %f447, %f1114, %f480;
	fma.rn.f32 	%f1115, %f447, %f1115, %f481;
	fma.rn.f32 	%f1116, %f447, %f1116, %f482;
	mul.f32 	%f484, %f473, %f473;
	fma.rn.f32 	%f485, %f472, %f472, %f484;
	fma.rn.f32 	%f486, %f474, %f474, %f485;
	fma.rn.f32 	%f487, %f483, %f483, %f486;
	sqrt.rn.f32 	%f488, %f487;
	rcp.rn.f32 	%f489, %f488;
	mul.f32 	%f1110, %f472, %f489;
	mul.f32 	%f1111, %f473, %f489;
	mul.f32 	%f1112, %f474, %f489;
	mul.f32 	%f1113, %f489, %f483;

$L__BB7_12:
	mul.f32 	%f490, %f1111, %f1111;
	fma.rn.f32 	%f491, %f1110, %f1110, %f490;
	fma.rn.f32 	%f492, %f1112, %f1112, %f491;
	fma.rn.f32 	%f493, %f1113, %f1113, %f492;
	rcp.rn.f32 	%f494, %f493;
	mul.f32 	%f495, %f1110, %f494;
	mul.f32 	%f496, %f1111, %f494;
	mul.f32 	%f497, %f1112, %f494;
	mul.f32 	%f498, %f1113, %f494;
	mul.f32 	%f499, %f1110, %f495;
	mul.f32 	%f500, %f1111, %f496;
	mul.f32 	%f501, %f1112, %f497;
	mul.f32 	%f502, %f1110, %f496;
	mul.f32 	%f503, %f1112, %f498;
	mul.f32 	%f504, %f1110, %f497;
	mul.f32 	%f505, %f1111, %f498;
	mul.f32 	%f506, %f1111, %f497;
	mul.f32 	%f507, %f1110, %f498;
	sub.f32 	%f508, %f499, %f500;
	sub.f32 	%f509, %f508, %f501;
	fma.rn.f32 	%f510, %f1113, %f498, %f509;
	sub.f32 	%f511, %f502, %f503;
	add.f32 	%f512, %f511, %f511;
	add.f32 	%f513, %f504, %f505;
	add.f32 	%f514, %f513, %f513;
	add.f32 	%f515, %f502, %f503;
	add.f32 	%f516, %f515, %f515;
	sub.f32 	%f517, %f500, %f499;
	sub.f32 	%f518, %f517, %f501;
	fma.rn.f32 	%f519, %f1113, %f498, %f518;
	sub.f32 	%f520, %f506, %f507;
	add.f32 	%f521, %f520, %f520;
	sub.f32 	%f522, %f504, %f505;
	add.f32 	%f523, %f522, %f522;
	add.f32 	%f524, %f506, %f507;
	add.f32 	%f525, %f524, %f524;
	neg.f32 	%f526, %f499;
	sub.f32 	%f527, %f526, %f500;
	add.f32 	%f528, %f501, %f527;
	fma.rn.f32 	%f529, %f1113, %f498, %f528;
	mul.f32 	%f530, %f1104, %f510;
	fma.rn.f32 	%f531, %f1107, %f512, %f530;
	fma.rn.f32 	%f532, %f1109, %f514, %f531;
	add.f32 	%f1128, %f1114, %f532;
	mul.f32 	%f533, %f1107, %f519;
	fma.rn.f32 	%f534, %f1104, %f516, %f533;
	fma.rn.f32 	%f535, %f1109, %f521, %f534;
	add.f32 	%f1124, %f1115, %f535;
	mul.f32 	%f536, %f1107, %f525;
	fma.rn.f32 	%f537, %f1104, %f523, %f536;
	fma.rn.f32 	%f538, %f1109, %f529, %f537;
	add.f32 	%f1120, %f1116, %f538;
	mul.f32 	%f539, %f1103, %f510;
	fma.rn.f32 	%f540, %f1106, %f512, %f539;
	fma.rn.f32 	%f1127, %f1108, %f514, %f540;
	mul.f32 	%f541, %f1106, %f519;
	fma.rn.f32 	%f542, %f1103, %f516, %f541;
	fma.rn.f32 	%f1123, %f1108, %f521, %f542;
	mul.f32 	%f543, %f1106, %f525;
	fma.rn.f32 	%f544, %f1103, %f523, %f543;
	fma.rn.f32 	%f1119, %f1108, %f529, %f544;
	mul.f32 	%f545, %f1102, %f510;
	fma.rn.f32 	%f1126, %f1105, %f512, %f545;
	mul.f32 	%f546, %f1105, %f519;
	fma.rn.f32 	%f1122, %f1102, %f516, %f546;
	mul.f32 	%f547, %f1105, %f525;
	fma.rn.f32 	%f1118, %f1102, %f523, %f547;
	mul.f32 	%f1125, %f1101, %f510;
	mul.f32 	%f1121, %f1101, %f516;
	mul.f32 	%f1117, %f1101, %f523;

$L__BB7_15:
	mul.f32 	%f588, %f1118, %f1123;
	mul.f32 	%f589, %f1119, %f1122;
	sub.f32 	%f590, %f589, %f588;
	mul.f32 	%f591, %f1125, %f590;
	mul.f32 	%f592, %f1117, %f1123;
	mul.f32 	%f593, %f1119, %f1121;
	sub.f32 	%f594, %f593, %f592;
	mul.f32 	%f595, %f594, %f1126;
	sub.f32 	%f596, %f591, %f595;
	mul.f32 	%f597, %f1117, %f1122;
	mul.f32 	%f598, %f1118, %f1121;
	sub.f32 	%f599, %f598, %f597;
	fma.rn.f32 	%f600, %f599, %f1127, %f596;
	rcp.rn.f32 	%f601, %f600;
	mul.f32 	%f1137, %f590, %f601;
	mul.f32 	%f602, %f1119, %f1126;
	mul.f32 	%f603, %f1118, %f1127;
	sub.f32 	%f604, %f603, %f602;
	mul.f32 	%f1138, %f604, %f601;
	mul.f32 	%f605, %f1122, %f1127;
	mul.f32 	%f606, %f1123, %f1126;
	sub.f32 	%f607, %f606, %f605;
	mul.f32 	%f1139, %f607, %f601;
	sub.f32 	%f608, %f592, %f593;
	mul.f32 	%f1133, %f608, %f601;
	mul.f32 	%f609, %f1117, %f1127;
	mul.f32 	%f610, %f1119, %f1125;
	sub.f32 	%f611, %f610, %f609;
	mul.f32 	%f1134, %f611, %f601;
	mul.f32 	%f612, %f1123, %f1125;
	mul.f32 	%f613, %f1121, %f1127;
	sub.f32 	%f614, %f613, %f612;
	mul.f32 	%f1135, %f614, %f601;
	mul.f32 	%f1129, %f599, %f601;
	mul.f32 	%f615, %f1118, %f1125;
	mul.f32 	%f616, %f1117, %f1126;
	sub.f32 	%f617, %f616, %f615;
	mul.f32 	%f1130, %f617, %f601;
	mul.f32 	%f618, %f1121, %f1126;
	mul.f32 	%f619, %f1122, %f1125;
	sub.f32 	%f620, %f619, %f618;
	mul.f32 	%f1131, %f620, %f601;
	mul.f32 	%f621, %f1128, %f1137;
	neg.f32 	%f622, %f621;
	mul.f32 	%f623, %f1124, %f1138;
	sub.f32 	%f624, %f622, %f623;
	mul.f32 	%f625, %f1120, %f1139;
	sub.f32 	%f1140, %f624, %f625;
	mul.f32 	%f626, %f1128, %f1133;
	neg.f32 	%f627, %f626;
	mul.f32 	%f628, %f1124, %f1134;
	sub.f32 	%f629, %f627, %f628;
	mul.f32 	%f630, %f1120, %f1135;
	sub.f32 	%f1136, %f629, %f630;
	mul.f32 	%f631, %f1128, %f1129;
	neg.f32 	%f632, %f631;
	mul.f32 	%f633, %f1124, %f1130;
	sub.f32 	%f634, %f632, %f633;
	mul.f32 	%f635, %f1120, %f1131;
	sub.f32 	%f1132, %f634, %f635;
	bra.uni 	$L__BB7_16;

$L__BB7_7:
	// begin inline asm
	call (%rd275), _optix_get_instance_inverse_transform_from_handle, (%rd20);
	// end inline asm

$L__BB7_8:
	// begin inline asm
	cvta.to.global.u64 %rd26, %rd275;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r24,%r25,%r26,%r27}, [%rd26];
	// end inline asm
	mov.b32 	%f1137, %r24;
	mov.b32 	%f1138, %r25;
	mov.b32 	%f1139, %r26;
	mov.b32 	%f1140, %r27;
	add.s64 	%rd30, %rd275, 16;
	// begin inline asm
	cvta.to.global.u64 %rd29, %rd30;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r28,%r29,%r30,%r31}, [%rd29];
	// end inline asm
	mov.b32 	%f1133, %r28;
	mov.b32 	%f1134, %r29;
	mov.b32 	%f1135, %r30;
	mov.b32 	%f1136, %r31;
	add.s64 	%rd33, %rd275, 32;
	// begin inline asm
	cvta.to.global.u64 %rd32, %rd33;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r32,%r33,%r34,%r35}, [%rd32];
	// end inline asm
	mov.b32 	%f1129, %r32;
	mov.b32 	%f1130, %r33;
	mov.b32 	%f1131, %r34;
	mov.b32 	%f1132, %r35;

$L__BB7_16:
	setp.eq.s32 	%p15, %r373, 0;
	@%p15 bra 	$L__BB7_18;

	mul.f32 	%f636, %f1096, %f1138;
	fma.rn.f32 	%f637, %f1092, %f1137, %f636;
	fma.rn.f32 	%f151, %f1099, %f1139, %f637;
	mul.f32 	%f638, %f1095, %f1138;
	fma.rn.f32 	%f639, %f1091, %f1137, %f638;
	fma.rn.f32 	%f152, %f1100, %f1139, %f639;
	mul.f32 	%f640, %f1094, %f1138;
	fma.rn.f32 	%f641, %f1090, %f1137, %f640;
	fma.rn.f32 	%f153, %f1098, %f1139, %f641;
	mul.f32 	%f642, %f1093, %f1138;
	fma.rn.f32 	%f643, %f1089, %f1137, %f642;
	fma.rn.f32 	%f644, %f1097, %f1139, %f643;
	add.f32 	%f1140, %f1140, %f644;
	mul.f32 	%f645, %f1096, %f1134;
	fma.rn.f32 	%f646, %f1092, %f1133, %f645;
	fma.rn.f32 	%f155, %f1099, %f1135, %f646;
	mul.f32 	%f647, %f1095, %f1134;
	fma.rn.f32 	%f648, %f1091, %f1133, %f647;
	fma.rn.f32 	%f156, %f1100, %f1135, %f648;
	mul.f32 	%f649, %f1094, %f1134;
	fma.rn.f32 	%f650, %f1090, %f1133, %f649;
	fma.rn.f32 	%f157, %f1098, %f1135, %f650;
	mul.f32 	%f651, %f1093, %f1134;
	fma.rn.f32 	%f652, %f1089, %f1133, %f651;
	fma.rn.f32 	%f653, %f1097, %f1135, %f652;
	add.f32 	%f1136, %f1136, %f653;
	mul.f32 	%f654, %f1096, %f1130;
	fma.rn.f32 	%f655, %f1092, %f1129, %f654;
	fma.rn.f32 	%f159, %f1099, %f1131, %f655;
	mul.f32 	%f656, %f1095, %f1130;
	fma.rn.f32 	%f657, %f1091, %f1129, %f656;
	fma.rn.f32 	%f160, %f1100, %f1131, %f657;
	mul.f32 	%f658, %f1094, %f1130;
	fma.rn.f32 	%f659, %f1090, %f1129, %f658;
	fma.rn.f32 	%f161, %f1098, %f1131, %f659;
	mul.f32 	%f660, %f1093, %f1130;
	fma.rn.f32 	%f661, %f1089, %f1129, %f660;
	fma.rn.f32 	%f662, %f1097, %f1131, %f661;
	add.f32 	%f1132, %f1132, %f662;
	mov.f32 	%f1130, %f160;
	mov.f32 	%f1129, %f159;
	mov.f32 	%f1131, %f161;
	mov.f32 	%f1133, %f155;
	mov.f32 	%f1134, %f156;
	mov.f32 	%f1135, %f157;
	mov.f32 	%f1137, %f151;
	mov.f32 	%f1138, %f152;
	mov.f32 	%f1139, %f153;

$L__BB7_18:
	add.s32 	%r373, %r373, 1;
	setp.lt.u32 	%p16, %r373, %r19;
	mov.f32 	%f1089, %f1140;
	mov.f32 	%f1090, %f1139;
	mov.f32 	%f1091, %f1138;
	mov.f32 	%f1092, %f1137;
	mov.f32 	%f1093, %f1136;
	mov.f32 	%f1094, %f1135;
	mov.f32 	%f1095, %f1134;
	mov.f32 	%f1096, %f1133;
	mov.f32 	%f1097, %f1132;
	mov.f32 	%f1098, %f1131;
	mov.f32 	%f1099, %f1129;
	mov.f32 	%f1100, %f1130;
	@%p16 bra 	$L__BB7_3;

$L__BB7_19:
	mul.f32 	%f663, %f1166, %f1138;
	fma.rn.f32 	%f664, %f1165, %f1137, %f663;
	fma.rn.f32 	%f665, %f1167, %f1139, %f664;
	mul.f32 	%f666, %f1166, %f1134;
	fma.rn.f32 	%f667, %f1165, %f1133, %f666;
	fma.rn.f32 	%f668, %f1167, %f1135, %f667;
	mul.f32 	%f669, %f1165, %f1129;
	fma.rn.f32 	%f670, %f1166, %f1130, %f669;
	fma.rn.f32 	%f671, %f1167, %f1131, %f670;
	add.f32 	%f1167, %f1132, %f671;
	add.f32 	%f1166, %f1136, %f668;
	add.f32 	%f1165, %f1140, %f665;

$L__BB7_20:
	// begin inline asm
	call (%f1223), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f1224), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f674), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%r170), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p17, %r170, 0;
	@%p17 bra 	$L__BB7_40;

	// begin inline asm
	call (%r171), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f675), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p18, %r171, 0;
	@%p18 bra 	$L__BB7_39;

	mov.u32 	%r374, 0;

$L__BB7_23:
	.pragma "nounroll";
	// begin inline asm
	call (%rd139), _optix_get_transform_list_handle, (%r374);
	// end inline asm
	// begin inline asm
	call (%r174), _optix_get_transform_type_from_handle, (%rd139);
	// end inline asm
	or.b32  	%r175, %r174, 1;
	setp.eq.s32 	%p19, %r175, 3;
	@%p19 bra 	$L__BB7_29;
	bra.uni 	$L__BB7_24;

$L__BB7_29:
	setp.eq.s32 	%p22, %r174, 2;
	@%p22 bra 	$L__BB7_33;
	bra.uni 	$L__BB7_30;

$L__BB7_33:
	// begin inline asm
	call (%rd211), _optix_get_matrix_motion_transform_from_handle, (%rd139);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd213, %rd211;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r263,%r264,%r265,%r266}, [%rd213];
	// end inline asm
	add.s64 	%rd217, %rd211, 16;
	// begin inline asm
	cvta.to.global.u64 %rd216, %rd217;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r267,%r268,%r269,%r270}, [%rd216];
	// end inline asm
	add.s64 	%rd220, %rd211, 32;
	// begin inline asm
	cvta.to.global.u64 %rd219, %rd220;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r271,%r272,%r273,%r274}, [%rd219];
	// end inline asm
	add.s64 	%rd223, %rd211, 48;
	// begin inline asm
	cvta.to.global.u64 %rd222, %rd223;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r275,%r276,%r277,%r278}, [%rd222];
	// end inline asm
	add.s64 	%rd226, %rd211, 64;
	// begin inline asm
	cvta.to.global.u64 %rd225, %rd226;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r279,%r280,%r281,%r282}, [%rd225];
	// end inline asm
	add.s64 	%rd229, %rd211, 80;
	// begin inline asm
	cvta.to.global.u64 %rd228, %rd229;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r283,%r284,%r285,%r286}, [%rd228];
	// end inline asm
	add.s64 	%rd232, %rd211, 96;
	// begin inline asm
	cvta.to.global.u64 %rd231, %rd232;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r287,%r288,%r289,%r290}, [%rd231];
	// end inline asm
	add.s64 	%rd235, %rd211, 112;
	// begin inline asm
	cvta.to.global.u64 %rd234, %rd235;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r291,%r292,%r293,%r294}, [%rd234];
	// end inline asm
	mov.b32 	%f782, %r266;
	mov.b32 	%f783, %r267;
	and.b32  	%r307, %r265, 65535;
	add.s32 	%r308, %r307, -1;
	cvt.rn.f32.s32 	%f784, %r308;
	sub.f32 	%f785, %f675, %f782;
	sub.f32 	%f786, %f783, %f782;
	div.approx.f32 	%f787, %f785, %f786;
	mul.f32 	%f788, %f787, %f784;
	min.f32 	%f789, %f784, %f788;
	mov.f32 	%f790, 0f00000000;
	max.f32 	%f791, %f790, %f789;
	setp.num.f32 	%p25, %f791, %f791;
	selp.f32 	%f792, %f791, 0f00000000, %p25;
	cvt.rmi.f32.f32 	%f793, %f792;
	add.f32 	%f794, %f784, 0fBF800000;
	min.f32 	%f795, %f793, %f794;
	sub.f32 	%f258, %f792, %f795;
	cvt.rzi.s32.f32 	%r309, %f795;
	cvt.s64.s32 	%rd15, %r309;
	mul.wide.s32 	%rd246, %r309, 48;
	add.s64 	%rd238, %rd220, %rd246;
	// begin inline asm
	cvta.to.global.u64 %rd237, %rd238;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r295,%r296,%r297,%r298}, [%rd237];
	// end inline asm
	mov.b32 	%f1193, %r295;
	mov.b32 	%f1194, %r296;
	mov.b32 	%f1195, %r297;
	add.s64 	%rd241, %rd238, 16;
	// begin inline asm
	cvta.to.global.u64 %rd240, %rd241;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r299,%r300,%r301,%r302}, [%rd240];
	// end inline asm
	mov.b32 	%f1190, %r299;
	mov.b32 	%f1191, %r300;
	mov.b32 	%f1192, %r301;
	add.s64 	%rd244, %rd238, 32;
	// begin inline asm
	cvta.to.global.u64 %rd243, %rd244;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r303,%r304,%r305,%r306}, [%rd243];
	// end inline asm
	mov.b32 	%f1187, %r303;
	mov.b32 	%f1188, %r304;
	mov.b32 	%f1189, %r305;
	setp.leu.f32 	%p26, %f258, 0f00000000;
	@%p26 bra 	$L__BB7_35;

	mov.f32 	%f796, 0f3F800000;
	sub.f32 	%f797, %f796, %f258;
	mul.lo.s64 	%rd256, %rd15, 48;
	add.s64 	%rd257, %rd211, %rd256;
	add.s64 	%rd248, %rd257, 80;
	// begin inline asm
	cvta.to.global.u64 %rd247, %rd248;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r310,%r311,%r312,%r313}, [%rd247];
	// end inline asm
	mov.b32 	%f798, %r310;
	mov.b32 	%f799, %r311;
	mov.b32 	%f800, %r312;
	mul.f32 	%f801, %f258, %f798;
	mul.f32 	%f802, %f258, %f799;
	mul.f32 	%f803, %f258, %f800;
	fma.rn.f32 	%f1193, %f797, %f1193, %f801;
	fma.rn.f32 	%f1194, %f797, %f1194, %f802;
	fma.rn.f32 	%f1195, %f797, %f1195, %f803;
	add.s64 	%rd251, %rd257, 96;
	// begin inline asm
	cvta.to.global.u64 %rd250, %rd251;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r314,%r315,%r316,%r317}, [%rd250];
	// end inline asm
	mov.b32 	%f804, %r314;
	mov.b32 	%f805, %r315;
	mov.b32 	%f806, %r316;
	mul.f32 	%f807, %f258, %f804;
	mul.f32 	%f808, %f258, %f805;
	mul.f32 	%f809, %f258, %f806;
	fma.rn.f32 	%f1190, %f797, %f1190, %f807;
	fma.rn.f32 	%f1191, %f797, %f1191, %f808;
	fma.rn.f32 	%f1192, %f797, %f1192, %f809;
	add.s64 	%rd254, %rd257, 112;
	// begin inline asm
	cvta.to.global.u64 %rd253, %rd254;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r318,%r319,%r320,%r321}, [%rd253];
	// end inline asm
	mov.b32 	%f810, %r318;
	mov.b32 	%f811, %r319;
	mov.b32 	%f812, %r320;
	mul.f32 	%f813, %f258, %f810;
	mul.f32 	%f814, %f258, %f811;
	mul.f32 	%f815, %f258, %f812;
	fma.rn.f32 	%f1187, %f797, %f1187, %f813;
	fma.rn.f32 	%f1188, %f797, %f1188, %f814;
	fma.rn.f32 	%f1189, %f797, %f1189, %f815;
	bra.uni 	$L__BB7_35;

$L__BB7_24:
	mov.f32 	%f1196, 0f00000000;
	mov.f32 	%f1198, 0f3F800000;
	setp.eq.s32 	%p20, %r174, 4;
	@%p20 bra 	$L__BB7_27;

	setp.ne.s32 	%p21, %r174, 1;
	mov.f32 	%f1197, %f1196;
	mov.f32 	%f1199, %f1196;
	mov.f32 	%f1200, %f1198;
	mov.f32 	%f1201, %f1196;
	mov.f32 	%f1202, %f1198;
	mov.f32 	%f1203, %f1196;
	mov.f32 	%f1204, %f1196;
	@%p21 bra 	$L__BB7_36;

	// begin inline asm
	call (%rd141), _optix_get_static_transform_from_handle, (%rd139);
	// end inline asm
	add.s64 	%rd276, %rd141, 64;
	bra.uni 	$L__BB7_28;

$L__BB7_30:
	// begin inline asm
	call (%rd154), _optix_get_srt_motion_transform_from_handle, (%rd139);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd156, %rd154;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r188,%r189,%r190,%r191}, [%rd156];
	// end inline asm
	add.s64 	%rd160, %rd154, 16;
	// begin inline asm
	cvta.to.global.u64 %rd159, %rd160;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r192,%r193,%r194,%r195}, [%rd159];
	// end inline asm
	add.s64 	%rd163, %rd154, 32;
	// begin inline asm
	cvta.to.global.u64 %rd162, %rd163;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r196,%r197,%r198,%r199}, [%rd162];
	// end inline asm
	add.s64 	%rd166, %rd154, 48;
	// begin inline asm
	cvta.to.global.u64 %rd165, %rd166;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r200,%r201,%r202,%r203}, [%rd165];
	// end inline asm
	add.s64 	%rd169, %rd154, 64;
	// begin inline asm
	cvta.to.global.u64 %rd168, %rd169;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r204,%r205,%r206,%r207}, [%rd168];
	// end inline asm
	add.s64 	%rd172, %rd154, 80;
	// begin inline asm
	cvta.to.global.u64 %rd171, %rd172;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r208,%r209,%r210,%r211}, [%rd171];
	// end inline asm
	add.s64 	%rd175, %rd154, 96;
	// begin inline asm
	cvta.to.global.u64 %rd174, %rd175;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r212,%r213,%r214,%r215}, [%rd174];
	// end inline asm
	add.s64 	%rd178, %rd154, 112;
	// begin inline asm
	cvta.to.global.u64 %rd177, %rd178;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r216,%r217,%r218,%r219}, [%rd177];
	// end inline asm
	add.s64 	%rd181, %rd154, 128;
	// begin inline asm
	cvta.to.global.u64 %rd180, %rd181;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r220,%r221,%r222,%r223}, [%rd180];
	// end inline asm
	add.s64 	%rd184, %rd154, 144;
	// begin inline asm
	cvta.to.global.u64 %rd183, %rd184;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r224,%r225,%r226,%r227}, [%rd183];
	// end inline asm
	mov.b32 	%f687, %r191;
	mov.b32 	%f688, %r192;
	and.b32  	%r244, %r190, 65535;
	add.s32 	%r245, %r244, -1;
	cvt.rn.f32.s32 	%f689, %r245;
	sub.f32 	%f690, %f675, %f687;
	sub.f32 	%f691, %f688, %f687;
	div.approx.f32 	%f692, %f690, %f691;
	mul.f32 	%f693, %f692, %f689;
	min.f32 	%f694, %f689, %f693;
	mov.f32 	%f695, 0f00000000;
	max.f32 	%f696, %f695, %f694;
	setp.num.f32 	%p23, %f696, %f696;
	selp.f32 	%f697, %f696, 0f00000000, %p23;
	cvt.rmi.f32.f32 	%f698, %f697;
	add.f32 	%f699, %f689, 0fBF800000;
	min.f32 	%f700, %f698, %f699;
	sub.f32 	%f218, %f697, %f700;
	cvt.rzi.s32.f32 	%r246, %f700;
	mul.wide.s32 	%rd198, %r246, 64;
	add.s64 	%rd187, %rd163, %rd198;
	// begin inline asm
	cvta.to.global.u64 %rd186, %rd187;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r228,%r229,%r230,%r231}, [%rd186];
	// end inline asm
	mov.b32 	%f1177, %r228;
	mov.b32 	%f1178, %r229;
	mov.b32 	%f1179, %r230;
	add.s64 	%rd190, %rd187, 16;
	// begin inline asm
	cvta.to.global.u64 %rd189, %rd190;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r232,%r233,%r234,%r235}, [%rd189];
	// end inline asm
	mov.b32 	%f1180, %r232;
	mov.b32 	%f1181, %r233;
	mov.b32 	%f1182, %r235;
	add.s64 	%rd193, %rd187, 32;
	// begin inline asm
	cvta.to.global.u64 %rd192, %rd193;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r236,%r237,%r238,%r239}, [%rd192];
	// end inline asm
	mov.b32 	%f1183, %r237;
	mov.b32 	%f1184, %r238;
	mov.b32 	%f1185, %r239;
	add.s64 	%rd196, %rd187, 48;
	// begin inline asm
	cvta.to.global.u64 %rd195, %rd196;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r240,%r241,%r242,%r243}, [%rd195];
	// end inline asm
	mov.b32 	%f1186, %r240;
	setp.leu.f32 	%p24, %f218, 0f00000000;
	@%p24 bra 	$L__BB7_32;

	mov.f32 	%f701, 0f3F800000;
	sub.f32 	%f702, %f701, %f218;
	add.s64 	%rd200, %rd187, 64;
	// begin inline asm
	cvta.to.global.u64 %rd199, %rd200;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r247,%r248,%r249,%r250}, [%rd199];
	// end inline asm
	mov.b32 	%f703, %r247;
	mov.b32 	%f704, %r248;
	mov.b32 	%f705, %r249;
	mul.f32 	%f706, %f218, %f703;
	mul.f32 	%f707, %f218, %f704;
	mul.f32 	%f708, %f218, %f705;
	fma.rn.f32 	%f1177, %f702, %f1177, %f706;
	fma.rn.f32 	%f1178, %f702, %f1178, %f707;
	fma.rn.f32 	%f1179, %f702, %f1179, %f708;
	add.s64 	%rd203, %rd187, 80;
	// begin inline asm
	cvta.to.global.u64 %rd202, %rd203;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r251,%r252,%r253,%r254}, [%rd202];
	// end inline asm
	mov.b32 	%f709, %r251;
	mov.b32 	%f710, %r252;
	mov.b32 	%f711, %r254;
	mul.f32 	%f712, %f218, %f709;
	mul.f32 	%f713, %f218, %f710;
	mul.f32 	%f714, %f218, %f711;
	fma.rn.f32 	%f1180, %f702, %f1180, %f712;
	fma.rn.f32 	%f1181, %f702, %f1181, %f713;
	fma.rn.f32 	%f1182, %f702, %f1182, %f714;
	add.s64 	%rd206, %rd187, 96;
	// begin inline asm
	cvta.to.global.u64 %rd205, %rd206;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r255,%r256,%r257,%r258}, [%rd205];
	// end inline asm
	mov.b32 	%f715, %r256;
	mov.b32 	%f716, %r257;
	mov.b32 	%f717, %r258;
	mul.f32 	%f718, %f218, %f715;
	mul.f32 	%f719, %f218, %f716;
	mul.f32 	%f720, %f218, %f717;
	fma.rn.f32 	%f721, %f702, %f1183, %f718;
	fma.rn.f32 	%f722, %f702, %f1184, %f719;
	fma.rn.f32 	%f723, %f702, %f1185, %f720;
	add.s64 	%rd209, %rd187, 112;
	// begin inline asm
	cvta.to.global.u64 %rd208, %rd209;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r259,%r260,%r261,%r262}, [%rd208];
	// end inline asm
	mov.b32 	%f724, %r259;
	mul.f32 	%f725, %f218, %f724;
	fma.rn.f32 	%f726, %f702, %f1186, %f725;
	mul.f32 	%f727, %f722, %f722;
	fma.rn.f32 	%f728, %f721, %f721, %f727;
	fma.rn.f32 	%f729, %f723, %f723, %f728;
	fma.rn.f32 	%f730, %f726, %f726, %f729;
	sqrt.rn.f32 	%f731, %f730;
	rcp.rn.f32 	%f732, %f731;
	mul.f32 	%f1183, %f721, %f732;
	mul.f32 	%f1184, %f722, %f732;
	mul.f32 	%f1185, %f723, %f732;
	mul.f32 	%f1186, %f732, %f726;

$L__BB7_32:
	mul.f32 	%f733, %f1184, %f1184;
	fma.rn.f32 	%f734, %f1183, %f1183, %f733;
	fma.rn.f32 	%f735, %f1185, %f1185, %f734;
	fma.rn.f32 	%f736, %f1186, %f1186, %f735;
	rcp.rn.f32 	%f737, %f736;
	mul.f32 	%f738, %f1183, %f737;
	mul.f32 	%f739, %f1184, %f737;
	mul.f32 	%f740, %f1185, %f737;
	mul.f32 	%f741, %f1186, %f737;
	mul.f32 	%f742, %f1183, %f738;
	mul.f32 	%f743, %f1184, %f739;
	mul.f32 	%f744, %f1185, %f740;
	mul.f32 	%f745, %f1183, %f739;
	mul.f32 	%f746, %f1185, %f741;
	mul.f32 	%f747, %f1183, %f740;
	mul.f32 	%f748, %f1184, %f741;
	mul.f32 	%f749, %f1184, %f740;
	mul.f32 	%f750, %f1183, %f741;
	sub.f32 	%f751, %f742, %f743;
	sub.f32 	%f752, %f751, %f744;
	fma.rn.f32 	%f753, %f1186, %f741, %f752;
	sub.f32 	%f754, %f745, %f746;
	add.f32 	%f755, %f754, %f754;
	add.f32 	%f756, %f747, %f748;
	add.f32 	%f757, %f756, %f756;
	add.f32 	%f758, %f745, %f746;
	add.f32 	%f759, %f758, %f758;
	sub.f32 	%f760, %f743, %f742;
	sub.f32 	%f761, %f760, %f744;
	fma.rn.f32 	%f762, %f1186, %f741, %f761;
	sub.f32 	%f763, %f749, %f750;
	add.f32 	%f764, %f763, %f763;
	sub.f32 	%f765, %f747, %f748;
	add.f32 	%f766, %f765, %f765;
	add.f32 	%f767, %f749, %f750;
	add.f32 	%f768, %f767, %f767;
	neg.f32 	%f769, %f742;
	sub.f32 	%f770, %f769, %f743;
	add.f32 	%f771, %f744, %f770;
	fma.rn.f32 	%f772, %f1186, %f741, %f771;
	mul.f32 	%f773, %f1179, %f753;
	fma.rn.f32 	%f774, %f1181, %f755, %f773;
	fma.rn.f32 	%f1195, %f1182, %f757, %f774;
	mul.f32 	%f775, %f1181, %f762;
	fma.rn.f32 	%f776, %f1179, %f759, %f775;
	fma.rn.f32 	%f1192, %f1182, %f764, %f776;
	mul.f32 	%f777, %f1181, %f768;
	fma.rn.f32 	%f778, %f1179, %f766, %f777;
	fma.rn.f32 	%f1189, %f1182, %f772, %f778;
	mul.f32 	%f779, %f1178, %f753;
	fma.rn.f32 	%f1194, %f1180, %f755, %f779;
	mul.f32 	%f780, %f1180, %f762;
	fma.rn.f32 	%f1191, %f1178, %f759, %f780;
	mul.f32 	%f781, %f1180, %f768;
	fma.rn.f32 	%f1188, %f1178, %f766, %f781;
	mul.f32 	%f1193, %f1177, %f753;
	mul.f32 	%f1190, %f1177, %f759;
	mul.f32 	%f1187, %f1177, %f766;

$L__BB7_35:
	mul.f32 	%f816, %f1188, %f1192;
	mul.f32 	%f817, %f1189, %f1191;
	sub.f32 	%f818, %f817, %f816;
	mul.f32 	%f819, %f1193, %f818;
	mul.f32 	%f820, %f1187, %f1192;
	mul.f32 	%f821, %f1189, %f1190;
	sub.f32 	%f822, %f821, %f820;
	mul.f32 	%f823, %f822, %f1194;
	sub.f32 	%f824, %f819, %f823;
	mul.f32 	%f825, %f1187, %f1191;
	mul.f32 	%f826, %f1188, %f1190;
	sub.f32 	%f827, %f826, %f825;
	fma.rn.f32 	%f828, %f827, %f1195, %f824;
	rcp.rn.f32 	%f829, %f828;
	mul.f32 	%f1202, %f818, %f829;
	mul.f32 	%f830, %f1189, %f1194;
	mul.f32 	%f831, %f1188, %f1195;
	sub.f32 	%f832, %f831, %f830;
	mul.f32 	%f1203, %f832, %f829;
	mul.f32 	%f833, %f1191, %f1195;
	mul.f32 	%f834, %f1192, %f1194;
	sub.f32 	%f835, %f834, %f833;
	mul.f32 	%f1204, %f835, %f829;
	sub.f32 	%f836, %f820, %f821;
	mul.f32 	%f1199, %f836, %f829;
	mul.f32 	%f837, %f1187, %f1195;
	mul.f32 	%f838, %f1189, %f1193;
	sub.f32 	%f839, %f838, %f837;
	mul.f32 	%f1200, %f839, %f829;
	mul.f32 	%f840, %f1192, %f1193;
	mul.f32 	%f841, %f1190, %f1195;
	sub.f32 	%f842, %f841, %f840;
	mul.f32 	%f1201, %f842, %f829;
	mul.f32 	%f1196, %f827, %f829;
	mul.f32 	%f843, %f1188, %f1193;
	mul.f32 	%f844, %f1187, %f1194;
	sub.f32 	%f845, %f844, %f843;
	mul.f32 	%f1197, %f845, %f829;
	mul.f32 	%f846, %f1190, %f1194;
	mul.f32 	%f847, %f1191, %f1193;
	sub.f32 	%f848, %f847, %f846;
	mul.f32 	%f1198, %f848, %f829;
	bra.uni 	$L__BB7_36;

$L__BB7_27:
	// begin inline asm
	call (%rd276), _optix_get_instance_inverse_transform_from_handle, (%rd139);
	// end inline asm

$L__BB7_28:
	// begin inline asm
	cvta.to.global.u64 %rd145, %rd276;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r176,%r177,%r178,%r179}, [%rd145];
	// end inline asm
	mov.b32 	%f1202, %r176;
	mov.b32 	%f1203, %r177;
	mov.b32 	%f1204, %r178;
	add.s64 	%rd149, %rd276, 16;
	// begin inline asm
	cvta.to.global.u64 %rd148, %rd149;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r180,%r181,%r182,%r183}, [%rd148];
	// end inline asm
	mov.b32 	%f1199, %r180;
	mov.b32 	%f1200, %r181;
	mov.b32 	%f1201, %r182;
	add.s64 	%rd152, %rd276, 32;
	// begin inline asm
	cvta.to.global.u64 %rd151, %rd152;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r184,%r185,%r186,%r187}, [%rd151];
	// end inline asm
	mov.b32 	%f1196, %r184;
	mov.b32 	%f1197, %r185;
	mov.b32 	%f1198, %r186;

$L__BB7_36:
	setp.eq.s32 	%p27, %r374, 0;
	@%p27 bra 	$L__BB7_38;

	mul.f32 	%f849, %f1173, %f1203;
	fma.rn.f32 	%f850, %f1170, %f1202, %f849;
	fma.rn.f32 	%f304, %f1176, %f1204, %f850;
	mul.f32 	%f851, %f1172, %f1203;
	fma.rn.f32 	%f852, %f1169, %f1202, %f851;
	fma.rn.f32 	%f305, %f1175, %f1204, %f852;
	mul.f32 	%f853, %f1171, %f1203;
	fma.rn.f32 	%f854, %f1168, %f1202, %f853;
	fma.rn.f32 	%f1204, %f1174, %f1204, %f854;
	mul.f32 	%f855, %f1173, %f1200;
	fma.rn.f32 	%f856, %f1170, %f1199, %f855;
	fma.rn.f32 	%f307, %f1176, %f1201, %f856;
	mul.f32 	%f857, %f1172, %f1200;
	fma.rn.f32 	%f858, %f1169, %f1199, %f857;
	fma.rn.f32 	%f308, %f1175, %f1201, %f858;
	mul.f32 	%f859, %f1171, %f1200;
	fma.rn.f32 	%f860, %f1168, %f1199, %f859;
	fma.rn.f32 	%f1201, %f1174, %f1201, %f860;
	mul.f32 	%f861, %f1173, %f1197;
	fma.rn.f32 	%f862, %f1170, %f1196, %f861;
	fma.rn.f32 	%f310, %f1176, %f1198, %f862;
	mul.f32 	%f863, %f1172, %f1197;
	fma.rn.f32 	%f864, %f1169, %f1196, %f863;
	fma.rn.f32 	%f311, %f1175, %f1198, %f864;
	mul.f32 	%f865, %f1171, %f1197;
	fma.rn.f32 	%f866, %f1168, %f1196, %f865;
	fma.rn.f32 	%f1198, %f1174, %f1198, %f866;
	mov.f32 	%f1196, %f310;
	mov.f32 	%f1197, %f311;
	mov.f32 	%f1199, %f307;
	mov.f32 	%f1200, %f308;
	mov.f32 	%f1202, %f304;
	mov.f32 	%f1203, %f305;

$L__BB7_38:
	add.s32 	%r374, %r374, 1;
	setp.lt.u32 	%p28, %r374, %r171;
	mov.f32 	%f1168, %f1204;
	mov.f32 	%f1169, %f1203;
	mov.f32 	%f1170, %f1202;
	mov.f32 	%f1171, %f1201;
	mov.f32 	%f1172, %f1200;
	mov.f32 	%f1173, %f1199;
	mov.f32 	%f1174, %f1198;
	mov.f32 	%f1175, %f1197;
	mov.f32 	%f1176, %f1196;
	@%p28 bra 	$L__BB7_23;

$L__BB7_39:
	mul.f32 	%f867, %f1224, %f1203;
	fma.rn.f32 	%f868, %f1223, %f1202, %f867;
	mul.f32 	%f869, %f1224, %f1200;
	fma.rn.f32 	%f870, %f1223, %f1199, %f869;
	mul.f32 	%f871, %f1224, %f1197;
	fma.rn.f32 	%f872, %f1223, %f1196, %f871;
	fma.rn.f32 	%f1225, %f674, %f1198, %f872;
	fma.rn.f32 	%f1224, %f674, %f1201, %f870;
	fma.rn.f32 	%f1223, %f674, %f1204, %f868;
	bra.uni 	$L__BB7_41;

$L__BB7_40:
	mov.f32 	%f1225, %f674;

$L__BB7_41:
	// begin inline asm
	call (%f873), _optix_get_ray_tmin, ();
	// end inline asm
	// begin inline asm
	call (%f874), _optix_get_ray_tmax, ();
	// end inline asm
	sub.f32 	%f340, %f874, %f873;
	fma.rn.f32 	%f876, %f1223, %f873, %f1165;
	fma.rn.f32 	%f877, %f1224, %f873, %f1166;
	fma.rn.f32 	%f878, %f1225, %f873, %f1167;
	ld.v4.f32 	{%f879, %f880, %f881, %f882}, [%rd1+48];
	mul.f32 	%f887, %f879, %f876;
	fma.rn.f32 	%f888, %f880, %f877, %f887;
	fma.rn.f32 	%f889, %f881, %f878, %f888;
	mov.f32 	%f890, 0f3F800000;
	fma.rn.f32 	%f341, %f882, %f890, %f889;
	ld.v4.f32 	{%f891, %f892, %f893, %f894}, [%rd1+64];
	mul.f32 	%f899, %f891, %f876;
	fma.rn.f32 	%f900, %f892, %f877, %f899;
	fma.rn.f32 	%f901, %f893, %f878, %f900;
	fma.rn.f32 	%f342, %f894, %f890, %f901;
	ld.v4.f32 	{%f902, %f903, %f904, %f905}, [%rd1+80];
	mul.f32 	%f910, %f902, %f876;
	fma.rn.f32 	%f911, %f903, %f877, %f910;
	fma.rn.f32 	%f912, %f904, %f878, %f911;
	fma.rn.f32 	%f343, %f905, %f890, %f912;
	mul.f32 	%f913, %f879, %f1223;
	fma.rn.f32 	%f914, %f880, %f1224, %f913;
	fma.rn.f32 	%f915, %f881, %f1225, %f914;
	mov.f32 	%f916, 0f00000000;
	fma.rn.f32 	%f344, %f882, %f916, %f915;
	mul.f32 	%f917, %f891, %f1223;
	fma.rn.f32 	%f918, %f892, %f1224, %f917;
	fma.rn.f32 	%f919, %f893, %f1225, %f918;
	fma.rn.f32 	%f345, %f894, %f916, %f919;
	mul.f32 	%f920, %f902, %f1223;
	fma.rn.f32 	%f921, %f903, %f1224, %f920;
	fma.rn.f32 	%f922, %f904, %f1225, %f921;
	fma.rn.f32 	%f346, %f905, %f916, %f922;
	ld.v2.u32 	{%r322, %r323}, [%rd1+8];
	add.s32 	%r324, %r322, -1;
	rem.u32 	%r12, %r1, %r324;
	sub.s32 	%r325, %r1, %r12;
	add.s32 	%r326, %r323, -1;
	div.u32 	%r327, %r325, %r326;
	rem.u32 	%r13, %r327, %r326;
	mul.lo.s32 	%r328, %r13, %r324;
	sub.s32 	%r329, %r325, %r328;
	mul.lo.s32 	%r330, %r326, %r324;
	div.u32 	%r14, %r329, %r330;
	cvt.rn.f32.u32 	%f347, %r12;
	cvt.rn.f32.u32 	%f348, %r13;
	cvt.rn.f32.u32 	%f349, %r14;
	add.f32 	%f923, %f347, 0f3F800000;
	add.f32 	%f924, %f348, 0f3F800000;
	ld.v2.f32 	{%f925, %f926}, [%rd1+24];
	ld.f32 	%f927, [%rd1+20];
	mul.f32 	%f928, %f927, %f347;
	mul.f32 	%f929, %f925, %f348;
	mul.f32 	%f930, %f927, %f923;
	mul.f32 	%f931, %f925, %f924;
	rcp.rn.f32 	%f932, %f344;
	rcp.rn.f32 	%f933, %f345;
	setp.ltu.f32 	%p30, %f932, 0f00000000;
	selp.f32 	%f934, %f930, %f928, %p30;
	sub.f32 	%f935, %f934, %f341;
	mul.f32 	%f1229, %f932, %f935;
	selp.f32 	%f936, %f928, %f930, %p30;
	sub.f32 	%f937, %f936, %f341;
	mul.f32 	%f1230, %f932, %f937;
	setp.ltu.f32 	%p31, %f933, 0f00000000;
	selp.f32 	%f938, %f931, %f929, %p31;
	sub.f32 	%f939, %f938, %f342;
	mul.f32 	%f354, %f933, %f939;
	selp.f32 	%f940, %f929, %f931, %p31;
	sub.f32 	%f941, %f940, %f342;
	mul.f32 	%f355, %f933, %f941;
	setp.gt.f32 	%p32, %f1229, %f355;
	setp.gt.f32 	%p33, %f354, %f1230;
	or.pred  	%p34, %p32, %p33;
	mov.pred 	%p108, -1;
	@%p34 bra 	$L__BB7_55;

	setp.gt.f32 	%p35, %f354, %f1229;
	@%p35 bra 	$L__BB7_44;

	abs.f32 	%f942, %f1229;
	setp.lt.f32 	%p36, %f942, 0f7F800000;
	@%p36 bra 	$L__BB7_45;

$L__BB7_44:
	mov.f32 	%f1229, %f354;

$L__BB7_45:
	setp.lt.f32 	%p37, %f355, %f1230;
	@%p37 bra 	$L__BB7_47;

	abs.f32 	%f943, %f1230;
	setp.lt.f32 	%p38, %f943, 0f7F800000;
	@%p38 bra 	$L__BB7_48;

$L__BB7_47:
	mov.f32 	%f1230, %f355;

$L__BB7_48:
	mul.f32 	%f944, %f926, %f349;
	add.f32 	%f945, %f349, 0f3F800000;
	mul.f32 	%f946, %f926, %f945;
	rcp.rn.f32 	%f947, %f346;
	setp.ltu.f32 	%p40, %f947, 0f00000000;
	selp.f32 	%f948, %f946, %f944, %p40;
	sub.f32 	%f949, %f948, %f343;
	mul.f32 	%f358, %f947, %f949;
	selp.f32 	%f950, %f944, %f946, %p40;
	sub.f32 	%f951, %f950, %f343;
	mul.f32 	%f359, %f947, %f951;
	setp.gt.f32 	%p41, %f1229, %f359;
	setp.gt.f32 	%p42, %f358, %f1230;
	or.pred  	%p43, %p41, %p42;
	@%p43 bra 	$L__BB7_55;

	setp.gt.f32 	%p44, %f358, %f1229;
	@%p44 bra 	$L__BB7_51;

	abs.f32 	%f952, %f1229;
	setp.lt.f32 	%p45, %f952, 0f7F800000;
	@%p45 bra 	$L__BB7_52;

$L__BB7_51:
	mov.f32 	%f1229, %f358;

$L__BB7_52:
	setp.lt.f32 	%p46, %f359, %f1230;
	@%p46 bra 	$L__BB7_54;

	abs.f32 	%f953, %f1230;
	setp.lt.f32 	%p48, %f953, 0f7F800000;
	mov.pred 	%p108, 0;
	@%p48 bra 	$L__BB7_55;

$L__BB7_54:
	mov.pred 	%p108, 0;
	mov.f32 	%f1230, %f359;

$L__BB7_55:
	@%p108 bra 	$L__BB7_78;

	mov.f32 	%f954, 0f00000000;
	max.f32 	%f363, %f1229, %f954;
	setp.lt.f32 	%p50, %f1230, %f363;
	@%p50 bra 	$L__BB7_78;

	cvt.rn.f32.u32 	%f955, %r324;
	cvt.rn.f32.u32 	%f956, %r326;
	ld.u32 	%r333, [%rd1+16];
	add.s32 	%r334, %r333, -1;
	cvt.rn.f32.u32 	%f957, %r334;
	mul.f32 	%f958, %f341, %f955;
	fma.rn.f32 	%f960, %f954, %f342, %f958;
	fma.rn.f32 	%f961, %f954, %f343, %f960;
	neg.f32 	%f962, %f347;
	mov.f32 	%f963, 0f3F800000;
	fma.rn.f32 	%f964, %f962, %f963, %f961;
	mul.f32 	%f965, %f341, 0f00000000;
	fma.rn.f32 	%f966, %f956, %f342, %f965;
	fma.rn.f32 	%f967, %f954, %f343, %f966;
	neg.f32 	%f968, %f348;
	fma.rn.f32 	%f969, %f968, %f963, %f967;
	fma.rn.f32 	%f970, %f954, %f342, %f965;
	fma.rn.f32 	%f971, %f957, %f343, %f970;
	neg.f32 	%f972, %f349;
	fma.rn.f32 	%f973, %f972, %f963, %f971;
	mul.f32 	%f974, %f344, %f955;
	fma.rn.f32 	%f975, %f954, %f345, %f974;
	fma.rn.f32 	%f976, %f954, %f346, %f975;
	fma.rn.f32 	%f977, %f962, %f954, %f976;
	mul.f32 	%f978, %f344, 0f00000000;
	fma.rn.f32 	%f979, %f956, %f345, %f978;
	fma.rn.f32 	%f980, %f954, %f346, %f979;
	fma.rn.f32 	%f981, %f968, %f954, %f980;
	fma.rn.f32 	%f982, %f954, %f345, %f978;
	fma.rn.f32 	%f983, %f957, %f346, %f982;
	fma.rn.f32 	%f984, %f972, %f954, %f983;
	mul.lo.s32 	%r335, %r323, %r14;
	add.s32 	%r336, %r13, %r335;
	mul.lo.s32 	%r337, %r336, %r322;
	add.s32 	%r338, %r337, %r12;
	ld.u64 	%rd258, [%rd1+32];
	mul.wide.u32 	%rd259, %r338, 4;
	add.s64 	%rd260, %rd258, %rd259;
	add.s32 	%r339, %r12, 1;
	add.s32 	%r340, %r337, %r339;
	mul.wide.u32 	%rd261, %r340, 4;
	add.s64 	%rd262, %rd258, %rd261;
	add.s32 	%r341, %r13, 1;
	add.s32 	%r342, %r335, %r341;
	mul.lo.s32 	%r343, %r342, %r322;
	add.s32 	%r344, %r343, %r12;
	mul.wide.u32 	%rd263, %r344, 4;
	add.s64 	%rd264, %rd258, %rd263;
	add.s32 	%r345, %r343, %r339;
	mul.wide.u32 	%rd265, %r345, 4;
	add.s64 	%rd266, %rd258, %rd265;
	add.s32 	%r346, %r335, %r323;
	add.s32 	%r347, %r346, %r13;
	mul.lo.s32 	%r348, %r347, %r322;
	add.s32 	%r349, %r348, %r12;
	mul.wide.u32 	%rd267, %r349, 4;
	add.s64 	%rd268, %rd258, %rd267;
	add.s32 	%r350, %r348, %r339;
	mul.wide.u32 	%rd269, %r350, 4;
	add.s64 	%rd270, %rd258, %rd269;
	add.s32 	%r351, %r346, %r341;
	mul.lo.s32 	%r352, %r351, %r322;
	add.s32 	%r353, %r352, %r12;
	mul.wide.u32 	%rd271, %r353, 4;
	add.s64 	%rd272, %rd258, %rd271;
	add.s32 	%r354, %r352, %r339;
	mul.wide.u32 	%rd273, %r354, 4;
	add.s64 	%rd274, %rd258, %rd273;
	fma.rn.f32 	%f985, %f363, %f977, %f964;
	fma.rn.f32 	%f986, %f363, %f981, %f969;
	fma.rn.f32 	%f987, %f363, %f984, %f973;
	ld.f32 	%f988, [%rd270];
	ld.f32 	%f989, [%rd268];
	sub.f32 	%f990, %f988, %f989;
	ld.f32 	%f991, [%rd262];
	ld.f32 	%f992, [%rd260];
	sub.f32 	%f993, %f991, %f992;
	ld.f32 	%f994, [%rd264];
	sub.f32 	%f995, %f994, %f992;
	ld.f32 	%f996, [%rd266];
	sub.f32 	%f997, %f996, %f994;
	sub.f32 	%f998, %f997, %f993;
	sub.f32 	%f999, %f992, %f989;
	sub.f32 	%f1000, %f993, %f990;
	ld.f32 	%f1001, [%rd272];
	sub.f32 	%f1002, %f1001, %f989;
	sub.f32 	%f1003, %f995, %f1002;
	ld.f32 	%f1004, [%rd274];
	sub.f32 	%f1005, %f1004, %f1001;
	sub.f32 	%f1006, %f1005, %f990;
	sub.f32 	%f1007, %f998, %f1006;
	mul.f32 	%f1008, %f985, %f986;
	mul.f32 	%f1009, %f977, %f981;
	mul.f32 	%f1010, %f986, %f977;
	fma.rn.f32 	%f1011, %f985, %f981, %f1010;
	neg.f32 	%f1012, %f993;
	fma.rn.f32 	%f1013, %f1000, %f987, %f1012;
	neg.f32 	%f1014, %f995;
	fma.rn.f32 	%f1015, %f1003, %f987, %f1014;
	neg.f32 	%f1016, %f998;
	fma.rn.f32 	%f1017, %f1007, %f987, %f1016;
	neg.f32 	%f1018, %f992;
	fma.rn.f32 	%f1019, %f999, %f987, %f1018;
	mul.f32 	%f1020, %f1008, %f1017;
	fma.rn.f32 	%f1021, %f986, %f1015, %f1020;
	fma.rn.f32 	%f1022, %f985, %f1013, %f1021;
	add.f32 	%f364, %f1019, %f1022;
	mul.f32 	%f1023, %f981, %f1015;
	fma.rn.f32 	%f1024, %f977, %f1013, %f1023;
	fma.rn.f32 	%f1025, %f1011, %f1017, %f1024;
	mul.f32 	%f1026, %f1007, %f1008;
	fma.rn.f32 	%f1027, %f1003, %f986, %f1026;
	fma.rn.f32 	%f1028, %f1000, %f985, %f1027;
	add.f32 	%f1029, %f999, %f1028;
	fma.rn.f32 	%f365, %f984, %f1029, %f1025;
	mul.f32 	%f1030, %f1007, %f1011;
	fma.rn.f32 	%f1031, %f1003, %f981, %f1030;
	fma.rn.f32 	%f1032, %f1000, %f977, %f1031;
	mul.f32 	%f1033, %f984, %f1032;
	fma.rn.f32 	%f366, %f1009, %f1017, %f1033;
	mul.f32 	%f1034, %f1007, %f1009;
	mul.f32 	%f367, %f984, %f1034;
	sub.f32 	%f368, %f1230, %f363;
	setp.neu.f32 	%p51, %f367, 0f00000000;
	@%p51 bra 	$L__BB7_65;
	bra.uni 	$L__BB7_58;

$L__BB7_65:
	mul.f32 	%f377, %f367, 0f40400000;
	setp.eq.f32 	%p76, %f377, 0f00000000;
	mov.f32 	%f1239, 0f00000000;
	add.f32 	%f378, %f366, %f366;
	setp.eq.f32 	%p77, %f378, 0f00000000;
	and.pred  	%p78, %p76, %p77;
	mov.pred 	%p110, -1;
	mov.f32 	%f1233, %f1239;
	mov.f32 	%f1234, %f1239;
	@%p78 bra 	$L__BB7_68;

	neg.f32 	%f1051, %f365;
	div.rn.f32 	%f1233, %f1051, %f378;
	mul.f32 	%f1052, %f377, 0fC0800000;
	mul.f32 	%f1053, %f1052, %f365;
	fma.rn.f32 	%f380, %f378, %f378, %f1053;
	setp.neu.f32 	%p80, %f377, 0f00000000;
	setp.lt.f32 	%p81, %f380, 0f00000000;
	and.pred  	%p82, %p81, %p80;
	mov.f32 	%f1234, %f1233;
	@%p82 bra 	$L__BB7_68;

	mov.b32 	%r364, %f378;
	and.b32  	%r365, %r364, -2147483648;
	sqrt.rn.f32 	%f1054, %f380;
	mov.b32 	%r366, %f1054;
	and.b32  	%r367, %r366, 2147483647;
	or.b32  	%r368, %r367, %r365;
	mov.b32 	%f1055, %r368;
	add.f32 	%f1056, %f378, %f1055;
	mul.f32 	%f1057, %f1056, 0fBF000000;
	div.rn.f32 	%f1058, %f1057, %f377;
	div.rn.f32 	%f1059, %f365, %f1057;
	min.f32 	%f1060, %f1058, %f1059;
	max.f32 	%f1061, %f1058, %f1059;
	selp.f32 	%f1234, %f1233, %f1060, %p76;
	selp.f32 	%f1233, %f1233, %f1061, %p76;
	mov.pred 	%p110, 0;

$L__BB7_68:
	fma.rn.f32 	%f1063, %f367, %f1239, %f366;
	fma.rn.f32 	%f1064, %f1063, %f1239, %f365;
	fma.rn.f32 	%f1240, %f1064, %f1239, %f364;
	fma.rn.f32 	%f1065, %f367, %f368, %f366;
	fma.rn.f32 	%f1066, %f1065, %f368, %f365;
	fma.rn.f32 	%f1242, %f1066, %f368, %f364;
	mov.f32 	%f1241, %f368;
	@%p110 bra 	$L__BB7_73;

	setp.ltu.f32 	%p85, %f1234, 0f00000000;
	mov.f32 	%f1239, 0f00000000;
	setp.gtu.f32 	%p86, %f1234, %f368;
	or.pred  	%p87, %p85, %p86;
	mov.f32 	%f1241, %f368;
	@%p87 bra 	$L__BB7_71;

	fma.rn.f32 	%f1068, %f367, %f1234, %f366;
	fma.rn.f32 	%f1069, %f1068, %f1234, %f365;
	fma.rn.f32 	%f1070, %f1069, %f1234, %f364;
	mul.f32 	%f1071, %f1240, %f1070;
	setp.le.f32 	%p88, %f1071, 0f00000000;
	selp.f32 	%f1239, 0f00000000, %f1234, %p88;
	selp.f32 	%f1240, %f1240, %f1070, %p88;
	selp.f32 	%f1241, %f1234, %f368, %p88;
	selp.f32 	%f1242, %f1070, %f1242, %p88;

$L__BB7_71:
	setp.gtu.f32 	%p89, %f1233, %f1241;
	setp.gtu.f32 	%p90, %f1239, %f1233;
	or.pred  	%p91, %p90, %p89;
	@%p91 bra 	$L__BB7_73;

	fma.rn.f32 	%f1072, %f367, %f1233, %f366;
	fma.rn.f32 	%f1073, %f1072, %f1233, %f365;
	fma.rn.f32 	%f1074, %f1073, %f1233, %f364;
	mul.f32 	%f1075, %f1240, %f1074;
	setp.le.f32 	%p92, %f1075, 0f00000000;
	selp.f32 	%f1239, %f1239, %f1233, %p92;
	selp.f32 	%f1240, %f1240, %f1074, %p92;
	selp.f32 	%f1241, %f1233, %f1241, %p92;
	selp.f32 	%f1242, %f1074, %f1242, %p92;

$L__BB7_73:
	mul.f32 	%f1077, %f1240, %f1242;
	setp.gt.f32 	%p94, %f1077, 0f00000000;
	mov.pred 	%p111, 0;
	mov.f32 	%f1247, 0f00000000;
	@%p94 bra 	$L__BB7_76;

	mov.u32 	%r375, 0;

$L__BB7_75:
	sub.f32 	%f1078, %f1242, %f1240;
	div.rn.f32 	%f1079, %f1240, %f1078;
	sub.f32 	%f1080, %f1241, %f1239;
	mul.f32 	%f1081, %f1079, %f1080;
	sub.f32 	%f1247, %f1239, %f1081;
	fma.rn.f32 	%f1082, %f367, %f1247, %f366;
	fma.rn.f32 	%f1083, %f1082, %f1247, %f365;
	fma.rn.f32 	%f1084, %f1083, %f1247, %f364;
	mul.f32 	%f1085, %f1240, %f1084;
	setp.le.f32 	%p96, %f1085, 0f00000000;
	selp.f32 	%f1242, %f1084, %f1242, %p96;
	selp.f32 	%f1240, %f1240, %f1084, %p96;
	selp.f32 	%f1241, %f1247, %f1241, %p96;
	selp.f32 	%f1239, %f1239, %f1247, %p96;
	sub.f32 	%f1086, %f1241, %f1239;
	abs.f32 	%f1087, %f1086;
	setp.geu.f32 	%p97, %f1087, 0f3727C5AC;
	setp.lt.f32 	%p98, %f1087, 0f3727C5AC;
	add.s32 	%r370, %r375, 1;
	setp.lt.u32 	%p99, %r370, 51;
	selp.b32 	%r375, %r375, %r370, %p98;
	mov.pred 	%p111, -1;
	and.pred  	%p100, %p99, %p97;
	@%p100 bra 	$L__BB7_75;

$L__BB7_76:
	setp.ltu.f32 	%p101, %f1247, 0f00000000;
	not.pred 	%p102, %p111;
	or.pred  	%p103, %p101, %p102;
	setp.gtu.f32 	%p104, %f1247, %f368;
	or.pred  	%p105, %p104, %p103;
	add.f32 	%f413, %f363, %f1247;
	setp.geu.f32 	%p106, %f413, %f340;
	or.pred  	%p107, %p105, %p106;
	@%p107 bra 	$L__BB7_78;

	mov.u32 	%r372, 254;
	// begin inline asm
	call (%r371), _optix_report_intersection_0, (%f413, %r372);
	// end inline asm
	bra.uni 	$L__BB7_78;

$L__BB7_58:
	setp.eq.f32 	%p53, %f366, 0f00000000;
	setp.eq.f32 	%p54, %f365, 0f00000000;
	and.pred  	%p55, %p53, %p54;
	mov.pred 	%p109, 0;
	@%p55 bra 	$L__BB7_61;

	neg.f32 	%f1036, %f364;
	div.rn.f32 	%f1231, %f1036, %f365;
	mul.f32 	%f1037, %f366, 0fC0800000;
	mul.f32 	%f1038, %f364, %f1037;
	fma.rn.f32 	%f370, %f365, %f365, %f1038;
	setp.neu.f32 	%p57, %f366, 0f00000000;
	setp.lt.f32 	%p58, %f370, 0f00000000;
	and.pred  	%p59, %p58, %p57;
	mov.f32 	%f1232, %f1231;
	@%p59 bra 	$L__BB7_61;

	mov.b32 	%r355, %f365;
	and.b32  	%r356, %r355, -2147483648;
	sqrt.rn.f32 	%f1039, %f370;
	mov.b32 	%r357, %f1039;
	and.b32  	%r358, %r357, 2147483647;
	or.b32  	%r359, %r358, %r356;
	mov.b32 	%f1040, %r359;
	add.f32 	%f1041, %f365, %f1040;
	mul.f32 	%f1042, %f1041, 0fBF000000;
	div.rn.f32 	%f1043, %f1042, %f366;
	div.rn.f32 	%f1044, %f364, %f1042;
	min.f32 	%f1045, %f1043, %f1044;
	max.f32 	%f1046, %f1043, %f1044;
	selp.f32 	%f371, %f1231, %f1045, %p53;
	selp.f32 	%f1232, %f1231, %f1046, %p53;
	mov.pred 	%p109, -1;
	mov.f32 	%f1231, %f371;

$L__BB7_61:
	setp.ge.f32 	%p62, %f1231, 0f00000000;
	and.pred  	%p63, %p62, %p109;
	setp.le.f32 	%p64, %f1231, %f368;
	and.pred  	%p65, %p64, %p63;
	add.f32 	%f375, %f363, %f1231;
	setp.lt.f32 	%p66, %f375, %f340;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB7_64;
	bra.uni 	$L__BB7_62;

$L__BB7_64:
	mov.u32 	%r363, 254;
	// begin inline asm
	call (%r362), _optix_report_intersection_0, (%f375, %r363);
	// end inline asm
	bra.uni 	$L__BB7_78;

$L__BB7_62:
	setp.ltu.f32 	%p68, %f1232, 0f00000000;
	not.pred 	%p69, %p109;
	or.pred  	%p70, %p68, %p69;
	setp.gtu.f32 	%p71, %f1232, %f368;
	or.pred  	%p72, %p71, %p70;
	add.f32 	%f376, %f363, %f1232;
	setp.geu.f32 	%p73, %f376, %f340;
	or.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB7_78;

	mov.u32 	%r361, 254;
	// begin inline asm
	call (%r360), _optix_report_intersection_0, (%f376, %r361);
	// end inline asm

$L__BB7_78:
	ret;

}
	// .globl	__closesthit__sdfgrid
.visible .entry __closesthit__sdfgrid()
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<2>;


	// begin inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	// begin inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// end inline asm
	// begin inline asm
	call (%f1), _optix_get_ray_tmax, ();
	// end inline asm
	ld.u32 	%r11, [%rd1];
	mov.b32 	%r3, %f1;
	mov.u32 	%r2, 0;
	// begin inline asm
	call _optix_set_payload, (%r2, %r3);
	// end inline asm
	mov.u32 	%r4, 1;
	// begin inline asm
	call _optix_set_payload, (%r4, %r14);
	// end inline asm
	mov.u32 	%r6, 2;
	// begin inline asm
	call _optix_set_payload, (%r6, %r15);
	// end inline asm
	mov.u32 	%r8, 3;
	// begin inline asm
	call _optix_set_payload, (%r8, %r1);
	// end inline asm
	mov.u32 	%r10, 4;
	// begin inline asm
	call _optix_set_payload, (%r10, %r11);
	// end inline asm
	mov.u32 	%r13, 5;
	// begin inline asm
	call (%r12), _optix_get_payload, (%r13);
	// end inline asm
	setp.eq.s32 	%p1, %r12, 0;
	@%p1 bra 	$L__BB8_2;

	// begin inline asm
	call (%r16), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r13, %r16);
	// end inline asm

$L__BB8_2:
	ret;

}
	// .globl	__intersection__sphere
.visible .entry __intersection__sphere()
{
	.reg .pred 	%p<54>;
	.reg .f32 	%f<1004>;
	.reg .b32 	%r<322>;
	.reg .b64 	%rd<258>;


	// begin inline asm
	call (%rd17), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u64 	%rd1, [%rd17+8];
	// begin inline asm
	call (%f941), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f942), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f943), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%r9), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p2, %r9, 0;
	@%p2 bra 	$L__BB9_20;

	// begin inline asm
	call (%r10), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f369), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p3, %r10, 0;
	@%p3 bra 	$L__BB9_19;

	mov.u32 	%r320, 0;

$L__BB9_3:
	.pragma "nounroll";
	// begin inline asm
	call (%rd18), _optix_get_transform_list_handle, (%r320);
	// end inline asm
	// begin inline asm
	call (%r13), _optix_get_transform_type_from_handle, (%rd18);
	// end inline asm
	or.b32  	%r14, %r13, 1;
	setp.eq.s32 	%p4, %r14, 3;
	@%p4 bra 	$L__BB9_9;
	bra.uni 	$L__BB9_4;

$L__BB9_9:
	setp.eq.s32 	%p7, %r13, 2;
	@%p7 bra 	$L__BB9_13;
	bra.uni 	$L__BB9_10;

$L__BB9_13:
	// begin inline asm
	call (%rd90), _optix_get_matrix_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd92, %rd90;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r102,%r103,%r104,%r105}, [%rd92];
	// end inline asm
	add.s64 	%rd96, %rd90, 16;
	// begin inline asm
	cvta.to.global.u64 %rd95, %rd96;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r106,%r107,%r108,%r109}, [%rd95];
	// end inline asm
	add.s64 	%rd99, %rd90, 32;
	// begin inline asm
	cvta.to.global.u64 %rd98, %rd99;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r110,%r111,%r112,%r113}, [%rd98];
	// end inline asm
	add.s64 	%rd102, %rd90, 48;
	// begin inline asm
	cvta.to.global.u64 %rd101, %rd102;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r114,%r115,%r116,%r117}, [%rd101];
	// end inline asm
	add.s64 	%rd105, %rd90, 64;
	// begin inline asm
	cvta.to.global.u64 %rd104, %rd105;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd104];
	// end inline asm
	add.s64 	%rd108, %rd90, 80;
	// begin inline asm
	cvta.to.global.u64 %rd107, %rd108;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd107];
	// end inline asm
	add.s64 	%rd111, %rd90, 96;
	// begin inline asm
	cvta.to.global.u64 %rd110, %rd111;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd110];
	// end inline asm
	add.s64 	%rd114, %rd90, 112;
	// begin inline asm
	cvta.to.global.u64 %rd113, %rd114;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd113];
	// end inline asm
	mov.b32 	%f500, %r105;
	mov.b32 	%f501, %r106;
	and.b32  	%r146, %r104, 65535;
	add.s32 	%r147, %r146, -1;
	cvt.rn.f32.s32 	%f502, %r147;
	sub.f32 	%f503, %f369, %f500;
	sub.f32 	%f504, %f501, %f500;
	div.approx.f32 	%f505, %f503, %f504;
	mul.f32 	%f506, %f505, %f502;
	min.f32 	%f507, %f502, %f506;
	mov.f32 	%f508, 0f00000000;
	max.f32 	%f509, %f508, %f507;
	setp.num.f32 	%p10, %f509, %f509;
	selp.f32 	%f510, %f509, 0f00000000, %p10;
	cvt.rmi.f32.f32 	%f511, %f510;
	add.f32 	%f512, %f502, 0fBF800000;
	min.f32 	%f513, %f511, %f512;
	sub.f32 	%f90, %f510, %f513;
	cvt.rzi.s32.f32 	%r148, %f513;
	cvt.s64.s32 	%rd8, %r148;
	mul.wide.s32 	%rd125, %r148, 48;
	add.s64 	%rd117, %rd99, %rd125;
	// begin inline asm
	cvta.to.global.u64 %rd116, %rd117;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd116];
	// end inline asm
	mov.b32 	%f896, %r134;
	mov.b32 	%f895, %r135;
	mov.b32 	%f894, %r136;
	mov.b32 	%f893, %r137;
	add.s64 	%rd120, %rd117, 16;
	// begin inline asm
	cvta.to.global.u64 %rd119, %rd120;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd119];
	// end inline asm
	mov.b32 	%f900, %r138;
	mov.b32 	%f899, %r139;
	mov.b32 	%f898, %r140;
	mov.b32 	%f897, %r141;
	add.s64 	%rd123, %rd117, 32;
	// begin inline asm
	cvta.to.global.u64 %rd122, %rd123;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd122];
	// end inline asm
	mov.b32 	%f904, %r142;
	mov.b32 	%f903, %r143;
	mov.b32 	%f902, %r144;
	mov.b32 	%f901, %r145;
	setp.leu.f32 	%p11, %f90, 0f00000000;
	@%p11 bra 	$L__BB9_15;

	mov.f32 	%f514, 0f3F800000;
	sub.f32 	%f515, %f514, %f90;
	mul.lo.s64 	%rd135, %rd8, 48;
	add.s64 	%rd136, %rd90, %rd135;
	add.s64 	%rd127, %rd136, 80;
	// begin inline asm
	cvta.to.global.u64 %rd126, %rd127;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r149,%r150,%r151,%r152}, [%rd126];
	// end inline asm
	mov.b32 	%f516, %r149;
	mov.b32 	%f517, %r150;
	mov.b32 	%f518, %r151;
	mov.b32 	%f519, %r152;
	mul.f32 	%f520, %f90, %f516;
	mul.f32 	%f521, %f90, %f517;
	mul.f32 	%f522, %f90, %f518;
	mul.f32 	%f523, %f90, %f519;
	fma.rn.f32 	%f896, %f515, %f896, %f520;
	fma.rn.f32 	%f895, %f515, %f895, %f521;
	fma.rn.f32 	%f894, %f515, %f894, %f522;
	fma.rn.f32 	%f893, %f515, %f893, %f523;
	add.s64 	%rd130, %rd136, 96;
	// begin inline asm
	cvta.to.global.u64 %rd129, %rd130;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r153,%r154,%r155,%r156}, [%rd129];
	// end inline asm
	mov.b32 	%f524, %r153;
	mov.b32 	%f525, %r154;
	mov.b32 	%f526, %r155;
	mov.b32 	%f527, %r156;
	mul.f32 	%f528, %f90, %f524;
	mul.f32 	%f529, %f90, %f525;
	mul.f32 	%f530, %f90, %f526;
	mul.f32 	%f531, %f90, %f527;
	fma.rn.f32 	%f900, %f515, %f900, %f528;
	fma.rn.f32 	%f899, %f515, %f899, %f529;
	fma.rn.f32 	%f898, %f515, %f898, %f530;
	fma.rn.f32 	%f897, %f515, %f897, %f531;
	add.s64 	%rd133, %rd136, 112;
	// begin inline asm
	cvta.to.global.u64 %rd132, %rd133;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r157,%r158,%r159,%r160}, [%rd132];
	// end inline asm
	mov.b32 	%f532, %r157;
	mov.b32 	%f533, %r158;
	mov.b32 	%f534, %r159;
	mov.b32 	%f535, %r160;
	mul.f32 	%f536, %f90, %f532;
	mul.f32 	%f537, %f90, %f533;
	mul.f32 	%f538, %f90, %f534;
	mul.f32 	%f539, %f90, %f535;
	fma.rn.f32 	%f904, %f515, %f904, %f536;
	fma.rn.f32 	%f903, %f515, %f903, %f537;
	fma.rn.f32 	%f902, %f515, %f902, %f538;
	fma.rn.f32 	%f901, %f515, %f901, %f539;
	bra.uni 	$L__BB9_15;

$L__BB9_4:
	mov.f32 	%f905, 0f00000000;
	mov.f32 	%f908, 0f3F800000;
	setp.eq.s32 	%p5, %r13, 4;
	@%p5 bra 	$L__BB9_7;

	setp.ne.s32 	%p6, %r13, 1;
	mov.f32 	%f906, %f905;
	mov.f32 	%f907, %f905;
	mov.f32 	%f909, %f905;
	mov.f32 	%f910, %f905;
	mov.f32 	%f911, %f908;
	mov.f32 	%f912, %f905;
	mov.f32 	%f913, %f905;
	mov.f32 	%f914, %f908;
	mov.f32 	%f915, %f905;
	mov.f32 	%f916, %f905;
	@%p6 bra 	$L__BB9_16;

	// begin inline asm
	call (%rd20), _optix_get_static_transform_from_handle, (%rd18);
	// end inline asm
	add.s64 	%rd256, %rd20, 64;
	bra.uni 	$L__BB9_8;

$L__BB9_10:
	// begin inline asm
	call (%rd33), _optix_get_srt_motion_transform_from_handle, (%rd18);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd35, %rd33;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r27,%r28,%r29,%r30}, [%rd35];
	// end inline asm
	add.s64 	%rd39, %rd33, 16;
	// begin inline asm
	cvta.to.global.u64 %rd38, %rd39;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r31,%r32,%r33,%r34}, [%rd38];
	// end inline asm
	add.s64 	%rd42, %rd33, 32;
	// begin inline asm
	cvta.to.global.u64 %rd41, %rd42;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r35,%r36,%r37,%r38}, [%rd41];
	// end inline asm
	add.s64 	%rd45, %rd33, 48;
	// begin inline asm
	cvta.to.global.u64 %rd44, %rd45;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r39,%r40,%r41,%r42}, [%rd44];
	// end inline asm
	add.s64 	%rd48, %rd33, 64;
	// begin inline asm
	cvta.to.global.u64 %rd47, %rd48;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r43,%r44,%r45,%r46}, [%rd47];
	// end inline asm
	add.s64 	%rd51, %rd33, 80;
	// begin inline asm
	cvta.to.global.u64 %rd50, %rd51;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd50];
	// end inline asm
	add.s64 	%rd54, %rd33, 96;
	// begin inline asm
	cvta.to.global.u64 %rd53, %rd54;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd53];
	// end inline asm
	add.s64 	%rd57, %rd33, 112;
	// begin inline asm
	cvta.to.global.u64 %rd56, %rd57;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd56];
	// end inline asm
	add.s64 	%rd60, %rd33, 128;
	// begin inline asm
	cvta.to.global.u64 %rd59, %rd60;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd59];
	// end inline asm
	add.s64 	%rd63, %rd33, 144;
	// begin inline asm
	cvta.to.global.u64 %rd62, %rd63;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd62];
	// end inline asm
	mov.b32 	%f384, %r30;
	mov.b32 	%f385, %r31;
	and.b32  	%r83, %r29, 65535;
	add.s32 	%r84, %r83, -1;
	cvt.rn.f32.s32 	%f386, %r84;
	sub.f32 	%f387, %f369, %f384;
	sub.f32 	%f388, %f385, %f384;
	div.approx.f32 	%f389, %f387, %f388;
	mul.f32 	%f390, %f389, %f386;
	min.f32 	%f391, %f386, %f390;
	mov.f32 	%f392, 0f00000000;
	max.f32 	%f393, %f392, %f391;
	setp.num.f32 	%p8, %f393, %f393;
	selp.f32 	%f394, %f393, 0f00000000, %p8;
	cvt.rmi.f32.f32 	%f395, %f394;
	add.f32 	%f396, %f386, 0fBF800000;
	min.f32 	%f397, %f395, %f396;
	sub.f32 	%f29, %f394, %f397;
	cvt.rzi.s32.f32 	%r85, %f397;
	mul.wide.s32 	%rd77, %r85, 64;
	add.s64 	%rd66, %rd42, %rd77;
	// begin inline asm
	cvta.to.global.u64 %rd65, %rd66;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd65];
	// end inline asm
	mov.b32 	%f877, %r67;
	mov.b32 	%f878, %r68;
	mov.b32 	%f879, %r69;
	mov.b32 	%f880, %r70;
	add.s64 	%rd69, %rd66, 16;
	// begin inline asm
	cvta.to.global.u64 %rd68, %rd69;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd68];
	// end inline asm
	mov.b32 	%f881, %r71;
	mov.b32 	%f882, %r72;
	mov.b32 	%f883, %r73;
	mov.b32 	%f884, %r74;
	add.s64 	%rd72, %rd66, 32;
	// begin inline asm
	cvta.to.global.u64 %rd71, %rd72;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd71];
	// end inline asm
	mov.b32 	%f885, %r75;
	mov.b32 	%f886, %r76;
	mov.b32 	%f887, %r77;
	mov.b32 	%f888, %r78;
	add.s64 	%rd75, %rd66, 48;
	// begin inline asm
	cvta.to.global.u64 %rd74, %rd75;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd74];
	// end inline asm
	mov.b32 	%f889, %r79;
	mov.b32 	%f890, %r80;
	mov.b32 	%f891, %r81;
	mov.b32 	%f892, %r82;
	setp.leu.f32 	%p9, %f29, 0f00000000;
	@%p9 bra 	$L__BB9_12;

	mov.f32 	%f398, 0f3F800000;
	sub.f32 	%f399, %f398, %f29;
	add.s64 	%rd79, %rd66, 64;
	// begin inline asm
	cvta.to.global.u64 %rd78, %rd79;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r86,%r87,%r88,%r89}, [%rd78];
	// end inline asm
	mov.b32 	%f400, %r86;
	mov.b32 	%f401, %r87;
	mov.b32 	%f402, %r88;
	mov.b32 	%f403, %r89;
	mul.f32 	%f404, %f29, %f400;
	mul.f32 	%f405, %f29, %f401;
	mul.f32 	%f406, %f29, %f402;
	mul.f32 	%f407, %f29, %f403;
	fma.rn.f32 	%f877, %f399, %f877, %f404;
	fma.rn.f32 	%f878, %f399, %f878, %f405;
	fma.rn.f32 	%f879, %f399, %f879, %f406;
	fma.rn.f32 	%f880, %f399, %f880, %f407;
	add.s64 	%rd82, %rd66, 80;
	// begin inline asm
	cvta.to.global.u64 %rd81, %rd82;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r90,%r91,%r92,%r93}, [%rd81];
	// end inline asm
	mov.b32 	%f408, %r90;
	mov.b32 	%f409, %r91;
	mov.b32 	%f410, %r92;
	mov.b32 	%f411, %r93;
	mul.f32 	%f412, %f29, %f408;
	mul.f32 	%f413, %f29, %f409;
	mul.f32 	%f414, %f29, %f410;
	mul.f32 	%f415, %f29, %f411;
	fma.rn.f32 	%f881, %f399, %f881, %f412;
	fma.rn.f32 	%f882, %f399, %f882, %f413;
	fma.rn.f32 	%f883, %f399, %f883, %f414;
	fma.rn.f32 	%f884, %f399, %f884, %f415;
	add.s64 	%rd85, %rd66, 96;
	// begin inline asm
	cvta.to.global.u64 %rd84, %rd85;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r94,%r95,%r96,%r97}, [%rd84];
	// end inline asm
	mov.b32 	%f416, %r94;
	mov.b32 	%f417, %r95;
	mov.b32 	%f418, %r96;
	mov.b32 	%f419, %r97;
	mul.f32 	%f420, %f29, %f416;
	mul.f32 	%f421, %f29, %f417;
	mul.f32 	%f422, %f29, %f418;
	mul.f32 	%f423, %f29, %f419;
	fma.rn.f32 	%f885, %f399, %f885, %f420;
	fma.rn.f32 	%f424, %f399, %f886, %f421;
	fma.rn.f32 	%f425, %f399, %f887, %f422;
	fma.rn.f32 	%f426, %f399, %f888, %f423;
	add.s64 	%rd88, %rd66, 112;
	// begin inline asm
	cvta.to.global.u64 %rd87, %rd88;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r98,%r99,%r100,%r101}, [%rd87];
	// end inline asm
	mov.b32 	%f427, %r98;
	mov.b32 	%f428, %r99;
	mov.b32 	%f429, %r100;
	mov.b32 	%f430, %r101;
	mul.f32 	%f431, %f29, %f427;
	mul.f32 	%f432, %f29, %f428;
	mul.f32 	%f433, %f29, %f429;
	mul.f32 	%f434, %f29, %f430;
	fma.rn.f32 	%f435, %f399, %f889, %f431;
	fma.rn.f32 	%f890, %f399, %f890, %f432;
	fma.rn.f32 	%f891, %f399, %f891, %f433;
	fma.rn.f32 	%f892, %f399, %f892, %f434;
	mul.f32 	%f436, %f425, %f425;
	fma.rn.f32 	%f437, %f424, %f424, %f436;
	fma.rn.f32 	%f438, %f426, %f426, %f437;
	fma.rn.f32 	%f439, %f435, %f435, %f438;
	sqrt.rn.f32 	%f440, %f439;
	rcp.rn.f32 	%f441, %f440;
	mul.f32 	%f886, %f424, %f441;
	mul.f32 	%f887, %f425, %f441;
	mul.f32 	%f888, %f426, %f441;
	mul.f32 	%f889, %f441, %f435;

$L__BB9_12:
	mul.f32 	%f442, %f887, %f887;
	fma.rn.f32 	%f443, %f886, %f886, %f442;
	fma.rn.f32 	%f444, %f888, %f888, %f443;
	fma.rn.f32 	%f445, %f889, %f889, %f444;
	rcp.rn.f32 	%f446, %f445;
	mul.f32 	%f447, %f886, %f446;
	mul.f32 	%f448, %f887, %f446;
	mul.f32 	%f449, %f888, %f446;
	mul.f32 	%f450, %f889, %f446;
	mul.f32 	%f451, %f886, %f447;
	mul.f32 	%f452, %f887, %f448;
	mul.f32 	%f453, %f888, %f449;
	mul.f32 	%f454, %f886, %f448;
	mul.f32 	%f455, %f888, %f450;
	mul.f32 	%f456, %f886, %f449;
	mul.f32 	%f457, %f887, %f450;
	mul.f32 	%f458, %f887, %f449;
	mul.f32 	%f459, %f886, %f450;
	sub.f32 	%f460, %f451, %f452;
	sub.f32 	%f461, %f460, %f453;
	fma.rn.f32 	%f462, %f889, %f450, %f461;
	sub.f32 	%f463, %f454, %f455;
	add.f32 	%f464, %f463, %f463;
	add.f32 	%f465, %f456, %f457;
	add.f32 	%f466, %f465, %f465;
	add.f32 	%f467, %f454, %f455;
	add.f32 	%f468, %f467, %f467;
	sub.f32 	%f469, %f452, %f451;
	sub.f32 	%f470, %f469, %f453;
	fma.rn.f32 	%f471, %f889, %f450, %f470;
	sub.f32 	%f472, %f458, %f459;
	add.f32 	%f473, %f472, %f472;
	sub.f32 	%f474, %f456, %f457;
	add.f32 	%f475, %f474, %f474;
	add.f32 	%f476, %f458, %f459;
	add.f32 	%f477, %f476, %f476;
	neg.f32 	%f478, %f451;
	sub.f32 	%f479, %f478, %f452;
	add.f32 	%f480, %f453, %f479;
	fma.rn.f32 	%f481, %f889, %f450, %f480;
	mul.f32 	%f482, %f880, %f462;
	fma.rn.f32 	%f483, %f883, %f464, %f482;
	fma.rn.f32 	%f484, %f885, %f466, %f483;
	add.f32 	%f893, %f890, %f484;
	mul.f32 	%f485, %f883, %f471;
	fma.rn.f32 	%f486, %f880, %f468, %f485;
	fma.rn.f32 	%f487, %f885, %f473, %f486;
	add.f32 	%f897, %f891, %f487;
	mul.f32 	%f488, %f883, %f477;
	fma.rn.f32 	%f489, %f880, %f475, %f488;
	fma.rn.f32 	%f490, %f885, %f481, %f489;
	add.f32 	%f901, %f892, %f490;
	mul.f32 	%f491, %f879, %f462;
	fma.rn.f32 	%f492, %f882, %f464, %f491;
	fma.rn.f32 	%f894, %f884, %f466, %f492;
	mul.f32 	%f493, %f882, %f471;
	fma.rn.f32 	%f494, %f879, %f468, %f493;
	fma.rn.f32 	%f898, %f884, %f473, %f494;
	mul.f32 	%f495, %f882, %f477;
	fma.rn.f32 	%f496, %f879, %f475, %f495;
	fma.rn.f32 	%f902, %f884, %f481, %f496;
	mul.f32 	%f497, %f878, %f462;
	fma.rn.f32 	%f895, %f881, %f464, %f497;
	mul.f32 	%f498, %f881, %f471;
	fma.rn.f32 	%f899, %f878, %f468, %f498;
	mul.f32 	%f499, %f881, %f477;
	fma.rn.f32 	%f903, %f878, %f475, %f499;
	mul.f32 	%f896, %f877, %f462;
	mul.f32 	%f900, %f877, %f468;
	mul.f32 	%f904, %f877, %f475;

$L__BB9_15:
	mul.f32 	%f540, %f898, %f903;
	mul.f32 	%f541, %f899, %f902;
	sub.f32 	%f542, %f541, %f540;
	mul.f32 	%f543, %f896, %f542;
	mul.f32 	%f544, %f898, %f904;
	mul.f32 	%f545, %f900, %f902;
	sub.f32 	%f546, %f545, %f544;
	mul.f32 	%f547, %f895, %f546;
	sub.f32 	%f548, %f543, %f547;
	mul.f32 	%f549, %f899, %f904;
	mul.f32 	%f550, %f900, %f903;
	sub.f32 	%f551, %f550, %f549;
	fma.rn.f32 	%f552, %f894, %f551, %f548;
	rcp.rn.f32 	%f553, %f552;
	mul.f32 	%f908, %f542, %f553;
	mul.f32 	%f554, %f895, %f902;
	mul.f32 	%f555, %f894, %f903;
	sub.f32 	%f556, %f555, %f554;
	mul.f32 	%f907, %f556, %f553;
	mul.f32 	%f557, %f894, %f899;
	mul.f32 	%f558, %f895, %f898;
	sub.f32 	%f559, %f558, %f557;
	mul.f32 	%f906, %f559, %f553;
	sub.f32 	%f560, %f544, %f545;
	mul.f32 	%f912, %f560, %f553;
	mul.f32 	%f561, %f894, %f904;
	mul.f32 	%f562, %f896, %f902;
	sub.f32 	%f563, %f562, %f561;
	mul.f32 	%f911, %f563, %f553;
	mul.f32 	%f564, %f896, %f898;
	mul.f32 	%f565, %f894, %f900;
	sub.f32 	%f566, %f565, %f564;
	mul.f32 	%f910, %f566, %f553;
	mul.f32 	%f916, %f551, %f553;
	mul.f32 	%f567, %f896, %f903;
	mul.f32 	%f568, %f895, %f904;
	sub.f32 	%f569, %f568, %f567;
	mul.f32 	%f915, %f569, %f553;
	mul.f32 	%f570, %f895, %f900;
	mul.f32 	%f571, %f896, %f899;
	sub.f32 	%f572, %f571, %f570;
	mul.f32 	%f914, %f572, %f553;
	mul.f32 	%f573, %f893, %f908;
	neg.f32 	%f574, %f573;
	mul.f32 	%f575, %f897, %f907;
	sub.f32 	%f576, %f574, %f575;
	mul.f32 	%f577, %f901, %f906;
	sub.f32 	%f905, %f576, %f577;
	mul.f32 	%f578, %f893, %f912;
	neg.f32 	%f579, %f578;
	mul.f32 	%f580, %f897, %f911;
	sub.f32 	%f581, %f579, %f580;
	mul.f32 	%f582, %f901, %f910;
	sub.f32 	%f909, %f581, %f582;
	mul.f32 	%f583, %f893, %f916;
	neg.f32 	%f584, %f583;
	mul.f32 	%f585, %f897, %f915;
	sub.f32 	%f586, %f584, %f585;
	mul.f32 	%f587, %f901, %f914;
	sub.f32 	%f913, %f586, %f587;
	bra.uni 	$L__BB9_16;

$L__BB9_7:
	// begin inline asm
	call (%rd256), _optix_get_instance_inverse_transform_from_handle, (%rd18);
	// end inline asm

$L__BB9_8:
	// begin inline asm
	cvta.to.global.u64 %rd24, %rd256;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r15,%r16,%r17,%r18}, [%rd24];
	// end inline asm
	mov.b32 	%f908, %r15;
	mov.b32 	%f907, %r16;
	mov.b32 	%f906, %r17;
	mov.b32 	%f905, %r18;
	add.s64 	%rd28, %rd256, 16;
	// begin inline asm
	cvta.to.global.u64 %rd27, %rd28;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r19,%r20,%r21,%r22}, [%rd27];
	// end inline asm
	mov.b32 	%f912, %r19;
	mov.b32 	%f911, %r20;
	mov.b32 	%f910, %r21;
	mov.b32 	%f909, %r22;
	add.s64 	%rd31, %rd256, 32;
	// begin inline asm
	cvta.to.global.u64 %rd30, %rd31;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r23,%r24,%r25,%r26}, [%rd30];
	// end inline asm
	mov.b32 	%f916, %r23;
	mov.b32 	%f915, %r24;
	mov.b32 	%f914, %r25;
	mov.b32 	%f913, %r26;

$L__BB9_16:
	setp.eq.s32 	%p12, %r320, 0;
	@%p12 bra 	$L__BB9_18;

	mul.f32 	%f588, %f873, %f908;
	fma.rn.f32 	%f589, %f869, %f907, %f588;
	fma.rn.f32 	%f151, %f865, %f906, %f589;
	mul.f32 	%f590, %f874, %f908;
	fma.rn.f32 	%f591, %f870, %f907, %f590;
	fma.rn.f32 	%f152, %f866, %f906, %f591;
	mul.f32 	%f592, %f875, %f908;
	fma.rn.f32 	%f593, %f871, %f907, %f592;
	fma.rn.f32 	%f153, %f867, %f906, %f593;
	mul.f32 	%f594, %f876, %f908;
	fma.rn.f32 	%f595, %f872, %f907, %f594;
	fma.rn.f32 	%f596, %f868, %f906, %f595;
	add.f32 	%f905, %f905, %f596;
	mul.f32 	%f597, %f873, %f912;
	fma.rn.f32 	%f598, %f869, %f911, %f597;
	fma.rn.f32 	%f155, %f865, %f910, %f598;
	mul.f32 	%f599, %f874, %f912;
	fma.rn.f32 	%f600, %f870, %f911, %f599;
	fma.rn.f32 	%f156, %f866, %f910, %f600;
	mul.f32 	%f601, %f875, %f912;
	fma.rn.f32 	%f602, %f871, %f911, %f601;
	fma.rn.f32 	%f157, %f867, %f910, %f602;
	mul.f32 	%f603, %f876, %f912;
	fma.rn.f32 	%f604, %f872, %f911, %f603;
	fma.rn.f32 	%f605, %f868, %f910, %f604;
	add.f32 	%f909, %f909, %f605;
	mul.f32 	%f606, %f873, %f916;
	fma.rn.f32 	%f607, %f869, %f915, %f606;
	fma.rn.f32 	%f159, %f865, %f914, %f607;
	mul.f32 	%f608, %f874, %f916;
	fma.rn.f32 	%f609, %f870, %f915, %f608;
	fma.rn.f32 	%f160, %f866, %f914, %f609;
	mul.f32 	%f610, %f875, %f916;
	fma.rn.f32 	%f611, %f871, %f915, %f610;
	fma.rn.f32 	%f161, %f867, %f914, %f611;
	mul.f32 	%f612, %f876, %f916;
	fma.rn.f32 	%f613, %f872, %f915, %f612;
	fma.rn.f32 	%f614, %f868, %f914, %f613;
	add.f32 	%f913, %f913, %f614;
	mov.f32 	%f906, %f153;
	mov.f32 	%f907, %f152;
	mov.f32 	%f908, %f151;
	mov.f32 	%f910, %f157;
	mov.f32 	%f911, %f156;
	mov.f32 	%f912, %f155;
	mov.f32 	%f914, %f161;
	mov.f32 	%f915, %f160;
	mov.f32 	%f916, %f159;

$L__BB9_18:
	add.s32 	%r320, %r320, 1;
	setp.lt.u32 	%p13, %r320, %r10;
	mov.f32 	%f865, %f916;
	mov.f32 	%f866, %f915;
	mov.f32 	%f867, %f914;
	mov.f32 	%f868, %f913;
	mov.f32 	%f869, %f912;
	mov.f32 	%f870, %f911;
	mov.f32 	%f871, %f910;
	mov.f32 	%f872, %f909;
	mov.f32 	%f873, %f908;
	mov.f32 	%f874, %f907;
	mov.f32 	%f875, %f906;
	mov.f32 	%f876, %f905;
	@%p13 bra 	$L__BB9_3;

$L__BB9_19:
	mul.f32 	%f615, %f941, %f908;
	fma.rn.f32 	%f616, %f942, %f907, %f615;
	fma.rn.f32 	%f617, %f943, %f906, %f616;
	mul.f32 	%f618, %f941, %f912;
	fma.rn.f32 	%f619, %f942, %f911, %f618;
	fma.rn.f32 	%f620, %f943, %f910, %f619;
	mul.f32 	%f621, %f941, %f916;
	fma.rn.f32 	%f622, %f942, %f915, %f621;
	fma.rn.f32 	%f623, %f943, %f914, %f622;
	add.f32 	%f943, %f913, %f623;
	add.f32 	%f942, %f909, %f620;
	add.f32 	%f941, %f905, %f617;

$L__BB9_20:
	// begin inline asm
	call (%f999), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f1000), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f626), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%r161), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p14, %r161, 0;
	@%p14 bra 	$L__BB9_40;

	// begin inline asm
	call (%r162), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f627), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p15, %r162, 0;
	@%p15 bra 	$L__BB9_39;

	mov.u32 	%r321, 0;

$L__BB9_23:
	.pragma "nounroll";
	// begin inline asm
	call (%rd137), _optix_get_transform_list_handle, (%r321);
	// end inline asm
	// begin inline asm
	call (%r165), _optix_get_transform_type_from_handle, (%rd137);
	// end inline asm
	or.b32  	%r166, %r165, 1;
	setp.eq.s32 	%p16, %r166, 3;
	@%p16 bra 	$L__BB9_29;
	bra.uni 	$L__BB9_24;

$L__BB9_29:
	setp.eq.s32 	%p19, %r165, 2;
	@%p19 bra 	$L__BB9_33;
	bra.uni 	$L__BB9_30;

$L__BB9_33:
	// begin inline asm
	call (%rd209), _optix_get_matrix_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd211, %rd209;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r254,%r255,%r256,%r257}, [%rd211];
	// end inline asm
	add.s64 	%rd215, %rd209, 16;
	// begin inline asm
	cvta.to.global.u64 %rd214, %rd215;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r258,%r259,%r260,%r261}, [%rd214];
	// end inline asm
	add.s64 	%rd218, %rd209, 32;
	// begin inline asm
	cvta.to.global.u64 %rd217, %rd218;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r262,%r263,%r264,%r265}, [%rd217];
	// end inline asm
	add.s64 	%rd221, %rd209, 48;
	// begin inline asm
	cvta.to.global.u64 %rd220, %rd221;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r266,%r267,%r268,%r269}, [%rd220];
	// end inline asm
	add.s64 	%rd224, %rd209, 64;
	// begin inline asm
	cvta.to.global.u64 %rd223, %rd224;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r270,%r271,%r272,%r273}, [%rd223];
	// end inline asm
	add.s64 	%rd227, %rd209, 80;
	// begin inline asm
	cvta.to.global.u64 %rd226, %rd227;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r274,%r275,%r276,%r277}, [%rd226];
	// end inline asm
	add.s64 	%rd230, %rd209, 96;
	// begin inline asm
	cvta.to.global.u64 %rd229, %rd230;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r278,%r279,%r280,%r281}, [%rd229];
	// end inline asm
	add.s64 	%rd233, %rd209, 112;
	// begin inline asm
	cvta.to.global.u64 %rd232, %rd233;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r282,%r283,%r284,%r285}, [%rd232];
	// end inline asm
	mov.b32 	%f734, %r257;
	mov.b32 	%f735, %r258;
	and.b32  	%r298, %r256, 65535;
	add.s32 	%r299, %r298, -1;
	cvt.rn.f32.s32 	%f736, %r299;
	sub.f32 	%f737, %f627, %f734;
	sub.f32 	%f738, %f735, %f734;
	div.approx.f32 	%f739, %f737, %f738;
	mul.f32 	%f740, %f739, %f736;
	min.f32 	%f741, %f736, %f740;
	mov.f32 	%f742, 0f00000000;
	max.f32 	%f743, %f742, %f741;
	setp.num.f32 	%p22, %f743, %f743;
	selp.f32 	%f744, %f743, 0f00000000, %p22;
	cvt.rmi.f32.f32 	%f745, %f744;
	add.f32 	%f746, %f736, 0fBF800000;
	min.f32 	%f747, %f745, %f746;
	sub.f32 	%f258, %f744, %f747;
	cvt.rzi.s32.f32 	%r300, %f747;
	cvt.s64.s32 	%rd15, %r300;
	mul.wide.s32 	%rd244, %r300, 48;
	add.s64 	%rd236, %rd218, %rd244;
	// begin inline asm
	cvta.to.global.u64 %rd235, %rd236;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r286,%r287,%r288,%r289}, [%rd235];
	// end inline asm
	mov.b32 	%f969, %r286;
	mov.b32 	%f970, %r287;
	mov.b32 	%f971, %r288;
	add.s64 	%rd239, %rd236, 16;
	// begin inline asm
	cvta.to.global.u64 %rd238, %rd239;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r290,%r291,%r292,%r293}, [%rd238];
	// end inline asm
	mov.b32 	%f966, %r290;
	mov.b32 	%f967, %r291;
	mov.b32 	%f968, %r292;
	add.s64 	%rd242, %rd236, 32;
	// begin inline asm
	cvta.to.global.u64 %rd241, %rd242;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r294,%r295,%r296,%r297}, [%rd241];
	// end inline asm
	mov.b32 	%f963, %r294;
	mov.b32 	%f964, %r295;
	mov.b32 	%f965, %r296;
	setp.leu.f32 	%p23, %f258, 0f00000000;
	@%p23 bra 	$L__BB9_35;

	mov.f32 	%f748, 0f3F800000;
	sub.f32 	%f749, %f748, %f258;
	mul.lo.s64 	%rd254, %rd15, 48;
	add.s64 	%rd255, %rd209, %rd254;
	add.s64 	%rd246, %rd255, 80;
	// begin inline asm
	cvta.to.global.u64 %rd245, %rd246;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r301,%r302,%r303,%r304}, [%rd245];
	// end inline asm
	mov.b32 	%f750, %r301;
	mov.b32 	%f751, %r302;
	mov.b32 	%f752, %r303;
	mul.f32 	%f753, %f258, %f750;
	mul.f32 	%f754, %f258, %f751;
	mul.f32 	%f755, %f258, %f752;
	fma.rn.f32 	%f969, %f749, %f969, %f753;
	fma.rn.f32 	%f970, %f749, %f970, %f754;
	fma.rn.f32 	%f971, %f749, %f971, %f755;
	add.s64 	%rd249, %rd255, 96;
	// begin inline asm
	cvta.to.global.u64 %rd248, %rd249;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r305,%r306,%r307,%r308}, [%rd248];
	// end inline asm
	mov.b32 	%f756, %r305;
	mov.b32 	%f757, %r306;
	mov.b32 	%f758, %r307;
	mul.f32 	%f759, %f258, %f756;
	mul.f32 	%f760, %f258, %f757;
	mul.f32 	%f761, %f258, %f758;
	fma.rn.f32 	%f966, %f749, %f966, %f759;
	fma.rn.f32 	%f967, %f749, %f967, %f760;
	fma.rn.f32 	%f968, %f749, %f968, %f761;
	add.s64 	%rd252, %rd255, 112;
	// begin inline asm
	cvta.to.global.u64 %rd251, %rd252;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r309,%r310,%r311,%r312}, [%rd251];
	// end inline asm
	mov.b32 	%f762, %r309;
	mov.b32 	%f763, %r310;
	mov.b32 	%f764, %r311;
	mul.f32 	%f765, %f258, %f762;
	mul.f32 	%f766, %f258, %f763;
	mul.f32 	%f767, %f258, %f764;
	fma.rn.f32 	%f963, %f749, %f963, %f765;
	fma.rn.f32 	%f964, %f749, %f964, %f766;
	fma.rn.f32 	%f965, %f749, %f965, %f767;
	bra.uni 	$L__BB9_35;

$L__BB9_24:
	mov.f32 	%f972, 0f00000000;
	mov.f32 	%f974, 0f3F800000;
	setp.eq.s32 	%p17, %r165, 4;
	@%p17 bra 	$L__BB9_27;

	setp.ne.s32 	%p18, %r165, 1;
	mov.f32 	%f973, %f972;
	mov.f32 	%f975, %f972;
	mov.f32 	%f976, %f974;
	mov.f32 	%f977, %f972;
	mov.f32 	%f978, %f974;
	mov.f32 	%f979, %f972;
	mov.f32 	%f980, %f972;
	@%p18 bra 	$L__BB9_36;

	// begin inline asm
	call (%rd139), _optix_get_static_transform_from_handle, (%rd137);
	// end inline asm
	add.s64 	%rd257, %rd139, 64;
	bra.uni 	$L__BB9_28;

$L__BB9_30:
	// begin inline asm
	call (%rd152), _optix_get_srt_motion_transform_from_handle, (%rd137);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd154, %rd152;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r179,%r180,%r181,%r182}, [%rd154];
	// end inline asm
	add.s64 	%rd158, %rd152, 16;
	// begin inline asm
	cvta.to.global.u64 %rd157, %rd158;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r183,%r184,%r185,%r186}, [%rd157];
	// end inline asm
	add.s64 	%rd161, %rd152, 32;
	// begin inline asm
	cvta.to.global.u64 %rd160, %rd161;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r187,%r188,%r189,%r190}, [%rd160];
	// end inline asm
	add.s64 	%rd164, %rd152, 48;
	// begin inline asm
	cvta.to.global.u64 %rd163, %rd164;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r191,%r192,%r193,%r194}, [%rd163];
	// end inline asm
	add.s64 	%rd167, %rd152, 64;
	// begin inline asm
	cvta.to.global.u64 %rd166, %rd167;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r195,%r196,%r197,%r198}, [%rd166];
	// end inline asm
	add.s64 	%rd170, %rd152, 80;
	// begin inline asm
	cvta.to.global.u64 %rd169, %rd170;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r199,%r200,%r201,%r202}, [%rd169];
	// end inline asm
	add.s64 	%rd173, %rd152, 96;
	// begin inline asm
	cvta.to.global.u64 %rd172, %rd173;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r203,%r204,%r205,%r206}, [%rd172];
	// end inline asm
	add.s64 	%rd176, %rd152, 112;
	// begin inline asm
	cvta.to.global.u64 %rd175, %rd176;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r207,%r208,%r209,%r210}, [%rd175];
	// end inline asm
	add.s64 	%rd179, %rd152, 128;
	// begin inline asm
	cvta.to.global.u64 %rd178, %rd179;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r211,%r212,%r213,%r214}, [%rd178];
	// end inline asm
	add.s64 	%rd182, %rd152, 144;
	// begin inline asm
	cvta.to.global.u64 %rd181, %rd182;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r215,%r216,%r217,%r218}, [%rd181];
	// end inline asm
	mov.b32 	%f639, %r182;
	mov.b32 	%f640, %r183;
	and.b32  	%r235, %r181, 65535;
	add.s32 	%r236, %r235, -1;
	cvt.rn.f32.s32 	%f641, %r236;
	sub.f32 	%f642, %f627, %f639;
	sub.f32 	%f643, %f640, %f639;
	div.approx.f32 	%f644, %f642, %f643;
	mul.f32 	%f645, %f644, %f641;
	min.f32 	%f646, %f641, %f645;
	mov.f32 	%f647, 0f00000000;
	max.f32 	%f648, %f647, %f646;
	setp.num.f32 	%p20, %f648, %f648;
	selp.f32 	%f649, %f648, 0f00000000, %p20;
	cvt.rmi.f32.f32 	%f650, %f649;
	add.f32 	%f651, %f641, 0fBF800000;
	min.f32 	%f652, %f650, %f651;
	sub.f32 	%f218, %f649, %f652;
	cvt.rzi.s32.f32 	%r237, %f652;
	mul.wide.s32 	%rd196, %r237, 64;
	add.s64 	%rd185, %rd161, %rd196;
	// begin inline asm
	cvta.to.global.u64 %rd184, %rd185;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r219,%r220,%r221,%r222}, [%rd184];
	// end inline asm
	mov.b32 	%f953, %r219;
	mov.b32 	%f954, %r220;
	mov.b32 	%f955, %r221;
	add.s64 	%rd188, %rd185, 16;
	// begin inline asm
	cvta.to.global.u64 %rd187, %rd188;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r223,%r224,%r225,%r226}, [%rd187];
	// end inline asm
	mov.b32 	%f956, %r223;
	mov.b32 	%f957, %r224;
	mov.b32 	%f958, %r226;
	add.s64 	%rd191, %rd185, 32;
	// begin inline asm
	cvta.to.global.u64 %rd190, %rd191;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r227,%r228,%r229,%r230}, [%rd190];
	// end inline asm
	mov.b32 	%f959, %r228;
	mov.b32 	%f960, %r229;
	mov.b32 	%f961, %r230;
	add.s64 	%rd194, %rd185, 48;
	// begin inline asm
	cvta.to.global.u64 %rd193, %rd194;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r231,%r232,%r233,%r234}, [%rd193];
	// end inline asm
	mov.b32 	%f962, %r231;
	setp.leu.f32 	%p21, %f218, 0f00000000;
	@%p21 bra 	$L__BB9_32;

	mov.f32 	%f653, 0f3F800000;
	sub.f32 	%f654, %f653, %f218;
	add.s64 	%rd198, %rd185, 64;
	// begin inline asm
	cvta.to.global.u64 %rd197, %rd198;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r238,%r239,%r240,%r241}, [%rd197];
	// end inline asm
	mov.b32 	%f655, %r238;
	mov.b32 	%f656, %r239;
	mov.b32 	%f657, %r240;
	mul.f32 	%f658, %f218, %f655;
	mul.f32 	%f659, %f218, %f656;
	mul.f32 	%f660, %f218, %f657;
	fma.rn.f32 	%f953, %f654, %f953, %f658;
	fma.rn.f32 	%f954, %f654, %f954, %f659;
	fma.rn.f32 	%f955, %f654, %f955, %f660;
	add.s64 	%rd201, %rd185, 80;
	// begin inline asm
	cvta.to.global.u64 %rd200, %rd201;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r242,%r243,%r244,%r245}, [%rd200];
	// end inline asm
	mov.b32 	%f661, %r242;
	mov.b32 	%f662, %r243;
	mov.b32 	%f663, %r245;
	mul.f32 	%f664, %f218, %f661;
	mul.f32 	%f665, %f218, %f662;
	mul.f32 	%f666, %f218, %f663;
	fma.rn.f32 	%f956, %f654, %f956, %f664;
	fma.rn.f32 	%f957, %f654, %f957, %f665;
	fma.rn.f32 	%f958, %f654, %f958, %f666;
	add.s64 	%rd204, %rd185, 96;
	// begin inline asm
	cvta.to.global.u64 %rd203, %rd204;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r246,%r247,%r248,%r249}, [%rd203];
	// end inline asm
	mov.b32 	%f667, %r247;
	mov.b32 	%f668, %r248;
	mov.b32 	%f669, %r249;
	mul.f32 	%f670, %f218, %f667;
	mul.f32 	%f671, %f218, %f668;
	mul.f32 	%f672, %f218, %f669;
	fma.rn.f32 	%f673, %f654, %f959, %f670;
	fma.rn.f32 	%f674, %f654, %f960, %f671;
	fma.rn.f32 	%f675, %f654, %f961, %f672;
	add.s64 	%rd207, %rd185, 112;
	// begin inline asm
	cvta.to.global.u64 %rd206, %rd207;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r250,%r251,%r252,%r253}, [%rd206];
	// end inline asm
	mov.b32 	%f676, %r250;
	mul.f32 	%f677, %f218, %f676;
	fma.rn.f32 	%f678, %f654, %f962, %f677;
	mul.f32 	%f679, %f674, %f674;
	fma.rn.f32 	%f680, %f673, %f673, %f679;
	fma.rn.f32 	%f681, %f675, %f675, %f680;
	fma.rn.f32 	%f682, %f678, %f678, %f681;
	sqrt.rn.f32 	%f683, %f682;
	rcp.rn.f32 	%f684, %f683;
	mul.f32 	%f959, %f673, %f684;
	mul.f32 	%f960, %f674, %f684;
	mul.f32 	%f961, %f675, %f684;
	mul.f32 	%f962, %f684, %f678;

$L__BB9_32:
	mul.f32 	%f685, %f960, %f960;
	fma.rn.f32 	%f686, %f959, %f959, %f685;
	fma.rn.f32 	%f687, %f961, %f961, %f686;
	fma.rn.f32 	%f688, %f962, %f962, %f687;
	rcp.rn.f32 	%f689, %f688;
	mul.f32 	%f690, %f959, %f689;
	mul.f32 	%f691, %f960, %f689;
	mul.f32 	%f692, %f961, %f689;
	mul.f32 	%f693, %f962, %f689;
	mul.f32 	%f694, %f959, %f690;
	mul.f32 	%f695, %f960, %f691;
	mul.f32 	%f696, %f961, %f692;
	mul.f32 	%f697, %f959, %f691;
	mul.f32 	%f698, %f961, %f693;
	mul.f32 	%f699, %f959, %f692;
	mul.f32 	%f700, %f960, %f693;
	mul.f32 	%f701, %f960, %f692;
	mul.f32 	%f702, %f959, %f693;
	sub.f32 	%f703, %f694, %f695;
	sub.f32 	%f704, %f703, %f696;
	fma.rn.f32 	%f705, %f962, %f693, %f704;
	sub.f32 	%f706, %f697, %f698;
	add.f32 	%f707, %f706, %f706;
	add.f32 	%f708, %f699, %f700;
	add.f32 	%f709, %f708, %f708;
	add.f32 	%f710, %f697, %f698;
	add.f32 	%f711, %f710, %f710;
	sub.f32 	%f712, %f695, %f694;
	sub.f32 	%f713, %f712, %f696;
	fma.rn.f32 	%f714, %f962, %f693, %f713;
	sub.f32 	%f715, %f701, %f702;
	add.f32 	%f716, %f715, %f715;
	sub.f32 	%f717, %f699, %f700;
	add.f32 	%f718, %f717, %f717;
	add.f32 	%f719, %f701, %f702;
	add.f32 	%f720, %f719, %f719;
	neg.f32 	%f721, %f694;
	sub.f32 	%f722, %f721, %f695;
	add.f32 	%f723, %f696, %f722;
	fma.rn.f32 	%f724, %f962, %f693, %f723;
	mul.f32 	%f725, %f955, %f705;
	fma.rn.f32 	%f726, %f957, %f707, %f725;
	fma.rn.f32 	%f971, %f958, %f709, %f726;
	mul.f32 	%f727, %f957, %f714;
	fma.rn.f32 	%f728, %f955, %f711, %f727;
	fma.rn.f32 	%f968, %f958, %f716, %f728;
	mul.f32 	%f729, %f957, %f720;
	fma.rn.f32 	%f730, %f955, %f718, %f729;
	fma.rn.f32 	%f965, %f958, %f724, %f730;
	mul.f32 	%f731, %f954, %f705;
	fma.rn.f32 	%f970, %f956, %f707, %f731;
	mul.f32 	%f732, %f956, %f714;
	fma.rn.f32 	%f967, %f954, %f711, %f732;
	mul.f32 	%f733, %f956, %f720;
	fma.rn.f32 	%f964, %f954, %f718, %f733;
	mul.f32 	%f969, %f953, %f705;
	mul.f32 	%f966, %f953, %f711;
	mul.f32 	%f963, %f953, %f718;

$L__BB9_35:
	mul.f32 	%f768, %f964, %f968;
	mul.f32 	%f769, %f965, %f967;
	sub.f32 	%f770, %f769, %f768;
	mul.f32 	%f771, %f969, %f770;
	mul.f32 	%f772, %f963, %f968;
	mul.f32 	%f773, %f965, %f966;
	sub.f32 	%f774, %f773, %f772;
	mul.f32 	%f775, %f774, %f970;
	sub.f32 	%f776, %f771, %f775;
	mul.f32 	%f777, %f963, %f967;
	mul.f32 	%f778, %f964, %f966;
	sub.f32 	%f779, %f778, %f777;
	fma.rn.f32 	%f780, %f779, %f971, %f776;
	rcp.rn.f32 	%f781, %f780;
	mul.f32 	%f978, %f770, %f781;
	mul.f32 	%f782, %f965, %f970;
	mul.f32 	%f783, %f964, %f971;
	sub.f32 	%f784, %f783, %f782;
	mul.f32 	%f979, %f784, %f781;
	mul.f32 	%f785, %f967, %f971;
	mul.f32 	%f786, %f968, %f970;
	sub.f32 	%f787, %f786, %f785;
	mul.f32 	%f980, %f787, %f781;
	sub.f32 	%f788, %f772, %f773;
	mul.f32 	%f975, %f788, %f781;
	mul.f32 	%f789, %f963, %f971;
	mul.f32 	%f790, %f965, %f969;
	sub.f32 	%f791, %f790, %f789;
	mul.f32 	%f976, %f791, %f781;
	mul.f32 	%f792, %f968, %f969;
	mul.f32 	%f793, %f966, %f971;
	sub.f32 	%f794, %f793, %f792;
	mul.f32 	%f977, %f794, %f781;
	mul.f32 	%f972, %f779, %f781;
	mul.f32 	%f795, %f964, %f969;
	mul.f32 	%f796, %f963, %f970;
	sub.f32 	%f797, %f796, %f795;
	mul.f32 	%f973, %f797, %f781;
	mul.f32 	%f798, %f966, %f970;
	mul.f32 	%f799, %f967, %f969;
	sub.f32 	%f800, %f799, %f798;
	mul.f32 	%f974, %f800, %f781;
	bra.uni 	$L__BB9_36;

$L__BB9_27:
	// begin inline asm
	call (%rd257), _optix_get_instance_inverse_transform_from_handle, (%rd137);
	// end inline asm

$L__BB9_28:
	// begin inline asm
	cvta.to.global.u64 %rd143, %rd257;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r167,%r168,%r169,%r170}, [%rd143];
	// end inline asm
	mov.b32 	%f978, %r167;
	mov.b32 	%f979, %r168;
	mov.b32 	%f980, %r169;
	add.s64 	%rd147, %rd257, 16;
	// begin inline asm
	cvta.to.global.u64 %rd146, %rd147;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r171,%r172,%r173,%r174}, [%rd146];
	// end inline asm
	mov.b32 	%f975, %r171;
	mov.b32 	%f976, %r172;
	mov.b32 	%f977, %r173;
	add.s64 	%rd150, %rd257, 32;
	// begin inline asm
	cvta.to.global.u64 %rd149, %rd150;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r175,%r176,%r177,%r178}, [%rd149];
	// end inline asm
	mov.b32 	%f972, %r175;
	mov.b32 	%f973, %r176;
	mov.b32 	%f974, %r177;

$L__BB9_36:
	setp.eq.s32 	%p24, %r321, 0;
	@%p24 bra 	$L__BB9_38;

	mul.f32 	%f801, %f949, %f979;
	fma.rn.f32 	%f802, %f946, %f978, %f801;
	fma.rn.f32 	%f304, %f952, %f980, %f802;
	mul.f32 	%f803, %f948, %f979;
	fma.rn.f32 	%f804, %f945, %f978, %f803;
	fma.rn.f32 	%f305, %f951, %f980, %f804;
	mul.f32 	%f805, %f947, %f979;
	fma.rn.f32 	%f806, %f944, %f978, %f805;
	fma.rn.f32 	%f980, %f950, %f980, %f806;
	mul.f32 	%f807, %f949, %f976;
	fma.rn.f32 	%f808, %f946, %f975, %f807;
	fma.rn.f32 	%f307, %f952, %f977, %f808;
	mul.f32 	%f809, %f948, %f976;
	fma.rn.f32 	%f810, %f945, %f975, %f809;
	fma.rn.f32 	%f308, %f951, %f977, %f810;
	mul.f32 	%f811, %f947, %f976;
	fma.rn.f32 	%f812, %f944, %f975, %f811;
	fma.rn.f32 	%f977, %f950, %f977, %f812;
	mul.f32 	%f813, %f949, %f973;
	fma.rn.f32 	%f814, %f946, %f972, %f813;
	fma.rn.f32 	%f310, %f952, %f974, %f814;
	mul.f32 	%f815, %f948, %f973;
	fma.rn.f32 	%f816, %f945, %f972, %f815;
	fma.rn.f32 	%f311, %f951, %f974, %f816;
	mul.f32 	%f817, %f947, %f973;
	fma.rn.f32 	%f818, %f944, %f972, %f817;
	fma.rn.f32 	%f974, %f950, %f974, %f818;
	mov.f32 	%f972, %f310;
	mov.f32 	%f973, %f311;
	mov.f32 	%f975, %f307;
	mov.f32 	%f976, %f308;
	mov.f32 	%f978, %f304;
	mov.f32 	%f979, %f305;

$L__BB9_38:
	add.s32 	%r321, %r321, 1;
	setp.lt.u32 	%p25, %r321, %r162;
	mov.f32 	%f944, %f980;
	mov.f32 	%f945, %f979;
	mov.f32 	%f946, %f978;
	mov.f32 	%f947, %f977;
	mov.f32 	%f948, %f976;
	mov.f32 	%f949, %f975;
	mov.f32 	%f950, %f974;
	mov.f32 	%f951, %f973;
	mov.f32 	%f952, %f972;
	@%p25 bra 	$L__BB9_23;

$L__BB9_39:
	mul.f32 	%f819, %f1000, %f979;
	fma.rn.f32 	%f820, %f999, %f978, %f819;
	mul.f32 	%f821, %f1000, %f976;
	fma.rn.f32 	%f822, %f999, %f975, %f821;
	mul.f32 	%f823, %f1000, %f973;
	fma.rn.f32 	%f824, %f999, %f972, %f823;
	fma.rn.f32 	%f1001, %f626, %f974, %f824;
	fma.rn.f32 	%f1000, %f626, %f977, %f822;
	fma.rn.f32 	%f999, %f626, %f980, %f820;
	bra.uni 	$L__BB9_41;

$L__BB9_40:
	mov.f32 	%f1001, %f626;

$L__BB9_41:
	// begin inline asm
	call (%f825), _optix_get_ray_tmin, ();
	// end inline asm
	// begin inline asm
	call (%f826), _optix_get_ray_tmax, ();
	// end inline asm
	sub.f32 	%f343, %f826, %f825;
	fma.rn.f32 	%f344, %f999, %f825, %f941;
	fma.rn.f32 	%f345, %f1000, %f825, %f942;
	fma.rn.f32 	%f346, %f1001, %f825, %f943;
	add.s64 	%rd16, %rd1, 32;
	ld.f32 	%f347, [%rd1+32];
	sub.f32 	%f828, %f344, %f347;
	ld.f32 	%f348, [%rd1+36];
	sub.f32 	%f829, %f345, %f348;
	ld.f32 	%f349, [%rd1+40];
	sub.f32 	%f830, %f346, %f349;
	neg.f32 	%f831, %f829;
	neg.f32 	%f832, %f830;
	mul.f32 	%f833, %f828, %f999;
	neg.f32 	%f834, %f833;
	fma.rn.f32 	%f835, %f831, %f1000, %f834;
	fma.rn.f32 	%f836, %f832, %f1001, %f835;
	mul.f32 	%f837, %f999, %f999;
	fma.rn.f32 	%f838, %f1000, %f1000, %f837;
	fma.rn.f32 	%f350, %f1001, %f1001, %f838;
	sqrt.rn.f32 	%f839, %f350;
	div.rn.f32 	%f351, %f836, %f839;
	setp.neu.f32 	%p26, %f351, 0f00000000;
	@%p26 bra 	$L__BB9_43;

	setp.neu.f32 	%p27, %f344, %f347;
	setp.neu.f32 	%p28, %f345, %f348;
	or.pred  	%p29, %p27, %p28;
	setp.neu.f32 	%p30, %f346, %f349;
	or.pred  	%p31, %p29, %p30;
	@%p31 bra 	$L__BB9_49;

$L__BB9_43:
	fma.rn.f32 	%f840, %f351, %f999, %f344;
	sub.f32 	%f352, %f840, %f347;
	fma.rn.f32 	%f841, %f351, %f1000, %f345;
	sub.f32 	%f353, %f841, %f348;
	fma.rn.f32 	%f842, %f351, %f1001, %f346;
	sub.f32 	%f354, %f842, %f349;
	mul.f32 	%f843, %f352, %f352;
	fma.rn.f32 	%f844, %f353, %f353, %f843;
	fma.rn.f32 	%f355, %f354, %f354, %f844;
	sqrt.rn.f32 	%f845, %f355;
	ld.f32 	%f356, [%rd16+16];
	setp.gt.f32 	%p32, %f845, %f356;
	@%p32 bra 	$L__BB9_49;

	mul.f32 	%f847, %f352, %f999;
	fma.rn.f32 	%f848, %f353, %f1000, %f847;
	fma.rn.f32 	%f849, %f354, %f1001, %f848;
	add.f32 	%f357, %f849, %f849;
	mul.f32 	%f850, %f356, %f356;
	sub.f32 	%f358, %f355, %f850;
	setp.eq.f32 	%p34, %f357, 0f00000000;
	setp.eq.f32 	%p35, %f350, 0f00000000;
	and.pred  	%p36, %p35, %p34;
	mov.pred 	%p53, 0;
	@%p36 bra 	$L__BB9_47;

	neg.f32 	%f851, %f358;
	div.rn.f32 	%f1002, %f851, %f357;
	mul.f32 	%f852, %f350, 0fC0800000;
	mul.f32 	%f853, %f852, %f358;
	fma.rn.f32 	%f360, %f357, %f357, %f853;
	setp.neu.f32 	%p38, %f350, 0f00000000;
	setp.lt.f32 	%p39, %f360, 0f00000000;
	and.pred  	%p40, %p39, %p38;
	mov.f32 	%f1003, %f1002;
	@%p40 bra 	$L__BB9_47;

	mov.b32 	%r313, %f357;
	and.b32  	%r314, %r313, -2147483648;
	sqrt.rn.f32 	%f854, %f360;
	mov.b32 	%r315, %f854;
	and.b32  	%r316, %r315, 2147483647;
	or.b32  	%r317, %r316, %r314;
	mov.b32 	%f855, %r317;
	add.f32 	%f856, %f357, %f855;
	mul.f32 	%f857, %f856, 0fBF000000;
	div.rn.f32 	%f858, %f857, %f350;
	div.rn.f32 	%f859, %f358, %f857;
	min.f32 	%f860, %f858, %f859;
	max.f32 	%f861, %f858, %f859;
	selp.f32 	%f361, %f1002, %f860, %p35;
	selp.f32 	%f1003, %f1002, %f861, %p35;
	mov.pred 	%p53, -1;
	mov.f32 	%f1002, %f361;

$L__BB9_47:
	add.f32 	%f862, %f351, %f1002;
	setp.le.f32 	%p43, %f862, %f343;
	add.f32 	%f863, %f351, %f1003;
	setp.ge.f32 	%p44, %f863, 0f00000000;
	setp.geu.f32 	%p45, %f862, 0f00000000;
	setp.leu.f32 	%p46, %f863, %f343;
	setp.lt.f32 	%p47, %f862, 0f00000000;
	selp.f32 	%f365, %f863, %f862, %p47;
	and.pred  	%p48, %p44, %p43;
	and.pred  	%p49, %p53, %p48;
	or.pred  	%p50, %p45, %p46;
	and.pred  	%p51, %p50, %p49;
	not.pred 	%p52, %p51;
	@%p52 bra 	$L__BB9_49;

	mov.u32 	%r319, 254;
	// begin inline asm
	call (%r318), _optix_report_intersection_0, (%f365, %r319);
	// end inline asm

$L__BB9_49:
	ret;

}
	// .globl	__closesthit__sphere
.visible .entry __closesthit__sphere()
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<2>;


	// begin inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	// begin inline asm
	call (%f1), _optix_get_ray_tmax, ();
	// end inline asm
	ld.u32 	%r10, [%rd1];
	mov.b32 	%r2, %f1;
	mov.u32 	%r8, 0;
	// begin inline asm
	call _optix_set_payload, (%r8, %r2);
	// end inline asm
	mov.u32 	%r3, 1;
	// begin inline asm
	call _optix_set_payload, (%r3, %r13);
	// end inline asm
	mov.u32 	%r5, 2;
	// begin inline asm
	call _optix_set_payload, (%r5, %r14);
	// end inline asm
	mov.u32 	%r7, 3;
	// begin inline asm
	call _optix_set_payload, (%r7, %r8);
	// end inline asm
	mov.u32 	%r9, 4;
	// begin inline asm
	call _optix_set_payload, (%r9, %r10);
	// end inline asm
	mov.u32 	%r12, 5;
	// begin inline asm
	call (%r11), _optix_get_payload, (%r12);
	// end inline asm
	setp.eq.s32 	%p1, %r11, 0;
	@%p1 bra 	$L__BB10_2;

	// begin inline asm
	call (%r15), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r12, %r15);
	// end inline asm

$L__BB10_2:
	ret;

}
	// .globl	__closesthit__bsplinecurve
.visible .entry __closesthit__bsplinecurve()
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<2>;


	// begin inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	// begin inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// end inline asm
	// begin inline asm
	call (%f1), _optix_get_ray_tmax, ();
	// end inline asm
	// begin inline asm
	call (%f2), _optix_get_curve_parameter, ();
	// end inline asm
	ld.u32 	%r11, [%rd1];
	mov.b32 	%r3, %f1;
	mov.u32 	%r7, 0;
	// begin inline asm
	call _optix_set_payload, (%r7, %r3);
	// end inline asm
	mov.b32 	%r5, %f2;
	mov.u32 	%r4, 1;
	// begin inline asm
	call _optix_set_payload, (%r4, %r5);
	// end inline asm
	mov.u32 	%r6, 2;
	// begin inline asm
	call _optix_set_payload, (%r6, %r7);
	// end inline asm
	mov.u32 	%r8, 3;
	// begin inline asm
	call _optix_set_payload, (%r8, %r1);
	// end inline asm
	mov.u32 	%r10, 4;
	// begin inline asm
	call _optix_set_payload, (%r10, %r11);
	// end inline asm
	mov.u32 	%r13, 5;
	// begin inline asm
	call (%r12), _optix_get_payload, (%r13);
	// end inline asm
	setp.eq.s32 	%p1, %r12, 0;
	@%p1 bra 	$L__BB11_2;

	// begin inline asm
	call (%r14), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r13, %r14);
	// end inline asm

$L__BB11_2:
	ret;

}
	// .globl	__closesthit__linearcurve
.visible .entry __closesthit__linearcurve()
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<2>;


	// begin inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	// begin inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// end inline asm
	// begin inline asm
	call (%f1), _optix_get_ray_tmax, ();
	// end inline asm
	// begin inline asm
	call (%f2), _optix_get_curve_parameter, ();
	// end inline asm
	ld.u32 	%r11, [%rd1];
	mov.b32 	%r3, %f1;
	mov.u32 	%r7, 0;
	// begin inline asm
	call _optix_set_payload, (%r7, %r3);
	// end inline asm
	mov.b32 	%r5, %f2;
	mov.u32 	%r4, 1;
	// begin inline asm
	call _optix_set_payload, (%r4, %r5);
	// end inline asm
	mov.u32 	%r6, 2;
	// begin inline asm
	call _optix_set_payload, (%r6, %r7);
	// end inline asm
	mov.u32 	%r8, 3;
	// begin inline asm
	call _optix_set_payload, (%r8, %r1);
	// end inline asm
	mov.u32 	%r10, 4;
	// begin inline asm
	call _optix_set_payload, (%r10, %r11);
	// end inline asm
	mov.u32 	%r13, 5;
	// begin inline asm
	call (%r12), _optix_get_payload, (%r13);
	// end inline asm
	setp.eq.s32 	%p1, %r12, 0;
	@%p1 bra 	$L__BB12_2;

	// begin inline asm
	call (%r14), _optix_read_instance_id, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r13, %r14);
	// end inline asm

$L__BB12_2:
	ret;

}
	// .globl	__miss__ms
.visible .entry __miss__ms()
{
	.reg .b32 	%r<5>;


	mov.u32 	%r4, 0;
	mov.u32 	%r2, 2139095040;
	// begin inline asm
	call _optix_set_payload, (%r4, %r2);
	// end inline asm
	mov.u32 	%r3, 4;
	// begin inline asm
	call _optix_set_payload, (%r3, %r4);
	// end inline asm
	ret;

}

